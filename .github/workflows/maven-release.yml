# This workflow will build a package using Maven and then publish it to maven cnetral
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Release

on:
  workflow_dispatch:
    inputs:
      release-body:
        description: 'Text describing the contents of the release.'
        required: false
        default: ''

jobs:
  release:
    runs-on: ubuntu-latest
    environment: Maven
    permissions:
      contents: write
      packages: write

    steps:
    - uses: actions/checkout@v2
    - name: Set up Apache Maven Central
      uses: actions/setup-java@v2
      with: # running setup-java again overwrites the settings.xml
        distribution: 'zulu'
        java-version: '11'
        server-username: MAVEN_USERNAME # env variable for username in deploy
        server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
        gpg-passphrase:  MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase
        settings-path: ${{ github.workspace }}/generated-settings
    - name: Import GPG Key
      uses: crazy-max/ghaction-import-gpg@v4
      with:
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
    - name: Setup Git
      run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git config --global commit.gpgsign true
          git config --global tag.gpgsign true
          git config --global user.signingkey ${{ secrets.GPG_KEY_ID }}
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
    - name: Release
      run: >
          mvn -V -gs $GITHUB_WORKSPACE/settings.xml -B -P sign-artifacts -e release:clean release:prepare && 
          echo "::set-output name=RELEASED_VERSION::$(grep scm.tag= release.properties | cut -d'=' -f2 | cut -c2-)" && 
          mvn -gs $GITHUB_WORKSPACE/settings.xml -B -P sign-artifacts -e release:perform
      env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_USER }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          id: main
    - name: Deploy to Maven Central
      run: mvn -B -P sign-artifacts -f target/checkout nexus-staging:release
      env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_USER }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
    - name: Create Release Entry
      uses: actions/create-release@v1
      with:
          tag_name: v${{ steps.release.outputs.RELEASED_VERSION }}
          release_name: Formula Engine ${{ steps.release.outputs.RELEASED_VERSION }}
          body: ${{ github.event.inputs.release-body }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
