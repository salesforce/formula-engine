<?xml version="1.0" encoding="UTF-8"?>
<formula-test xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:noNamespaceSchemaLocation="formulaTestV2.xsd">

    <!--<testcase testName="testABCD"
              fieldName="testABCD"
              dataType="Boolean"
              formula="IF(ISBLANK(a__c),false,AND((VALUE(a__c)==VALUE(b__c)),(VALUE(c__c)==VALUE(d__c))))"
              executionPaths="sql,sqlNullAsNull">
        <referenceField fieldName="a" dataType="Text"/>
        <referenceField fieldName="b" dataType="Text"/>
        <referenceField fieldName="c" dataType="Text"/>
        <referenceField fieldName="d" dataType="Text"/>
        <testData input="null,1,1,1" expectedOutput="false,false"/>
        <testData input="1,null,1,1" expectedOutput="false,false"/>
        <testData input="1,1,null,1" expectedOutput="false,false"/>
        <testData input="1,1,1,null" expectedOutput="false,false"/>
        <testData input="1,1,null,null" expectedOutput="false,false"/>
        <testData input="1,null,1,null" expectedOutput="false,false"/>
        <testData input="null,1,1,null" expectedOutput="false,false"/>
        <testData input="1,null,null,1" expectedOutput="false,false"/>
        <testData input="null,1,null,1" expectedOutput="false,false"/>
        <testData input="null,null,1,1" expectedOutput="false,false"/>
        <testData input="null,null,null,1" expectedOutput="false,false"/>
        <testData input="1,null,null,null" expectedOutput="false,false"/>
        <testData input="null,1,null,null" expectedOutput="false,false"/>
        <testData input="null,null,1,null" expectedOutput="false,false"/>
        <testData input="null,null,null,null" expectedOutput="false,false"/>
        <testData input=",1,1,1" expectedOutput="false,false"/>
        <testData input="1,,1,1" expectedOutput="false,false"/>
        <testData input="1,1,,1" expectedOutput="false,false"/>
        <testData input="1,1,1," expectedOutput="false,false"/>
        <testData input="1,1,," expectedOutput="false,false"/>
        <testData input="1,,1," expectedOutput="false,false"/>
        <testData input=",1,1," expectedOutput="false,false"/>
        <testData input="1,,,1" expectedOutput="false,false"/>
        <testData input=",1,,1" expectedOutput="false,false"/>
        <testData input=",,1,1" expectedOutput="false,false"/>
        <testData input=",,,1" expectedOutput="false,false"/>
        <testData input="1,,," expectedOutput="false,false"/>
        <testData input=",1,," expectedOutput="false,false"/>
        <testData input=",,1," expectedOutput="false,false"/>
        <testData input=",,," expectedOutput="false,false"/>
    </testcase>-->

    <testcase testName="testDateTimeValueWithInvalidString"
              fieldName="testDateTimeValueWithInvalidString"
              dataType="DateOnly"
              formula="DATETIMEVALUE(&#34;sample &#34;)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <testData expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Javascript cannot parse time,
					Error: Javascript cannot parse time,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Javascript cannot parse time,
					Error: Javascript cannot parse time"/>
    </testcase>
    <testcase testName="testDateTimeValueWithValidString"
              fieldName="testDateTimeValueWithValidString"
              dataType="DateOnly"
              formula="DATETIMEVALUE(&#34;2005-11-15 17:00:00 &#34;)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <testData expectedOutput="Tue Nov 15 17:00:00 GMT 2005,
					2005-11-15 17:00:00.0,
					Tue Nov 15 17:00:00 GMT 2005,
					Tue Nov 15 17:00:00 GMT 2005,
					Tue Nov 15 17:00:00 GMT 2005,
					2005-11-15 17:00:00.0,
					Tue Nov 15 17:00:00 GMT 2005,
					Tue Nov 15 17:00:00 GMT 2005"/>
    </testcase>
    <testcase testName="testDateTimeValueWithValidInValid"
              fieldName="testDateTimeValueWithValidInValid"
              dataType="DateOnly"
              formula="DATETIMEVALUE(dateString__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="dateString" dataType="Text"/>
        <testData input="2011-01-29 00:00:09"
                  expectedOutput="Sat Jan 29 00:00:09 GMT 2011,
					2011-01-29 00:00:09.0,
					Sat Jan 29 00:00:09 GMT 2011,
					Sat Jan 29 00:00:09 GMT 2011,
					Sat Jan 29 00:00:09 GMT 2011,
					2011-01-29 00:00:09.0,
					Sat Jan 29 00:00:09 GMT 2011,
					Sat Jan 29 00:00:09 GMT 2011"/>
        <testData input="2011-01-9 00:00:09"
                  expectedOutput="Sun Jan 09 00:00:09 GMT 2011,
					2011-01-09 00:00:09.0,
					Sun Jan 09 00:00:09 GMT 2011,
					Sun Jan 09 00:00:09 GMT 2011,
					Sun Jan 09 00:00:09 GMT 2011,
					2011-01-09 00:00:09.0,
					Sun Jan 09 00:00:09 GMT 2011,
					Sun Jan 09 00:00:09 GMT 2011"/>
        <testData input="2011-1-29 00:00:00"
                  expectedOutput="Sat Jan 29 00:00:00 GMT 2011,
					2011-01-29 00:00:00.0,
					Sat Jan 29 00:00:00 GMT 2011,
					Sat Jan 29 00:00:00 GMT 2011,
					Sat Jan 29 00:00:00 GMT 2011,
					2011-01-29 00:00:00.0,
					Sat Jan 29 00:00:00 GMT 2011,
					Sat Jan 29 00:00:00 GMT 2011"/>
        <testData input="2011-1-1 00:00:00"
                  expectedOutput="Sat Jan 01 00:00:00 GMT 2011,
					2011-01-01 00:00:00.0,
					Sat Jan 01 00:00:00 GMT 2011,
					Sat Jan 01 00:00:00 GMT 2011,
					Sat Jan 01 00:00:00 GMT 2011,
					2011-01-01 00:00:00.0,
					Sat Jan 01 00:00:00 GMT 2011,
					Sat Jan 01 00:00:00 GMT 2011"/>
        <testData input="2011-01-1 1:00:00"
                  expectedOutput="Sat Jan 01 01:00:00 GMT 2011,
					2011-01-01 01:00:00.0,
					Sat Jan 01 01:00:00 GMT 2011,
					Sat Jan 01 01:00:00 GMT 2011,
					Sat Jan 01 01:00:00 GMT 2011,
					2011-01-01 01:00:00.0,
					Sat Jan 01 01:00:00 GMT 2011,
					Sat Jan 01 01:00:00 GMT 2011"/>
        <testData input="2011-1-23 2:22:59"
                  expectedOutput="Sun Jan 23 02:22:59 GMT 2011,
					2011-01-23 02:22:59.0,
					Sun Jan 23 02:22:59 GMT 2011,
					Sun Jan 23 02:22:59 GMT 2011,
					Sun Jan 23 02:22:59 GMT 2011,
					2011-01-23 02:22:59.0,
					Sun Jan 23 02:22:59 GMT 2011,
					Sun Jan 23 02:22:59 GMT 2011"/>
        <testData input="2012-2-7 5:22:33"
                  expectedOutput="Tue Feb 07 05:22:33 GMT 2012,
					2012-02-07 05:22:33.0,
					Tue Feb 07 05:22:33 GMT 2012,
					Tue Feb 07 05:22:33 GMT 2012,
					Tue Feb 07 05:22:33 GMT 2012,
					2012-02-07 05:22:33.0,
					Tue Feb 07 05:22:33 GMT 2012,
					Tue Feb 07 05:22:33 GMT 2012"/>
        <testData input="2011-13-29 00:00:09"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Javascript cannot parse time,
					Error: Javascript cannot parse time,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Javascript cannot parse time,
					Error: Javascript cannot parse time"/>
        <testData input="2012:02:02"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Javascript cannot parse time,
					Error: Javascript cannot parse time,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Javascript cannot parse time,
					Error: Javascript cannot parse time"/>
        <testData input="2012-01-01 24:00:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Mon Jan 02 00:00:00 GMT 2012,
					Mon Jan 02 00:00:00 GMT 2012,
					Error: com.force.formula.FormulaDateException,
					null,
					Mon Jan 02 00:00:00 GMT 2012,
					Mon Jan 02 00:00:00 GMT 2012"/>
        <testData input="2012-01-01 23:60:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Javascript cannot parse time,
					Error: Javascript cannot parse time,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Javascript cannot parse time,
					Error: Javascript cannot parse time"/>
        <testData input="2012-01-01 23:00:60"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Javascript cannot parse time,
					Error: Javascript cannot parse time,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Javascript cannot parse time,
					Error: Javascript cannot parse time"/>
        <testData input="2012-01-01 23:59:59"
                  expectedOutput="Sun Jan 01 23:59:59 GMT 2012,
					2012-01-01 23:59:59.0,
					Sun Jan 01 23:59:59 GMT 2012,
					Sun Jan 01 23:59:59 GMT 2012,
					Sun Jan 01 23:59:59 GMT 2012,
					2012-01-01 23:59:59.0,
					Sun Jan 01 23:59:59 GMT 2012,
					Sun Jan 01 23:59:59 GMT 2012"/>
        <testData input="2012-10-34 00:00:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Javascript cannot parse time,
					Error: Javascript cannot parse time,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Javascript cannot parse time,
					Error: Javascript cannot parse time"/>
        <testData input="2012-02-07 5:2:33"
                  expectedOutput="Tue Feb 07 05:02:33 GMT 2012,
					2012-02-07 05:02:33.0,
					Tue Feb 07 05:02:33 GMT 2012,
					Tue Feb 07 05:02:33 GMT 2012,
					Tue Feb 07 05:02:33 GMT 2012,
					2012-02-07 05:02:33.0,
					Tue Feb 07 05:02:33 GMT 2012,
					Tue Feb 07 05:02:33 GMT 2012"/>
        <testData input="2012-02-07 5:22:3"
                  expectedOutput="Tue Feb 07 05:22:03 GMT 2012,
					2012-02-07 05:22:03.0,
					Tue Feb 07 05:22:03 GMT 2012,
					Tue Feb 07 05:22:03 GMT 2012,
					Tue Feb 07 05:22:03 GMT 2012,
					2012-02-07 05:22:03.0,
					Tue Feb 07 05:22:03 GMT 2012,
					Tue Feb 07 05:22:03 GMT 2012"/>
    </testcase>
    <testcase testName="testTimeValueWithValidString"
              fieldName="testTimeValueWithValidString"
              dataType="TimeOnly"
              formula="TIMEVALUE(&#34;10:40:55.666&#34;)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <testData expectedOutput="10:40:55.666,
					10:40:55.666,
					10:40:55.666,
					10:40:55.666,
					10:40:55.666,
					10:40:55.666,
					10:40:55.666,
					10:40:55.666"/>
    </testcase>
    <testcase testName="testHourWithValidString"
              fieldName="testHourWithValidString"
              dataType="Double"
              formula="Hour(TIMEVALUE(&#34;10:40:55.666&#34;))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <testData expectedOutput="10,
					10,
					10,
					10,
					10,
					10,
					10,
					10"/>
    </testcase>
    <testcase testName="testMinuteWithValidString"
              fieldName="testMinuteWithValidString"
              dataType="Double"
              formula="Minute(TIMEVALUE(&#34;10:40:55.666&#34;))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <testData expectedOutput="40,
					40,
					40,
					40,
					40,
					40,
					40,
					40"/>
    </testcase>
    <testcase testName="testSecondWithValidString"
              fieldName="testSecondWithValidString"
              dataType="Double"
              formula="Second(TIMEVALUE(&#34;10:40:55.666&#34;))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <testData expectedOutput="55,
					55,
					55,
					55,
					55,
					55,
					55,
					55"/>
    </testcase>
    <testcase testName="testMillisecWithValidString"
              fieldName="testMillisecWithValidString"
              dataType="Double"
              formula="MilliSecond(TIMEVALUE(&#34;10:40:55.666&#34;))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <testData expectedOutput="666,
					666,
					666,
					666,
					666,
					666,
					666,
					666"/>
    </testcase>
    <testcase testName="testMillisecWithValidDateTimeString"
              fieldName="testMillisecWithValidDateTimeString"
              dataType="Double"
              formula="MilliSecond(TIMEVALUE(&#34;2015-03-17 17:00:00&#34;))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <testData expectedOutput="Error: com.force.formula.FormulaDateException,
					Error: ERROR: function round(double precision\, integer) does not exist   Hint: No function matches the given name and argument types. You might need to add explicit type casts.   Position: 37,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					Error: ERROR: function round(double precision\, integer) does not exist   Hint: No function matches the given name and argument types. You might need to add explicit type casts.   Position: 37,
					0,
					0"/>
    </testcase>
    <testcase testName="testTimeValueWithValidInValid"
              fieldName="testTimeValueWithValidInValid"
              dataType="TimeOnly"
              formula="TimeValue(DATETIMEVALUE(dateString__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="dateString" dataType="Text"/>
        <testData input="2011-01-29 00:00:09"
                  expectedOutput="00:00:09,
					00:00:09,
					00:00:09,
					00:00:09,
					00:00:09,
					00:00:09,
					00:00:09,
					00:00:09"/>
        <testData input="2011-01-9 00:00:09"
                  expectedOutput="00:00:09,
					00:00:09,
					00:00:09,
					00:00:09,
					00:00:09,
					00:00:09,
					00:00:09,
					00:00:09"/>
        <testData input="2011-1-29 00:00:00"
                  expectedOutput="00:00,
					00:00,
					00:00,
					00:00,
					00:00,
					00:00,
					00:00,
					00:00"/>
        <testData input="2011-1-1 00:00:00"
                  expectedOutput="00:00,
					00:00,
					00:00,
					00:00,
					00:00,
					00:00,
					00:00,
					00:00"/>
        <testData input="2011-01-1 1:00:00"
                  expectedOutput="01:00,
					01:00,
					01:00,
					01:00,
					01:00,
					01:00,
					01:00,
					01:00"/>
        <testData input="2011-1-23 2:22:59"
                  expectedOutput="02:22:59,
					02:22:59,
					02:22:59,
					02:22:59,
					02:22:59,
					02:22:59,
					02:22:59,
					02:22:59"/>
        <testData input="2012-2-7 5:22:33"
                  expectedOutput="05:22:33,
					05:22:33,
					05:22:33,
					05:22:33,
					05:22:33,
					05:22:33,
					05:22:33,
					05:22:33"/>
        <testData input="2011-13-29 00:00:09"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					00:00,
					00:00,
					Error: com.force.formula.FormulaDateException,
					null,
					00:00,
					00:00"/>
        <testData input="2012:02:02"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					00:00,
					00:00,
					Error: com.force.formula.FormulaDateException,
					null,
					00:00,
					00:00"/>
        <testData input="2012-01-01 24:00:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					00:00,
					00:00,
					Error: com.force.formula.FormulaDateException,
					null,
					00:00,
					00:00"/>
        <testData input="2012-01-01 23:60:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					00:00,
					00:00,
					Error: com.force.formula.FormulaDateException,
					null,
					00:00,
					00:00"/>
        <testData input="2012-01-01 23:00:60"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					00:00,
					00:00,
					Error: com.force.formula.FormulaDateException,
					null,
					00:00,
					00:00"/>
        <testData input="2012-01-01 23:59:59"
                  expectedOutput="23:59:59,
					23:59:59,
					23:59:59,
					23:59:59,
					23:59:59,
					23:59:59,
					23:59:59,
					23:59:59"/>
        <testData input="2012-10-34 00:00:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					00:00,
					00:00,
					Error: com.force.formula.FormulaDateException,
					null,
					00:00,
					00:00"/>
        <testData input="2012-02-07 5:2:33"
                  expectedOutput="05:02:33,
					05:02:33,
					05:02:33,
					05:02:33,
					05:02:33,
					05:02:33,
					05:02:33,
					05:02:33"/>
        <testData input="2012-02-07 5:22:3"
                  expectedOutput="05:22:03,
					05:22:03,
					05:22:03,
					05:22:03,
					05:22:03,
					05:22:03,
					05:22:03,
					05:22:03"/>
    </testcase>
    <testcase testName="testHourWithAddOperator"
              fieldName="testHourWithAddOperator"
              dataType="Double"
              formula="Hour(TIMEVALUE(&#34;10:40:55.666&#34;)+3600000)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <testData expectedOutput="11,
					11,
					11,
					11,
					11,
					11,
					11,
					11"/>
    </testcase>
    <testcase testName="testAddTimeValueWithValidInValid"
              fieldName="testAddTimeValueWithValidInValid"
              dataType="TimeOnly"
              formula="TimeValue(dateString__c) + 7200000"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="dateString" dataType="Text"/>
        <testData input="10:34:55.666"
                  expectedOutput="12:34:55.666,
					12:34:55.666,
					12:34:55.666,
					12:34:55.666,
					12:34:55.666,
					12:34:55.666,
					12:34:55.666,
					12:34:55.666"/>
        <testData input="23:56:45.898"
                  expectedOutput="01:56:45.898,
					01:56:45.898,
					01:56:45.898,
					01:56:45.898,
					01:56:45.898,
					01:56:45.898,
					01:56:45.898,
					01:56:45.898"/>
        <testData input="01:14:23.345"
                  expectedOutput="03:14:23.345,
					03:14:23.345,
					03:14:23.345,
					03:14:23.345,
					03:14:23.345,
					03:14:23.345,
					03:14:23.345,
					03:14:23.345"/>
        <testData input="01:66:29.345"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					02:00,
					02:00,
					Error: com.force.formula.FormulaDateException,
					null,
					02:00,
					02:00"/>
        <testData input="00:00:29.345"
                  expectedOutput="02:00:29.345,
					02:00:29.345,
					02:00:29.345,
					02:00:29.345,
					02:00:29.345,
					02:00:29.345,
					02:00:29.345,
					02:00:29.345"/>
        <testData input="00:00:00.789"
                  expectedOutput="02:00:00.789,
					02:00:00.789,
					02:00:00.789,
					02:00:00.789,
					02:00:00.789,
					02:00:00.789,
					02:00:00.789,
					02:00:00.789"/>
        <testData input="00:00:00.000"
                  expectedOutput="02:00,
					02:00,
					02:00,
					02:00,
					02:00,
					02:00,
					02:00,
					02:00"/>
        <testData input="24:12:56.123"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					02:12:56.123,
					02:12:56.123,
					Error: com.force.formula.FormulaDateException,
					null,
					02:12:56.123,
					02:12:56.123"/>
        <testData input="23:62:56.123"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					02:00,
					02:00,
					Error: com.force.formula.FormulaDateException,
					null,
					02:00,
					02:00"/>
        <testData input="23:52:65.123"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					02:00,
					02:00,
					Error: com.force.formula.FormulaDateException,
					null,
					02:00,
					02:00"/>
        <testData input="01:14:23.3456"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					03:14:26.456,
					03:14:26.456,
					Error: com.force.formula.FormulaDateException,
					null,
					03:14:26.456,
					03:14:26.456"/>
        <testData input="00:00:01.000"
                  expectedOutput="02:00:01,
					02:00:01,
					02:00:01,
					02:00:01,
					02:00:01,
					02:00:01,
					02:00:01,
					02:00:01"/>
        <testData input="23:59:59.999"
                  expectedOutput="01:59:59.999,
					01:59:59.999,
					01:59:59.999,
					01:59:59.999,
					01:59:59.999,
					01:59:59.999,
					01:59:59.999,
					01:59:59.999"/>
    </testcase>
    <testcase testName="testAddBigTimeValueWithValidInValid"
              fieldName="testAddBigTimeValueWithValidInValid"
              dataType="TimeOnly"
              formula="TimeValue(dateString__c) + 93600000"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="dateString" dataType="Text"/>
        <testData input="10:34:55.666"
                  expectedOutput="12:34:55.666,
					12:34:55.666,
					12:34:55.666,
					12:34:55.666,
					12:34:55.666,
					12:34:55.666,
					12:34:55.666,
					12:34:55.666"/>
        <testData input="23:56:45.898"
                  expectedOutput="01:56:45.898,
					01:56:45.898,
					01:56:45.898,
					01:56:45.898,
					01:56:45.898,
					01:56:45.898,
					01:56:45.898,
					01:56:45.898"/>
        <testData input="01:14:23.345"
                  expectedOutput="03:14:23.345,
					03:14:23.345,
					03:14:23.345,
					03:14:23.345,
					03:14:23.345,
					03:14:23.345,
					03:14:23.345,
					03:14:23.345"/>
        <testData input="01:66:29.345"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					02:00,
					02:00,
					Error: com.force.formula.FormulaDateException,
					null,
					02:00,
					02:00"/>
        <testData input="00:00:29.345"
                  expectedOutput="02:00:29.345,
					02:00:29.345,
					02:00:29.345,
					02:00:29.345,
					02:00:29.345,
					02:00:29.345,
					02:00:29.345,
					02:00:29.345"/>
        <testData input="00:00:00.789"
                  expectedOutput="02:00:00.789,
					02:00:00.789,
					02:00:00.789,
					02:00:00.789,
					02:00:00.789,
					02:00:00.789,
					02:00:00.789,
					02:00:00.789"/>
        <testData input="00:00:00.000"
                  expectedOutput="02:00,
					02:00,
					02:00,
					02:00,
					02:00,
					02:00,
					02:00,
					02:00"/>
        <testData input="24:12:56.123"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					02:12:56.123,
					02:12:56.123,
					Error: com.force.formula.FormulaDateException,
					null,
					02:12:56.123,
					02:12:56.123"/>
        <testData input="23:62:56.123"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					02:00,
					02:00,
					Error: com.force.formula.FormulaDateException,
					null,
					02:00,
					02:00"/>
        <testData input="23:52:65.123"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					02:00,
					02:00,
					Error: com.force.formula.FormulaDateException,
					null,
					02:00,
					02:00"/>
        <testData input="01:14:23.3456"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					03:14:26.456,
					03:14:26.456,
					Error: com.force.formula.FormulaDateException,
					null,
					03:14:26.456,
					03:14:26.456"/>
        <testData input="00:00:01.000"
                  expectedOutput="02:00:01,
					02:00:01,
					02:00:01,
					02:00:01,
					02:00:01,
					02:00:01,
					02:00:01,
					02:00:01"/>
        <testData input="23:59:59.999"
                  expectedOutput="01:59:59.999,
					01:59:59.999,
					01:59:59.999,
					01:59:59.999,
					01:59:59.999,
					01:59:59.999,
					01:59:59.999,
					01:59:59.999"/>
    </testcase>
    <testcase testName="testSubtractTimeValueWithValidInValid"
              fieldName="testSubtractTimeValueWithValidInValid"
              dataType="TimeOnly"
              formula="TimeValue(dateString__c) - 7200000"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="dateString" dataType="Text"/>
        <testData input="10:34:55.666"
                  expectedOutput="08:34:55.666,
					08:34:55.666,
					08:34:55.666,
					08:34:55.666,
					08:34:55.666,
					08:34:55.666,
					08:34:55.666,
					08:34:55.666"/>
        <testData input="23:56:45.898"
                  expectedOutput="21:56:45.898,
					21:56:45.898,
					21:56:45.898,
					21:56:45.898,
					21:56:45.898,
					21:56:45.898,
					21:56:45.898,
					21:56:45.898"/>
        <testData input="01:14:23.345"
                  expectedOutput="Error: java.time.DateTimeException,
					23:14:23.345,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -2736655000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -2736655000000,
					Error: java.time.DateTimeException,
					23:14:23.345,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -2736655000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -2736655000000"/>
        <testData input="01:66:29.345"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000"/>
        <testData input="00:00:29.345"
                  expectedOutput="Error: java.time.DateTimeException,
					22:00:29.345,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7170655000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7170655000000,
					Error: java.time.DateTimeException,
					22:00:29.345,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7170655000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7170655000000"/>
        <testData input="00:00:00.789"
                  expectedOutput="Error: java.time.DateTimeException,
					22:00:00.789,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7199211000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7199211000000,
					Error: java.time.DateTimeException,
					22:00:00.789,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7199211000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7199211000000"/>
        <testData input="00:00:00.000"
                  expectedOutput="Error: java.time.DateTimeException,
					22:00,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: java.time.DateTimeException,
					22:00,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000"/>
        <testData input="24:12:56.123"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -6423877000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -6423877000000,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -6423877000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -6423877000000"/>
        <testData input="23:62:56.123"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000"/>
        <testData input="23:52:65.123"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000"/>
        <testData input="01:14:23.3456"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -2733544000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -2733544000000,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -2733544000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -2733544000000"/>
        <testData input="00:00:01.000"
                  expectedOutput="Error: java.time.DateTimeException,
					22:00:01,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7199000000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7199000000000,
					Error: java.time.DateTimeException,
					22:00:01,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7199000000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7199000000000"/>
        <testData input="23:59:59.999"
                  expectedOutput="21:59:59.999,
					21:59:59.999,
					21:59:59.999,
					21:59:59.999,
					21:59:59.999,
					21:59:59.999,
					21:59:59.999,
					21:59:59.999"/>
    </testcase>
    <testcase testName="testSubtractBigTimeValue"
              fieldName="testSubtractBigTimeValue"
              dataType="TimeOnly"
              formula="TimeValue(dateString__c) - 180000000"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="dateString" dataType="Text"/>
        <testData input="10:34:55.666"
                  expectedOutput="Error: java.time.DateTimeException,
					08:34:55.666,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -55504334000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -55504334000000,
					Error: java.time.DateTimeException,
					08:34:55.666,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -55504334000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -55504334000000"/>
        <testData input="23:56:45.898"
                  expectedOutput="Error: java.time.DateTimeException,
					21:56:45.898,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7394102000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7394102000000,
					Error: java.time.DateTimeException,
					21:56:45.898,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7394102000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7394102000000"/>
        <testData input="01:14:23.345"
                  expectedOutput="Error: java.time.DateTimeException,
					23:14:23.345,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -2736655000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -2736655000000,
					Error: java.time.DateTimeException,
					23:14:23.345,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -2736655000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -2736655000000"/>
        <testData input="01:66:29.345"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000"/>
        <testData input="00:00:29.345"
                  expectedOutput="Error: java.time.DateTimeException,
					22:00:29.345,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7170655000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7170655000000,
					Error: java.time.DateTimeException,
					22:00:29.345,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7170655000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7170655000000"/>
        <testData input="00:00:00.789"
                  expectedOutput="Error: java.time.DateTimeException,
					22:00:00.789,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7199211000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7199211000000,
					Error: java.time.DateTimeException,
					22:00:00.789,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7199211000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7199211000000"/>
        <testData input="00:00:00.000"
                  expectedOutput="Error: java.time.DateTimeException,
					22:00,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: java.time.DateTimeException,
					22:00,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000"/>
        <testData input="24:12:56.123"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -6423877000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -6423877000000,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -6423877000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -6423877000000"/>
        <testData input="23:62:56.123"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000"/>
        <testData input="23:52:65.123"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200000000000"/>
        <testData input="01:14:23.3456"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -2733544000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -2733544000000,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -2733544000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -2733544000000"/>
        <testData input="00:00:01.000"
                  expectedOutput="Error: java.time.DateTimeException,
					22:00:01,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7199000000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7199000000000,
					Error: java.time.DateTimeException,
					22:00:01,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7199000000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7199000000000"/>
        <testData input="23:59:59.999"
                  expectedOutput="Error: java.time.DateTimeException,
					21:59:59.999,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200001000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200001000000,
					Error: java.time.DateTimeException,
					21:59:59.999,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200001000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -7200001000000"/>
    </testcase>
    <testcase testName="testTextTimeValueWithValidInValid"
              fieldName="testTextTimeValueWithValidInValid"
              dataType="Text"
              formula="Text(TimeValue(dateString__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="dateString" dataType="Text"/>
        <testData input="10:34:55.666"
                  expectedOutput="10:34:55.666,
					10:34:55.666,
					10:34:55.666,
					10:34:55.666,
					10:34:55.666,
					10:34:55.666,
					10:34:55.666,
					10:34:55.666"/>
        <testData input="23:56:45.898"
                  expectedOutput="23:56:45.898,
					23:56:45.898,
					23:56:45.898,
					23:56:45.898,
					23:56:45.898,
					23:56:45.898,
					23:56:45.898,
					23:56:45.898"/>
        <testData input="01:14:23.345"
                  expectedOutput="01:14:23.345,
					01:14:23.345,
					01:14:23.345,
					01:14:23.345,
					01:14:23.345,
					01:14:23.345,
					01:14:23.345,
					01:14:23.345"/>
        <testData input="01:66:29.345"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					00:00:00.000,
					00:00:00.000,
					Error: com.force.formula.FormulaDateException,
					null,
					00:00:00.000,
					00:00:00.000"/>
        <testData input="00:00:29.345"
                  expectedOutput="00:00:29.345,
					00:00:29.345,
					00:00:29.345,
					00:00:29.345,
					00:00:29.345,
					00:00:29.345,
					00:00:29.345,
					00:00:29.345"/>
        <testData input="00:00:00.789"
                  expectedOutput="00:00:00.789,
					00:00:00.789,
					00:00:00.789,
					00:00:00.789,
					00:00:00.789,
					00:00:00.789,
					00:00:00.789,
					00:00:00.789"/>
        <testData input="00:00:00.000"
                  expectedOutput="00:00:00.000,
					00:00:00.000,
					00:00:00.000,
					00:00:00.000,
					00:00:00.000,
					00:00:00.000,
					00:00:00.000,
					00:00:00.000"/>
        <testData input="24:12:56.123"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					00:12:56.123,
					00:12:56.123,
					Error: com.force.formula.FormulaDateException,
					null,
					00:12:56.123,
					00:12:56.123"/>
        <testData input="23:62:56.123"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					00:00:00.000,
					00:00:00.000,
					Error: com.force.formula.FormulaDateException,
					null,
					00:00:00.000,
					00:00:00.000"/>
        <testData input="23:52:65.123"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					00:00:00.000,
					00:00:00.000,
					Error: com.force.formula.FormulaDateException,
					null,
					00:00:00.000,
					00:00:00.000"/>
        <testData input="01:14:23.3456"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					01:14:26.456,
					01:14:26.456,
					Error: com.force.formula.FormulaDateException,
					null,
					01:14:26.456,
					01:14:26.456"/>
        <testData input="00:00:01.000"
                  expectedOutput="00:00:01.000,
					00:00:01.000,
					00:00:01.000,
					00:00:01.000,
					00:00:01.000,
					00:00:01.000,
					00:00:01.000,
					00:00:01.000"/>
        <testData input="23:59:59.999"
                  expectedOutput="23:59:59.999,
					23:59:59.999,
					23:59:59.999,
					23:59:59.999,
					23:59:59.999,
					23:59:59.999,
					23:59:59.999,
					23:59:59.999"/>
    </testcase>
    <testcase testName="testSecondValueWithValidInValid"
              fieldName="testSecondValueWithValidInValid"
              dataType="Double"
              formula="Second(TimeValue(DATETIMEVALUE(dateString__c)))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="dateString" dataType="Text"/>
        <testData input="2011-01-29 00:00:09"
                  expectedOutput="9,
					9,
					9,
					9,
					9,
					9,
					9,
					9"/>
        <testData input="2011-01-9 00:00:09"
                  expectedOutput="9,
					9,
					9,
					9,
					9,
					9,
					9,
					9"/>
        <testData input="2011-1-29 00:00:00"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2011-1-1 00:00:00"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2011-01-1 1:00:00"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2011-1-23 2:22:59"
                  expectedOutput="59,
					59,
					59,
					59,
					59,
					59,
					59,
					59"/>
        <testData input="2012-2-7 5:22:33"
                  expectedOutput="33,
					33,
					33,
					33,
					33,
					33,
					33,
					33"/>
        <testData input="2011-13-29 00:00:09"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012:02:02"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012-01-01 24:00:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012-01-01 23:60:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012-01-01 23:00:60"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012-01-01 23:59:59"
                  expectedOutput="59,
					59,
					59,
					59,
					59,
					59,
					59,
					59"/>
        <testData input="2012-10-34 00:00:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012-02-07 5:2:33"
                  expectedOutput="33,
					33,
					33,
					33,
					33,
					33,
					33,
					33"/>
        <testData input="2012-02-07 5:22:3"
                  expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
    </testcase>
    <testcase testName="testMillisecondValueWithValidInValid"
              fieldName="testMilliecondValueWithValidInValid"
              dataType="Double"
              formula="MilliSecond(TimeValue(DATETIMEVALUE(dateString__c)))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="dateString" dataType="Text"/>
        <testData input="2011-01-29 00:00:09"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2011-01-9 00:00:09"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2011-1-29 00:00:00"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2011-1-1 00:00:00"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2011-01-1 1:00:00"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2011-1-23 2:22:59"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2012-2-7 5:22:33" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2011-13-29 00:00:09"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012:02:02"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012-01-01 24:00:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012-01-01 23:60:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012-01-01 23:00:60"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012-01-01 23:59:59"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2012-10-34 00:00:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012-02-07 5:2:33"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2012-02-07 5:22:3"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
    </testcase>
    <testcase testName="testMinuteValueWithValidInValid"
              fieldName="testMinuteValueWithValidInValid"
              dataType="Double"
              formula="Minute(TimeValue(DATETIMEVALUE(dateString__c)))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="dateString" dataType="Text"/>
        <testData input="2011-01-29 00:00:09"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2011-01-9 00:00:09"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2011-1-29 00:00:00"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2011-1-1 00:00:00"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2011-01-1 1:00:00"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2011-1-23 2:22:59"
                  expectedOutput="22,
					22,
					22,
					22,
					22,
					22,
					22,
					22"/>
        <testData input="2012-2-7 5:22:33"
                  expectedOutput="22,
					22,
					22,
					22,
					22,
					22,
					22,
					22"/>
        <testData input="2011-13-29 00:00:09"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012:02:02"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012-01-01 24:00:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012-01-01 23:60:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012-01-01 23:00:60"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012-01-01 23:59:59"
                  expectedOutput="59,
					59,
					59,
					59,
					59,
					59,
					59,
					59"/>
        <testData input="2012-10-34 00:00:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012-02-07 5:2:33"
                  expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="2012-02-07 5:22:3"
                  expectedOutput="22,
					22,
					22,
					22,
					22,
					22,
					22,
					22"/>
    </testcase>
    <testcase testName="testHourValueWithValidInValid"
              fieldName="testHourValueWithValidInValid"
              dataType="Double"
              formula="Hour(TimeValue(DATETIMEVALUE(dateString__c)))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="dateString" dataType="Text"/>
        <testData input="2011-01-29 00:00:09"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2011-01-9 00:00:09"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2011-1-29 00:00:00"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2011-1-1 00:00:00"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2011-01-1 1:00:00"
                  expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="2011-1-23 2:22:59"
                  expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="2012-2-7 5:22:33" expectedOutput="5,
					5,
					5,
					5,
					5,
					5,
					5,
					5"/>
        <testData input="2011-13-29 00:00:09"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012:02:02"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012-01-01 24:00:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012-01-01 23:60:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012-01-01 23:00:60"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012-01-01 23:59:59"
                  expectedOutput="23,
					23,
					23,
					23,
					23,
					23,
					23,
					23"/>
        <testData input="2012-10-34 00:00:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="2012-02-07 5:2:33"
                  expectedOutput="5,
					5,
					5,
					5,
					5,
					5,
					5,
					5"/>
        <testData input="2012-02-07 5:22:3"
                  expectedOutput="5,
					5,
					5,
					5,
					5,
					5,
					5,
					5"/>
    </testcase>
    <testcase testName="testUnixTimestampWithDateTime"
              fieldName="testUnixTimestampWithDateTime"
              dataType="Double"
              formula="UnixTimestamp(DATETIMEVALUE(dateString__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="dateString" dataType="Text"/>
        <testData input="2011-01-29 00:00:09"
                  expectedOutput="1296259209,
					1296259209,
					1296259209,
					1296259209,
					1296259209,
					1296259209,
					1296259209,
					1296259209"/>
        <testData input="2011-01-9 00:00:09"
                  expectedOutput="1294531209,
					1294531209,
					1294531209,
					1294531209,
					1294531209,
					1294531209,
					1294531209,
					1294531209"/>
        <testData input="2011-1-29 00:00:00"
                  expectedOutput="1296259200,
					1296259200,
					1296259200,
					1296259200,
					1296259200,
					1296259200,
					1296259200,
					1296259200"/>
        <testData input="2011-1-1 00:00:00"
                  expectedOutput="1293840000,
					1293840000,
					1293840000,
					1293840000,
					1293840000,
					1293840000,
					1293840000,
					1293840000"/>
        <testData input="2011-01-1 1:00:00"
                  expectedOutput="1293843600,
					1293843600,
					1293843600,
					1293843600,
					1293843600,
					1293843600,
					1293843600,
					1293843600"/>
        <testData input="2011-1-23 2:22:59"
                  expectedOutput="1295749379,
					1295749379,
					1295749379,
					1295749379,
					1295749379,
					1295749379,
					1295749379,
					1295749379"/>
        <testData input="2012-2-7 5:22:33"
                  expectedOutput="1328592153,
					1328592153,
					1328592153,
					1328592153,
					1328592153,
					1328592153,
					1328592153,
					1328592153"/>
        <testData input="2011-13-29 00:00:09"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2012:02:02"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2012-01-01 24:00:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					1325462400,
					1325462400,
					Error: com.force.formula.FormulaDateException,
					null,
					1325462400,
					1325462400"/>
        <testData input="2012-01-01 23:60:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2012-01-01 23:00:60"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2012-01-01 23:59:59"
                  expectedOutput="1325462399,
					1325462399,
					1325462399,
					1325462399,
					1325462399,
					1325462399,
					1325462399,
					1325462399"/>
        <testData input="2012-10-34 00:00:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2012-02-07 5:2:33"
                  expectedOutput="1328590953,
					1328590953,
					1328590953,
					1328590953,
					1328590953,
					1328590953,
					1328590953,
					1328590953"/>
        <testData input="2012-02-07 5:22:3"
                  expectedOutput="1328592123,
					1328592123,
					1328592123,
					1328592123,
					1328592123,
					1328592123,
					1328592123,
					1328592123"/>
    </testcase>
    <testcase testName="testFromUnixTime"
              fieldName="testFromUnixTime"
              dataType="DateTime"
              formula="FromUnixTime(customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="0"
                  expectedOutput="Thu Jan 01 00:00:00 GMT 1970,
					1970-01-01 00:00:00.0,
					Thu Jan 01 00:00:00 GMT 1970,
					Thu Jan 01 00:00:00 GMT 1970,
					Thu Jan 01 00:00:00 GMT 1970,
					1970-01-01 00:00:00.0,
					Thu Jan 01 00:00:00 GMT 1970,
					Thu Jan 01 00:00:00 GMT 1970"/>
        <testData input="1"
                  expectedOutput="Thu Jan 01 00:00:01 GMT 1970,
					1970-01-01 00:00:01.0,
					Thu Jan 01 00:00:01 GMT 1970,
					Thu Jan 01 00:00:01 GMT 1970,
					Thu Jan 01 00:00:01 GMT 1970,
					1970-01-01 00:00:01.0,
					Thu Jan 01 00:00:01 GMT 1970,
					Thu Jan 01 00:00:01 GMT 1970"/>
        <testData input="-5"
                  expectedOutput="Wed Dec 31 23:59:55 GMT 1969,
					1969-12-31 23:59:55.0,
					Wed Dec 31 23:59:55 GMT 1969,
					Wed Dec 31 23:59:55 GMT 1969,
					Wed Dec 31 23:59:55 GMT 1969,
					1969-12-31 23:59:55.0,
					Wed Dec 31 23:59:55 GMT 1969,
					Wed Dec 31 23:59:55 GMT 1969"/>
        <testData input="-885730575"
                  expectedOutput="Sun Dec 07 11:43:45 GMT 1941,
					1941-12-07 11:43:45.0,
					Sun Dec 07 11:43:45 GMT 1941,
					Sun Dec 07 11:43:45 GMT 1941,
					Sun Dec 07 11:43:45 GMT 1941,
					1941-12-07 11:43:45.0,
					Sun Dec 07 11:43:45 GMT 1941,
					Sun Dec 07 11:43:45 GMT 1941"/>
        <testData input="1638902645"
                  expectedOutput="Tue Dec 07 18:44:05 GMT 2021,
					2021-12-07 18:44:05.0,
					Tue Dec 07 18:44:05 GMT 2021,
					Tue Dec 07 18:44:05 GMT 2021,
					Tue Dec 07 18:44:05 GMT 2021,
					2021-12-07 18:44:05.0,
					Tue Dec 07 18:44:05 GMT 2021,
					Tue Dec 07 18:44:05 GMT 2021"/>
        <testData input=""
                  expectedOutput="Thu Jan 01 00:00:00 GMT 1970,
					1970-01-01 00:00:00.0,
					Thu Jan 01 00:00:00 GMT 1970,
					Thu Jan 01 00:00:00 GMT 1970,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testUnixTimestampWithTime"
              fieldName="testUnixTimestampWithTime"
              dataType="Double"
              formula="UnixTimestamp(TimeValue(dateString__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="dateString" dataType="Text"/>
        <testData input="10:34:55.666"
                  expectedOutput="38095,
					38095,
					38095,
					38095,
					38095,
					38095,
					38095,
					38095"/>
        <testData input="23:56:45.898"
                  expectedOutput="86205,
					86205,
					86205,
					86205,
					86205,
					86205,
					86205,
					86205"/>
        <testData input="01:14:23.345"
                  expectedOutput="4463,
					4463,
					4463,
					4463,
					4463,
					4463,
					4463,
					4463"/>
        <testData input="01:66:29.345"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="00:00:29.345"
                  expectedOutput="29,
					29,
					29,
					29,
					29,
					29,
					29,
					29"/>
        <testData input="00:00:00.789" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="00:00:00.000" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="24:12:56.123"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					776,
					776,
					Error: com.force.formula.FormulaDateException,
					null,
					776,
					776"/>
        <testData input="23:62:56.123"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="23:52:65.123"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaDateException,
					null,
					0,
					0"/>
        <testData input="01:14:23.3456"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					4466,
					4466,
					Error: com.force.formula.FormulaDateException,
					null,
					4466,
					4466"/>
        <testData input="00:00:01.000" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="23:59:59.999"
                  expectedOutput="86399,
					86399,
					86399,
					86399,
					86399,
					86399,
					86399,
					86399"/>
    </testcase>
    <testcase testName="testIsoWeekWithDateTime"
              fieldName="testIsoWeekWithDateTime"
              dataType="Double"
              formula="ISOWEEK(DATETIMEVALUE(dateString__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="dateString" dataType="Text"/>
        <testData input="2011-01-29 00:00:09"
                  expectedOutput="4,
					4,
					4,
					4,
					4,
					4,
					4,
					4"/>
        <testData input="2011-01-9 00:00:09"
                  expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="2011-1-29 00:00:00"
                  expectedOutput="4,
					4,
					4,
					4,
					4,
					4,
					4,
					4"/>
        <testData input="2011-1-1 00:00:00"
                  expectedOutput="52,
					52,
					52,
					52,
					52,
					52,
					52,
					52"/>
        <testData input="2011-01-1 1:00:00"
                  expectedOutput="52,
					52,
					52,
					52,
					52,
					52,
					52,
					52"/>
        <testData input="2011-1-23 2:22:59"
                  expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
        <testData input="2012-2-7 5:22:33" expectedOutput="6,
					6,
					6,
					6,
					6,
					6,
					6,
					6"/>
        <testData input="2011-13-29 00:00:09"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2012:02:02"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2012-01-01 24:00:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					1,
					1,
					Error: com.force.formula.FormulaDateException,
					null,
					1,
					1"/>
        <testData input="2012-01-01 23:60:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2012-01-01 23:00:60"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2012-01-01 23:59:59"
                  expectedOutput="52,
					52,
					52,
					52,
					52,
					52,
					52,
					52"/>
        <testData input="2012-10-34 00:00:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2012-02-07 5:2:33"
                  expectedOutput="6,
					6,
					6,
					6,
					6,
					6,
					6,
					6"/>
        <testData input="2012-02-07 5:22:3"
                  expectedOutput="6,
					6,
					6,
					6,
					6,
					6,
					6,
					6"/>
    </testcase>
    <testcase testName="testIsoWeekWithDate"
              fieldName="testIsoWeekWithDate"
              dataType="Double"
              formula="ISOWEEK(customdate1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input=",40"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2005:12:31,4.00"
                  expectedOutput="52,
					52,
					52,
					52,
					52,
					52,
					52,
					52"/>
        <testData input="2004:12:31,3.00"
                  expectedOutput="53,
					53,
					53,
					53,
					53,
					53,
					53,
					53"/>
        <testData input="2004:02:28:00:00:00,4.00"
                  expectedOutput="9,
					9,
					9,
					9,
					9,
					9,
					9,
					9"/>
        <testData input="2000:02:28,3.5" expectedOutput="9,
					9,
					9,
					9,
					9,
					9,
					9,
					9"/>
        <testData input="2000:02:28,3.4" expectedOutput="9,
					9,
					9,
					9,
					9,
					9,
					9,
					9"/>
        <testData input="2000:02:28,3.6" expectedOutput="9,
					9,
					9,
					9,
					9,
					9,
					9,
					9"/>
        <testData input="2000:02:28,40000" expectedOutput="9,
					9,
					9,
					9,
					9,
					9,
					9,
					9"/>
        <testData input="2000:02:28,365" expectedOutput="9,
					9,
					9,
					9,
					9,
					9,
					9,
					9"/>
        <testData input="2000:02:28,364" expectedOutput="9,
					9,
					9,
					9,
					9,
					9,
					9,
					9"/>
        <testData input="2000:02:28,30" expectedOutput="9,
					9,
					9,
					9,
					9,
					9,
					9,
					9"/>
        <testData input="1900:01:01,30" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="4000:01:01,30"
                  expectedOutput="52,
					52,
					52,
					52,
					52,
					52,
					52,
					52"/>
        <testData input="2000:01:01,30"
                  expectedOutput="52,
					52,
					52,
					52,
					52,
					52,
					52,
					52"/>
        <testData input="3999:01:01,0.23456"
                  expectedOutput="53,
					53,
					53,
					53,
					53,
					53,
					53,
					53"/>
    </testcase>
    <testcase testName="testIsoYearWithDateTime"
              fieldName="testIsoYearWithDateTime"
              dataType="Double"
              formula="ISOYEAR(DATETIMEVALUE(dateString__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="dateString" dataType="Text"/>
        <testData input="2011-01-29 00:00:09"
                  expectedOutput="2011,
					2011,
					2011,
					2011,
					2011,
					2011,
					2011,
					2011"/>
        <testData input="2011-01-9 00:00:09"
                  expectedOutput="2011,
					2011,
					2011,
					2011,
					2011,
					2011,
					2011,
					2011"/>
        <testData input="2011-1-29 00:00:00"
                  expectedOutput="2011,
					2011,
					2011,
					2011,
					2011,
					2011,
					2011,
					2011"/>
        <testData input="2011-1-1 00:00:00"
                  expectedOutput="2010,
					2010,
					2010,
					2010,
					2010,
					2010,
					2010,
					2010"/>
        <testData input="2011-01-1 1:00:00"
                  expectedOutput="2010,
					2010,
					2010,
					2010,
					2010,
					2010,
					2010,
					2010"/>
        <testData input="2011-1-23 2:22:59"
                  expectedOutput="2011,
					2011,
					2011,
					2011,
					2011,
					2011,
					2011,
					2011"/>
        <testData input="2012-2-7 5:22:33"
                  expectedOutput="2012,
					2012,
					2012,
					2012,
					2012,
					2012,
					2012,
					2012"/>
        <testData input="2011-13-29 00:00:09"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2012:02:02"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2012-01-01 24:00:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					2012,
					2012,
					Error: com.force.formula.FormulaDateException,
					null,
					2012,
					2012"/>
        <testData input="2012-01-01 23:60:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2012-01-01 23:00:60"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2012-01-01 23:59:59"
                  expectedOutput="2011,
					2011,
					2011,
					2011,
					2011,
					2011,
					2011,
					2011"/>
        <testData input="2012-10-34 00:00:00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2012-02-07 5:2:33"
                  expectedOutput="2012,
					2012,
					2012,
					2012,
					2012,
					2012,
					2012,
					2012"/>
        <testData input="2012-02-07 5:22:3"
                  expectedOutput="2012,
					2012,
					2012,
					2012,
					2012,
					2012,
					2012,
					2012"/>
    </testcase>
    <testcase testName="testIsoYearWithDate"
              fieldName="testIsoYearWithDate"
              dataType="Double"
              formula="ISOYEAR(customdate1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input=",40"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2005:12:31,4.00"
                  expectedOutput="2005,
					2005,
					2005,
					2005,
					2005,
					2005,
					2005,
					2005"/>
        <testData input="2004:12:31,3.00"
                  expectedOutput="2004,
					2004,
					2004,
					2004,
					2004,
					2004,
					2004,
					2004"/>
        <testData input="2004:02:28:00:00:00,4.00"
                  expectedOutput="2004,
					2004,
					2004,
					2004,
					2004,
					2004,
					2004,
					2004"/>
        <testData input="2000:02:28,3.5"
                  expectedOutput="2000,
					2000,
					2000,
					2000,
					2000,
					2000,
					2000,
					2000"/>
        <testData input="2000:02:28,3.4"
                  expectedOutput="2000,
					2000,
					2000,
					2000,
					2000,
					2000,
					2000,
					2000"/>
        <testData input="2000:02:28,3.6"
                  expectedOutput="2000,
					2000,
					2000,
					2000,
					2000,
					2000,
					2000,
					2000"/>
        <testData input="2000:02:28,40000"
                  expectedOutput="2000,
					2000,
					2000,
					2000,
					2000,
					2000,
					2000,
					2000"/>
        <testData input="2000:02:28,365"
                  expectedOutput="2000,
					2000,
					2000,
					2000,
					2000,
					2000,
					2000,
					2000"/>
        <testData input="2000:02:28,364"
                  expectedOutput="2000,
					2000,
					2000,
					2000,
					2000,
					2000,
					2000,
					2000"/>
        <testData input="2000:02:28,30"
                  expectedOutput="2000,
					2000,
					2000,
					2000,
					2000,
					2000,
					2000,
					2000"/>
        <testData input="1900:01:01,30"
                  expectedOutput="1900,
					1900,
					1900,
					1900,
					1900,
					1900,
					1900,
					1900"/>
        <testData input="4000:01:01,30"
                  expectedOutput="3999,
					3999,
					3999,
					3999,
					3999,
					3999,
					3999,
					3999"/>
        <testData input="2000:01:01,30"
                  expectedOutput="1999,
					1999,
					1999,
					1999,
					1999,
					1999,
					1999,
					1999"/>
        <testData input="3999:01:01,0.23456"
                  expectedOutput="3998,
					3998,
					3998,
					3998,
					3998,
					3998,
					3998,
					3998"/>
    </testcase>
    <testcase testName="testTextFunctionWithDate"
              fieldName="testTextFunctionWithDate"
              dataType="Text"
              formula="TEXT(DATE(2013,12,31))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <testData expectedOutput="2013-12-31,
					2013-12-31,
					2013-12-31,
					2013-12-31,
					2013-12-31,
					2013-12-31,
					2013-12-31,
					2013-12-31"/>
    </testcase>
    <testcase testName="testTextFunctionWithCustomDate"
              fieldName="testTextFunctionWithCustomDate"
              dataType="Text"
              formula="TEXT(customdate1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <testData input=""
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2005:12:31"
                  expectedOutput="2005-12-31,
					2005-12-31,
					2005-12-31,
					2005-12-31,
					2005-12-31,
					2005-12-31,
					2005-12-31,
					2005-12-31"/>
        <testData input="2004:12:31"
                  expectedOutput="2004-12-31,
					2004-12-31,
					2004-12-31,
					2004-12-31,
					2004-12-31,
					2004-12-31,
					2004-12-31,
					2004-12-31"/>
        <testData input="2004:02:28:00:00:00"
                  expectedOutput="2004-02-28,
					2004-02-28,
					2004-02-28,
					2004-02-28,
					2004-02-28,
					2004-02-28,
					2004-02-28,
					2004-02-28"/>
        <testData input="2000:02:28"
                  expectedOutput="2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28"/>
        <testData input="2000:02:28"
                  expectedOutput="2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28"/>
        <testData input="2000:02:28"
                  expectedOutput="2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28"/>
        <testData input="2000:02:28"
                  expectedOutput="2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28"/>
        <testData input="2000:02:28"
                  expectedOutput="2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28"/>
        <testData input="2000:02:28"
                  expectedOutput="2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28"/>
        <testData input="2000:02:28"
                  expectedOutput="2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28,
					2000-02-28"/>
        <testData input="1900:01:01"
                  expectedOutput="1900-01-01,
					1900-01-01,
					1900-01-01,
					1900-01-01,
					1900-01-01,
					1900-01-01,
					1900-01-01,
					1900-01-01"/>
        <testData input="4000:01:01"
                  expectedOutput="4000-01-01,
					4000-01-01,
					4000-01-01,
					4000-01-01,
					4000-01-01,
					4000-01-01,
					4000-01-01,
					4000-01-01"/>
        <testData input="2000:01:01"
                  expectedOutput="2000-01-01,
					2000-01-01,
					2000-01-01,
					2000-01-01,
					2000-01-01,
					2000-01-01,
					2000-01-01,
					2000-01-01"/>
        <testData input="3999:01:01"
                  expectedOutput="3999-01-01,
					3999-01-01,
					3999-01-01,
					3999-01-01,
					3999-01-01,
					3999-01-01,
					3999-01-01,
					3999-01-01"/>
    </testcase>
    <testcase testName="testTextFunctionWithDateTime"
              fieldName="testTextFunctionWithDateTime"
              dataType="Text"
              formula="TEXT(DATETIMEVALUE('2013-12-31 01:02:03'))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <testData expectedOutput="2013-12-31 01:02:03Z,
					2013-12-31 01:02:03Z,
					2013-12-31 01:02:03Z,
					2013-12-31 01:02:03Z,
					2013-12-31 01:02:03Z,
					2013-12-31 01:02:03Z,
					2013-12-31 01:02:03Z,
					2013-12-31 01:02:03Z"/>
    </testcase>
    <testcase testName="testFunctionRight"
              fieldName="testFunctionRight"
              dataType="Text"
              formula="RIGHT(customtext__c, customnumber__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext" dataType="Text"/>
        <referenceField fieldName="customnumber" dataType="Double"/>
        <testData input="123456,1" expectedOutput="6,
					6,
					6,
					6,
					6,
					6,
					6,
					6"/>
        <testData input="123456,2" expectedOutput="56,
					56,
					56,
					56,
					56,
					56,
					56,
					56"/>
        <testData input="123456,0"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,6"
                  expectedOutput="123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456"/>
        <testData input="123456,7"
                  expectedOutput="123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456"/>
        <testData input="123456,-1"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,-10"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",1"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=","
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="会计年度开始月份,1" expectedOutput="份,
					份,
					份,
					份,
					份,
					份,
					份,
					份"/>
        <testData input="会计年度开始月份,2"
                  expectedOutput="月份,
					月份,
					月份,
					月份,
					月份,
					月份,
					月份,
					月份"/>
        <testData input="会计年度开始月份,0"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="会计年度开始月份,8"
                  expectedOutput="会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份"/>
        <testData input="会计年度开始月份,10"
                  expectedOutput="会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份"/>
        <testData input="会计年度开始月份,-1"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="会计年度开始月份,-10"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="会计年度开始月份,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testFunctionLeft"
              fieldName="testFunctionLeft"
              dataType="Text"
              formula="LEFT(customtext__c, customnumber__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext" dataType="Text"/>
        <referenceField fieldName="customnumber" dataType="Double"/>
        <testData input="123456,1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="123456,2" expectedOutput="12,
					12,
					12,
					12,
					12,
					12,
					12,
					12"/>
        <testData input="123456,0"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,6"
                  expectedOutput="123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456"/>
        <testData input="123456,7"
                  expectedOutput="123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456"/>
        <testData input="123456,-1"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,-10"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",1"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=","
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="会计年度开始月份,1" expectedOutput="会,
					会,
					会,
					会,
					会,
					会,
					会,
					会"/>
        <testData input="会计年度开始月份,2"
                  expectedOutput="会计,
					会计,
					会计,
					会计,
					会计,
					会计,
					会计,
					会计"/>
        <testData input="会计年度开始月份,0"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="会计年度开始月份,8"
                  expectedOutput="会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份"/>
        <testData input="会计年度开始月份,10"
                  expectedOutput="会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份"/>
        <testData input="会计年度开始月份,-1"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="会计年度开始月份,-10"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="会计年度开始月份,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testAddConcatSimple"
              fieldName="testAddConcatSimple"
              dataType="Text"
              formula="(customtext1__c+customtext2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customtext2" dataType="Text"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="aaaaaaaa,
					aaaaaaaa,
					aaaaaaaa,
					aaaaaaaa,
					aaaaaaaa,
					aaaaaaaa,
					aaaaaaaa,
					aaaaaaaa"/>
        <testData input="aaaa,bbbb"
                  expectedOutput="aaaabbbb,
					aaaabbbb,
					aaaabbbb,
					aaaabbbb,
					aaaabbbb,
					aaaabbbb,
					aaaabbbb,
					aaaabbbb"/>
        <testData input="aaaa,"
                  expectedOutput="aaaa,
					aaaa,
					aaaa,
					aaaa,
					aaaa,
					aaaa,
					aaaa,
					aaaa"/>
        <testData input=",bbbb"
                  expectedOutput="bbbb,
					bbbb,
					bbbb,
					bbbb,
					bbbb,
					bbbb,
					bbbb,
					bbbb"/>
        <testData input=","
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="aaaaaaaa,
					aaaaaaaa,
					aaaaaaaa,
					aaaaaaaa,
					aaaaaaaa,
					aaaaaaaa,
					aaaaaaaa,
					aaaaaaaa"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="aaaaaaaa,
					aaaaaaaa,
					aaaaaaaa,
					aaaaaaaa,
					aaaaaaaa,
					aaaaaaaa,
					aaaaaaaa,
					aaaaaaaa"/>
    </testcase>
    <testcase testName="testAddWithCaseExpr"
              fieldName="testAddWithCaseExpr"
              dataType="Double"
              formula="(customformula0__c+customcurrency2__c+customformula1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customformula0"
                        dataType="Double"
                        formula="CASE(customtext1__c,customtext2__c,custompercent1__c,customtext3__c,customcurrency1__c,customnumber1__c)">
            <referenceField fieldName="customtext1" dataType="Text"/>
            <referenceField fieldName="customtext2" dataType="Text"/>
            <referenceField fieldName="custompercent1" dataType="Percent"/>
            <referenceField fieldName="customtext3" dataType="Text"/>
            <referenceField fieldName="customcurrency1" dataType="Currency"/>
            <referenceField fieldName="customnumber1" dataType="Double"/>
        </referenceField>
        <referenceField fieldName="customcurrency2" dataType="Currency"/>
        <referenceField fieldName="customformula1"
                        dataType="Percent"
                        formula="(custompercent2__c+customnumber2__c)">
            <referenceField fieldName="custompercent2" dataType="Percent"/>
            <referenceField fieldName="customnumber2" dataType="Double"/>
        </referenceField>
        <testData input="Partner,Partner,200,Reseller,400,100,400,200,100"
                  expectedOutput="504,
					504,
					504,
					504,
					504,
					504,
					504,
					504"/>
        <testData input="Reseller,Partner,200,Reseller,400,100,400,200,100"
                  expectedOutput="902,
					902,
					902,
					902,
					902,
					902,
					902,
					902"/>
        <testData input="Partner,Partner,200,Reseller,400,100,400,200,100"
                  expectedOutput="504,
					504,
					504,
					504,
					504,
					504,
					504,
					504"/>
        <testData input=",Partner,200,Reseller,400,100,400,200,100"
                  expectedOutput="602,
					602,
					602,
					602,
					602,
					602,
					602,
					602"/>
        <testData input="Partner,,200,Reseller,400,100,400,200,100"
                  expectedOutput="602,
					602,
					602,
					602,
					602,
					602,
					602,
					602"/>
        <testData input="Var,Partner,200,Reseller,400,100,400,200,100"
                  expectedOutput="602,
					602,
					602,
					602,
					602,
					602,
					602,
					602"/>
        <testData input="Partner,Partner,,Reseller,400,100,400,200,100"
                  expectedOutput="502,
					502,
					502,
					502,
					null,
					null,
					null,
					null"/>
        <testData input="Partner,Partner,200,Reseller,400,,400,200,100"
                  expectedOutput="504,
					504,
					504,
					504,
					504,
					504,
					504,
					504"/>
        <testData input="Partner,Partner,200,Reseller,400,,400,,100"
                  expectedOutput="502,
					502,
					502,
					502,
					null,
					null,
					null,
					null"/>
        <testData input="Partner,Partner,200,Reseller,400,,400,200,100"
                  expectedOutput="504,
					504,
					504,
					504,
					504,
					504,
					504,
					504"/>
    </testcase>
    <testcase testName="testAddWithIfExpr"
              fieldName="testAddWithIfExpr"
              dataType="Double"
              formula="(customformula0__c+customformula1__c+customnumber3__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customformula0"
                        dataType="Currency"
                        formula="IF(true,customnumber1__c,custompercent1__c)">
            <referenceField fieldName="customnumber1" dataType="Double"/>
            <referenceField fieldName="custompercent1" dataType="Percent"/>
        </referenceField>
        <referenceField fieldName="customformula1"
                        dataType="Double"
                        formula="(customcurrency1__c+customnumber2__c)">
            <referenceField fieldName="customcurrency1" dataType="Currency"/>
            <referenceField fieldName="customnumber2" dataType="Double"/>
        </referenceField>
        <referenceField fieldName="customnumber3" dataType="Double"/>
        <testData input="200,20,300,40,20"
                  expectedOutput="560,
					560,
					560,
					560,
					560,
					560,
					560,
					560"/>
        <testData input=",.04,40,,10"
                  expectedOutput="50,
					50,
					50,
					50,
					null,
					null,
					null,
					null"/>
        <testData input="32,10,50,24,12"
                  expectedOutput="118,
					118,
					118,
					118,
					118,
					118,
					118,
					118"/>
        <testData input="0,0,0,0,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-1,-1,-1,-1,-1"
                  expectedOutput="-4,
					-4,
					-4,
					-4,
					-4,
					-4,
					-4,
					-4"/>
        <testData input="-1,,,-1,1"
                  expectedOutput="-1,
					-1,
					-1,
					-1,
					null,
					null,
					null,
					null"/>
        <testData input="0.1234,0.1234,9.0456,123456789.123456789,0.123456789"
                  expectedOutput="123456798.415913578,
					123456798.415913578,
					123456798.41591358,
					123456798.4159136,
					123456798.415913578,
					123456798.415913578,
					123456798.41591358,
					123456798.4159136"/>
    </testcase>
    <testcase testName="testAddWithTextFunc"
              fieldName="testAddWithTextFunc"
              dataType="Double"
              formula="(customnumber1__c+customformula0__c+customnumber2__c+customformula1__c+customformula2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customformula0"
                        dataType="Double"
                        formula="VALUE(customtext1__c)">
            <referenceField fieldName="customtext1" dataType="Text"/>
        </referenceField>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customformula1"
                        dataType="Double"
                        formula="LEN(customtext2__c)">
            <referenceField fieldName="customtext2" dataType="Text"/>
        </referenceField>
        <referenceField fieldName="customformula2"
                        dataType="Double"
                        formula="(custompercent1__c*customcurrency1__c)">
            <referenceField fieldName="custompercent1" dataType="Percent"/>
            <referenceField fieldName="customcurrency1" dataType="Currency"/>
        </referenceField>
        <testData input="100.1234,400,.2212,lengthisten,.01,500"
                  expectedOutput="511.3946,
					511.3946,
					511.3946,
					511.3946,
					511.3946,
					511.3946,
					511.3946,
					511.3946"/>
        <testData input=",200.134,100,text,,-200"
                  expectedOutput="304.134,
					304.134,
					304.134,
					304.134,
					null,
					null,
					null,
					null"/>
        <testData input="0.144,0.0023456,200,,,20"
                  expectedOutput="200.1463456,
					200.1463456,
					200.1463456,
					200.1463456,
					null,
					null,
					null,
					null"/>
        <testData input="-1,-1,-1,-1,-1,-1"
                  expectedOutput="-0.99,
					-0.99,
					-0.99,
					-0.99,
					-0.99,
					-0.99,
					-0.99,
					-0.99"/>
        <testData input="0,0,0,0,0,0" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
    </testcase>
    <testcase testName="testAddWithDateFunc"
              fieldName="testAddWithDateFunc"
              dataType="Double"
              formula="(customformula0__c+customformula1__c+customnumber1__c+customformula2__c+custompercent1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customformula0"
                        dataType="Double"
                        formula="DAY(customdate1__c)">
            <referenceField fieldName="customdate1" dataType="DateOnly"/>
        </referenceField>
        <referenceField fieldName="customformula1"
                        dataType="Double"
                        formula="YEAR(customdate2__c)">
            <referenceField fieldName="customdate2" dataType="DateOnly"/>
        </referenceField>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customformula2"
                        dataType="Double"
                        formula="MONTH(customdate3__c)">
            <referenceField fieldName="customdate3" dataType="DateOnly"/>
        </referenceField>
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <testData input="2004:12:20,2004:12:20,0,2004:12:20,30"
                  expectedOutput="2036.3,
					2036.3,
					2036.3,
					2036.3,
					2036.3,
					2036.3,
					2036.3,
					2036.3"/>
        <testData input=",2004:12:20,0,2004:12:20,30"
                  expectedOutput="2016.3,
					2016.3,
					2016.3,
					2016.3,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:20,,,2004:12:20,10"
                  expectedOutput="32.1,
					32.1,
					32.1,
					32.1,
					null,
					null,
					null,
					null"/>
        <testData input=",,,,10"
                  expectedOutput="0.1,
					0.1,
					0.1,
					0.1,
					null,
					null,
					null,
					null"/>
        <testData input="1900:12:20,1900:12:20,,1900:12:20,10"
                  expectedOutput="1932.1,
					1932.1,
					1932.1,
					1932.1,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testAddDate"
              fieldName="testAddDate"
              dataType="DateOnly"
              formula="(customdate1__c+customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input=",40"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2005:12:31,4.00"
                  expectedOutput="Wed Jan 04 00:00:00 GMT 2006,
					2006-01-04 00:00:00.0,
					Wed Jan 04 00:00:00 GMT 2006,
					Wed Jan 04 00:00:00 GMT 2006,
					Wed Jan 04 00:00:00 GMT 2006,
					2006-01-04 00:00:00.0,
					Wed Jan 04 00:00:00 GMT 2006,
					Wed Jan 04 00:00:00 GMT 2006"/>
        <testData input="2004:12:31,3.00"
                  expectedOutput="Mon Jan 03 00:00:00 GMT 2005,
					2005-01-03 00:00:00.0,
					Mon Jan 03 00:00:00 GMT 2005,
					Mon Jan 03 00:00:00 GMT 2005,
					Mon Jan 03 00:00:00 GMT 2005,
					2005-01-03 00:00:00.0,
					Mon Jan 03 00:00:00 GMT 2005,
					Mon Jan 03 00:00:00 GMT 2005"/>
        <testData input="2004:02:28:00:00:00,4.00"
                  expectedOutput="Wed Mar 03 00:00:00 GMT 2004,
					2004-03-03 00:00:00.0,
					Wed Mar 03 00:00:00 GMT 2004,
					Wed Mar 03 00:00:00 GMT 2004,
					Wed Mar 03 00:00:00 GMT 2004,
					2004-03-03 00:00:00.0,
					Wed Mar 03 00:00:00 GMT 2004,
					Wed Mar 03 00:00:00 GMT 2004"/>
        <testData input="2000:02:28,3.5"
                  expectedOutput="Thu Mar 02 00:00:00 GMT 2000,
					2000-03-02 00:00:00.0,
					Thu Mar 02 00:00:00 GMT 2000,
					Thu Mar 02 00:00:00 GMT 2000,
					Thu Mar 02 00:00:00 GMT 2000,
					2000-03-02 00:00:00.0,
					Thu Mar 02 00:00:00 GMT 2000,
					Thu Mar 02 00:00:00 GMT 2000"/>
        <testData input="2000:02:28,3.4"
                  expectedOutput="Thu Mar 02 00:00:00 GMT 2000,
					2000-03-02 00:00:00.0,
					Thu Mar 02 00:00:00 GMT 2000,
					Thu Mar 02 00:00:00 GMT 2000,
					Thu Mar 02 00:00:00 GMT 2000,
					2000-03-02 00:00:00.0,
					Thu Mar 02 00:00:00 GMT 2000,
					Thu Mar 02 00:00:00 GMT 2000"/>
        <testData input="2000:02:28,3.6"
                  expectedOutput="Thu Mar 02 00:00:00 GMT 2000,
					2000-03-02 00:00:00.0,
					Thu Mar 02 00:00:00 GMT 2000,
					Thu Mar 02 00:00:00 GMT 2000,
					Thu Mar 02 00:00:00 GMT 2000,
					2000-03-02 00:00:00.0,
					Thu Mar 02 00:00:00 GMT 2000,
					Thu Mar 02 00:00:00 GMT 2000"/>
        <testData input="2000:02:28,40000"
                  expectedOutput="Wed Sep 04 00:00:00 GMT 2109,
					2109-09-04 00:00:00.0,
					Wed Sep 04 00:00:00 GMT 2109,
					Wed Sep 04 00:00:00 GMT 2109,
					Wed Sep 04 00:00:00 GMT 2109,
					2109-09-04 00:00:00.0,
					Wed Sep 04 00:00:00 GMT 2109,
					Wed Sep 04 00:00:00 GMT 2109"/>
        <testData input="2000:02:28,365"
                  expectedOutput="Tue Feb 27 00:00:00 GMT 2001,
					2001-02-27 00:00:00.0,
					Tue Feb 27 00:00:00 GMT 2001,
					Tue Feb 27 00:00:00 GMT 2001,
					Tue Feb 27 00:00:00 GMT 2001,
					2001-02-27 00:00:00.0,
					Tue Feb 27 00:00:00 GMT 2001,
					Tue Feb 27 00:00:00 GMT 2001"/>
        <testData input="2000:02:28,364"
                  expectedOutput="Mon Feb 26 00:00:00 GMT 2001,
					2001-02-26 00:00:00.0,
					Mon Feb 26 00:00:00 GMT 2001,
					Mon Feb 26 00:00:00 GMT 2001,
					Mon Feb 26 00:00:00 GMT 2001,
					2001-02-26 00:00:00.0,
					Mon Feb 26 00:00:00 GMT 2001,
					Mon Feb 26 00:00:00 GMT 2001"/>
        <testData input="2000:02:28,30"
                  expectedOutput="Wed Mar 29 00:00:00 GMT 2000,
					2000-03-29 00:00:00.0,
					Wed Mar 29 00:00:00 GMT 2000,
					Wed Mar 29 00:00:00 GMT 2000,
					Wed Mar 29 00:00:00 GMT 2000,
					2000-03-29 00:00:00.0,
					Wed Mar 29 00:00:00 GMT 2000,
					Wed Mar 29 00:00:00 GMT 2000"/>
        <testData input="1900:01:01,30"
                  expectedOutput="Wed Jan 31 00:00:00 GMT 1900,
					1900-01-31 00:00:00.0,
					Wed Jan 31 00:00:00 GMT 1900,
					Wed Jan 31 00:00:00 GMT 1900,
					Wed Jan 31 00:00:00 GMT 1900,
					1900-01-31 00:00:00.0,
					Wed Jan 31 00:00:00 GMT 1900,
					Wed Jan 31 00:00:00 GMT 1900"/>
        <testData input="4000:01:01,30"
                  expectedOutput="Mon Jan 31 00:00:00 GMT 4000,
					4000-01-31 00:00:00.0,
					Mon Jan 31 00:00:00 GMT 4000,
					Mon Jan 31 00:00:00 GMT 4000,
					Mon Jan 31 00:00:00 GMT 4000,
					4000-01-31 00:00:00.0,
					Mon Jan 31 00:00:00 GMT 4000,
					Mon Jan 31 00:00:00 GMT 4000"/>
        <testData input="2000:01:01,30"
                  expectedOutput="Mon Jan 31 00:00:00 GMT 2000,
					2000-01-31 00:00:00.0,
					Mon Jan 31 00:00:00 GMT 2000,
					Mon Jan 31 00:00:00 GMT 2000,
					Mon Jan 31 00:00:00 GMT 2000,
					2000-01-31 00:00:00.0,
					Mon Jan 31 00:00:00 GMT 2000,
					Mon Jan 31 00:00:00 GMT 2000"/>
        <testData input="3999:01:01,0.23456"
                  expectedOutput="Fri Jan 01 00:00:00 GMT 3999,
					3999-01-01 00:00:00.0,
					Fri Jan 01 00:00:00 GMT 3999,
					Fri Jan 01 00:00:00 GMT 3999,
					Fri Jan 01 00:00:00 GMT 3999,
					3999-01-01 00:00:00.0,
					Fri Jan 01 00:00:00 GMT 3999,
					Fri Jan 01 00:00:00 GMT 3999"/>
    </testcase>
    <testcase testName="testAddMonths"
              fieldName="testAddMonths"
              dataType="DateTime"
              formula="ADDMONTHS(customdate1__c,customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateTime"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="2004:12:31:11:32:00,NULL"
                  expectedOutput="Fri Dec 31 11:32:00 GMT 2004,
					2004-12-31 11:32:00.0,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:31:11:32:00,-12.00"
                  expectedOutput="Wed Dec 31 11:32:00 GMT 2003,
					2003-12-31 11:32:00.0,
					Wed Dec 31 11:32:00 GMT 2003,
					Wed Dec 31 11:32:00 GMT 2003,
					Wed Dec 31 11:32:00 GMT 2003,
					2003-12-31 11:32:00.0,
					Wed Dec 31 11:32:00 GMT 2003,
					Wed Dec 31 11:32:00 GMT 2003"/>
        <testData input="2004:12:31:11:32:00,12.00"
                  expectedOutput="Sat Dec 31 11:32:00 GMT 2005,
					2005-12-31 11:32:00.0,
					Sat Dec 31 11:32:00 GMT 2005,
					Sat Dec 31 11:32:00 GMT 2005,
					Sat Dec 31 11:32:00 GMT 2005,
					2005-12-31 11:32:00.0,
					Sat Dec 31 11:32:00 GMT 2005,
					Sat Dec 31 11:32:00 GMT 2005"/>
        <testData input="2004:12:31:11:32:00,-1.00"
                  expectedOutput="Tue Nov 30 11:32:00 GMT 2004,
					2004-11-30 11:32:00.0,
					Tue Nov 30 11:32:00 GMT 2004,
					Tue Nov 30 11:32:00 GMT 2004,
					Tue Nov 30 11:32:00 GMT 2004,
					2004-11-30 11:32:00.0,
					Tue Nov 30 11:32:00 GMT 2004,
					Tue Nov 30 11:32:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,1.00"
                  expectedOutput="Mon Jan 31 11:32:00 GMT 2005,
					2005-01-31 11:32:00.0,
					Mon Jan 31 11:32:00 GMT 2005,
					Mon Jan 31 11:32:00 GMT 2005,
					Mon Jan 31 11:32:00 GMT 2005,
					2005-01-31 11:32:00.0,
					Mon Jan 31 11:32:00 GMT 2005,
					Mon Jan 31 11:32:00 GMT 2005"/>
        <testData input="2004:12:31:11:32:00,-2.00"
                  expectedOutput="Sun Oct 31 11:32:00 GMT 2004,
					2004-10-31 11:32:00.0,
					Sun Oct 31 11:32:00 GMT 2004,
					Sun Oct 31 11:32:00 GMT 2004,
					Sun Oct 31 11:32:00 GMT 2004,
					2004-10-31 11:32:00.0,
					Sun Oct 31 11:32:00 GMT 2004,
					Sun Oct 31 11:32:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,2.00"
                  expectedOutput="Mon Feb 28 11:32:00 GMT 2005,
					2005-02-28 11:32:00.0,
					Mon Feb 28 11:32:00 GMT 2005,
					Mon Feb 28 11:32:00 GMT 2005,
					Mon Feb 28 11:32:00 GMT 2005,
					2005-02-28 11:32:00.0,
					Mon Feb 28 11:32:00 GMT 2005,
					Mon Feb 28 11:32:00 GMT 2005"/>
        <testData input="2004:12:31:11:32:00,-3.00"
                  expectedOutput="Thu Sep 30 11:32:00 GMT 2004,
					2004-09-30 11:32:00.0,
					Thu Sep 30 11:32:00 GMT 2004,
					Thu Sep 30 11:32:00 GMT 2004,
					Thu Sep 30 11:32:00 GMT 2004,
					2004-09-30 11:32:00.0,
					Thu Sep 30 11:32:00 GMT 2004,
					Thu Sep 30 11:32:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,3.00"
                  expectedOutput="Thu Mar 31 11:32:00 GMT 2005,
					2005-03-31 11:32:00.0,
					Thu Mar 31 11:32:00 GMT 2005,
					Thu Mar 31 11:32:00 GMT 2005,
					Thu Mar 31 11:32:00 GMT 2005,
					2005-03-31 11:32:00.0,
					Thu Mar 31 11:32:00 GMT 2005,
					Thu Mar 31 11:32:00 GMT 2005"/>
        <testData input="2004:12:31:11:32:00,0.50"
                  expectedOutput="Fri Dec 31 11:32:00 GMT 2004,
					2004-12-31 11:32:00.0,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004,
					2004-12-31 11:32:00.0,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,0.00"
                  expectedOutput="Fri Dec 31 11:32:00 GMT 2004,
					2004-12-31 11:32:00.0,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004,
					2004-12-31 11:32:00.0,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,-0.50"
                  expectedOutput="Fri Dec 31 11:32:00 GMT 2004,
					2004-12-31 11:32:00.0,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004,
					2004-12-31 11:32:00.0,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004"/>
        <testData input="2004:02:29:07:34:00:GMT,-12.00"
                  expectedOutput="Fri Feb 28 07:34:00 GMT 2003,
					2003-02-28 07:34:00.0,
					Fri Feb 28 07:34:00 GMT 2003,
					Fri Feb 28 07:34:00 GMT 2003,
					Fri Feb 28 07:34:00 GMT 2003,
					2003-02-28 07:34:00.0,
					Fri Feb 28 07:34:00 GMT 2003,
					Fri Feb 28 07:34:00 GMT 2003"/>
        <testData input="2004:02:29:07:34:00:GMT,12.00"
                  expectedOutput="Mon Feb 28 07:34:00 GMT 2005,
					2005-02-28 07:34:00.0,
					Mon Feb 28 07:34:00 GMT 2005,
					Mon Feb 28 07:34:00 GMT 2005,
					Mon Feb 28 07:34:00 GMT 2005,
					2005-02-28 07:34:00.0,
					Mon Feb 28 07:34:00 GMT 2005,
					Mon Feb 28 07:34:00 GMT 2005"/>
        <testData input="2004:02:29:07:34:00:GMT,-1.00"
                  expectedOutput="Sat Jan 31 07:34:00 GMT 2004,
					2004-01-31 07:34:00.0,
					Sat Jan 31 07:34:00 GMT 2004,
					Sat Jan 31 07:34:00 GMT 2004,
					Sat Jan 31 07:34:00 GMT 2004,
					2004-01-31 07:34:00.0,
					Sat Jan 31 07:34:00 GMT 2004,
					Sat Jan 31 07:34:00 GMT 2004"/>
        <testData input="2004:02:29:07:34:00:GMT,1.00"
                  expectedOutput="Wed Mar 31 07:34:00 GMT 2004,
					2004-03-31 07:34:00.0,
					Wed Mar 31 07:34:00 GMT 2004,
					Wed Mar 31 07:34:00 GMT 2004,
					Wed Mar 31 07:34:00 GMT 2004,
					2004-03-31 07:34:00.0,
					Wed Mar 31 07:34:00 GMT 2004,
					Wed Mar 31 07:34:00 GMT 2004"/>
        <testData input="2004:02:29:07:34:00:GMT,-2.00"
                  expectedOutput="Wed Dec 31 07:34:00 GMT 2003,
					2003-12-31 07:34:00.0,
					Wed Dec 31 07:34:00 GMT 2003,
					Wed Dec 31 07:34:00 GMT 2003,
					Wed Dec 31 07:34:00 GMT 2003,
					2003-12-31 07:34:00.0,
					Wed Dec 31 07:34:00 GMT 2003,
					Wed Dec 31 07:34:00 GMT 2003"/>
        <testData input="2004:02:29:07:34:00:GMT,2.00"
                  expectedOutput="Fri Apr 30 07:34:00 GMT 2004,
					2004-04-30 07:34:00.0,
					Fri Apr 30 07:34:00 GMT 2004,
					Fri Apr 30 07:34:00 GMT 2004,
					Fri Apr 30 07:34:00 GMT 2004,
					2004-04-30 07:34:00.0,
					Fri Apr 30 07:34:00 GMT 2004,
					Fri Apr 30 07:34:00 GMT 2004"/>
        <testData input="2004:02:29:07:34:00:GMT,-3.00"
                  expectedOutput="Sun Nov 30 07:34:00 GMT 2003,
					2003-11-30 07:34:00.0,
					Sun Nov 30 07:34:00 GMT 2003,
					Sun Nov 30 07:34:00 GMT 2003,
					Sun Nov 30 07:34:00 GMT 2003,
					2003-11-30 07:34:00.0,
					Sun Nov 30 07:34:00 GMT 2003,
					Sun Nov 30 07:34:00 GMT 2003"/>
        <testData input="2004:02:29:07:34:00:GMT,3.00"
                  expectedOutput="Mon May 31 07:34:00 GMT 2004,
					2004-05-31 07:34:00.0,
					Mon May 31 07:34:00 GMT 2004,
					Mon May 31 07:34:00 GMT 2004,
					Mon May 31 07:34:00 GMT 2004,
					2004-05-31 07:34:00.0,
					Mon May 31 07:34:00 GMT 2004,
					Mon May 31 07:34:00 GMT 2004"/>
        <testData input="2004:02:29:07:34:00:GMT,0.50"
                  expectedOutput="Sun Feb 29 07:34:00 GMT 2004,
					2004-02-29 07:34:00.0,
					Sun Feb 29 07:34:00 GMT 2004,
					Sun Feb 29 07:34:00 GMT 2004,
					Sun Feb 29 07:34:00 GMT 2004,
					2004-02-29 07:34:00.0,
					Sun Feb 29 07:34:00 GMT 2004,
					Sun Feb 29 07:34:00 GMT 2004"/>
        <testData input="2004:02:29:07:34:00:GMT,0.00"
                  expectedOutput="Sun Feb 29 07:34:00 GMT 2004,
					2004-02-29 07:34:00.0,
					Sun Feb 29 07:34:00 GMT 2004,
					Sun Feb 29 07:34:00 GMT 2004,
					Sun Feb 29 07:34:00 GMT 2004,
					2004-02-29 07:34:00.0,
					Sun Feb 29 07:34:00 GMT 2004,
					Sun Feb 29 07:34:00 GMT 2004"/>
        <testData input="2004:02:29:07:34:00:GMT,-0.50"
                  expectedOutput="Sun Feb 29 07:34:00 GMT 2004,
					2004-02-29 07:34:00.0,
					Sun Feb 29 07:34:00 GMT 2004,
					Sun Feb 29 07:34:00 GMT 2004,
					Sun Feb 29 07:34:00 GMT 2004,
					2004-02-29 07:34:00.0,
					Sun Feb 29 07:34:00 GMT 2004,
					Sun Feb 29 07:34:00 GMT 2004"/>
        <testData input="2004:03:29:07:34:00:GMT,-12.00"
                  expectedOutput="Sat Mar 29 07:34:00 GMT 2003,
					2003-03-29 07:34:00.0,
					Sat Mar 29 07:34:00 GMT 2003,
					Sat Mar 29 07:34:00 GMT 2003,
					Sat Mar 29 07:34:00 GMT 2003,
					2003-03-29 07:34:00.0,
					Sat Mar 29 07:34:00 GMT 2003,
					Sat Mar 29 07:34:00 GMT 2003"/>
        <testData input="2004:03:29:07:34:00:GMT,12.00"
                  expectedOutput="Tue Mar 29 07:34:00 GMT 2005,
					2005-03-29 07:34:00.0,
					Tue Mar 29 07:34:00 GMT 2005,
					Tue Mar 29 07:34:00 GMT 2005,
					Tue Mar 29 07:34:00 GMT 2005,
					2005-03-29 07:34:00.0,
					Tue Mar 29 07:34:00 GMT 2005,
					Tue Mar 29 07:34:00 GMT 2005"/>
        <testData input="2004:03:29:07:34:00:GMT,-1.00"
                  expectedOutput="Sun Feb 29 07:34:00 GMT 2004,
					2004-02-29 07:34:00.0,
					Sun Feb 29 07:34:00 GMT 2004,
					Sun Feb 29 07:34:00 GMT 2004,
					Sun Feb 29 07:34:00 GMT 2004,
					2004-02-29 07:34:00.0,
					Sun Feb 29 07:34:00 GMT 2004,
					Sun Feb 29 07:34:00 GMT 2004"/>
        <testData input="2004:03:29:07:34:00:GMT,1.00"
                  expectedOutput="Thu Apr 29 07:34:00 GMT 2004,
					2004-04-29 07:34:00.0,
					Thu Apr 29 07:34:00 GMT 2004,
					Thu Apr 29 07:34:00 GMT 2004,
					Thu Apr 29 07:34:00 GMT 2004,
					2004-04-29 07:34:00.0,
					Thu Apr 29 07:34:00 GMT 2004,
					Thu Apr 29 07:34:00 GMT 2004"/>
        <testData input="2004:03:29:07:34:00:GMT,-2.00"
                  expectedOutput="Thu Jan 29 07:34:00 GMT 2004,
					2004-01-29 07:34:00.0,
					Thu Jan 29 07:34:00 GMT 2004,
					Thu Jan 29 07:34:00 GMT 2004,
					Thu Jan 29 07:34:00 GMT 2004,
					2004-01-29 07:34:00.0,
					Thu Jan 29 07:34:00 GMT 2004,
					Thu Jan 29 07:34:00 GMT 2004"/>
        <testData input="2004:03:29:07:34:00:GMT,2.00"
                  expectedOutput="Sat May 29 07:34:00 GMT 2004,
					2004-05-29 07:34:00.0,
					Sat May 29 07:34:00 GMT 2004,
					Sat May 29 07:34:00 GMT 2004,
					Sat May 29 07:34:00 GMT 2004,
					2004-05-29 07:34:00.0,
					Sat May 29 07:34:00 GMT 2004,
					Sat May 29 07:34:00 GMT 2004"/>
        <testData input="2004:03:29:07:34:00:GMT,-3.00"
                  expectedOutput="Mon Dec 29 07:34:00 GMT 2003,
					2003-12-29 07:34:00.0,
					Mon Dec 29 07:34:00 GMT 2003,
					Mon Dec 29 07:34:00 GMT 2003,
					Mon Dec 29 07:34:00 GMT 2003,
					2003-12-29 07:34:00.0,
					Mon Dec 29 07:34:00 GMT 2003,
					Mon Dec 29 07:34:00 GMT 2003"/>
        <testData input="2004:03:29:07:34:00:GMT,3.00"
                  expectedOutput="Tue Jun 29 07:34:00 GMT 2004,
					2004-06-29 07:34:00.0,
					Tue Jun 29 07:34:00 GMT 2004,
					Tue Jun 29 07:34:00 GMT 2004,
					Tue Jun 29 07:34:00 GMT 2004,
					2004-06-29 07:34:00.0,
					Tue Jun 29 07:34:00 GMT 2004,
					Tue Jun 29 07:34:00 GMT 2004"/>
        <testData input="2004:03:29:07:34:00:GMT,0.50"
                  expectedOutput="Mon Mar 29 07:34:00 GMT 2004,
					2004-03-29 07:34:00.0,
					Mon Mar 29 07:34:00 GMT 2004,
					Mon Mar 29 07:34:00 GMT 2004,
					Mon Mar 29 07:34:00 GMT 2004,
					2004-03-29 07:34:00.0,
					Mon Mar 29 07:34:00 GMT 2004,
					Mon Mar 29 07:34:00 GMT 2004"/>
        <testData input="2004:03:29:07:34:00:GMT,0.00"
                  expectedOutput="Mon Mar 29 07:34:00 GMT 2004,
					2004-03-29 07:34:00.0,
					Mon Mar 29 07:34:00 GMT 2004,
					Mon Mar 29 07:34:00 GMT 2004,
					Mon Mar 29 07:34:00 GMT 2004,
					2004-03-29 07:34:00.0,
					Mon Mar 29 07:34:00 GMT 2004,
					Mon Mar 29 07:34:00 GMT 2004"/>
        <testData input="2004:03:29:07:34:00:GMT,-0.50"
                  expectedOutput="Mon Mar 29 07:34:00 GMT 2004,
					2004-03-29 07:34:00.0,
					Mon Mar 29 07:34:00 GMT 2004,
					Mon Mar 29 07:34:00 GMT 2004,
					Mon Mar 29 07:34:00 GMT 2004,
					2004-03-29 07:34:00.0,
					Mon Mar 29 07:34:00 GMT 2004,
					Mon Mar 29 07:34:00 GMT 2004"/>
        <testData input="2004:03:30:07:34:00:GMT,-12.00"
                  expectedOutput="Sun Mar 30 07:34:00 GMT 2003,
					2003-03-30 07:34:00.0,
					Sun Mar 30 07:34:00 GMT 2003,
					Sun Mar 30 07:34:00 GMT 2003,
					Sun Mar 30 07:34:00 GMT 2003,
					2003-03-30 07:34:00.0,
					Sun Mar 30 07:34:00 GMT 2003,
					Sun Mar 30 07:34:00 GMT 2003"/>
        <testData input="2004:03:30:07:34:00:GMT,12.00"
                  expectedOutput="Wed Mar 30 07:34:00 GMT 2005,
					2005-03-30 07:34:00.0,
					Wed Mar 30 07:34:00 GMT 2005,
					Wed Mar 30 07:34:00 GMT 2005,
					Wed Mar 30 07:34:00 GMT 2005,
					2005-03-30 07:34:00.0,
					Wed Mar 30 07:34:00 GMT 2005,
					Wed Mar 30 07:34:00 GMT 2005"/>
        <testData input="2004:03:30:07:34:00:GMT,-1.00"
                  expectedOutput="Sun Feb 29 07:34:00 GMT 2004,
					2004-02-29 07:34:00.0,
					Sun Feb 29 07:34:00 GMT 2004,
					Sun Feb 29 07:34:00 GMT 2004,
					Sun Feb 29 07:34:00 GMT 2004,
					2004-02-29 07:34:00.0,
					Sun Feb 29 07:34:00 GMT 2004,
					Sun Feb 29 07:34:00 GMT 2004"/>
        <testData input="2004:03:30:07:34:00:GMT,1.00"
                  expectedOutput="Fri Apr 30 07:34:00 GMT 2004,
					2004-04-30 07:34:00.0,
					Fri Apr 30 07:34:00 GMT 2004,
					Fri Apr 30 07:34:00 GMT 2004,
					Fri Apr 30 07:34:00 GMT 2004,
					2004-04-30 07:34:00.0,
					Fri Apr 30 07:34:00 GMT 2004,
					Fri Apr 30 07:34:00 GMT 2004"/>
        <testData input="2004:03:30:07:34:00:GMT,-2.00"
                  expectedOutput="Fri Jan 30 07:34:00 GMT 2004,
					2004-01-30 07:34:00.0,
					Fri Jan 30 07:34:00 GMT 2004,
					Fri Jan 30 07:34:00 GMT 2004,
					Fri Jan 30 07:34:00 GMT 2004,
					2004-01-30 07:34:00.0,
					Fri Jan 30 07:34:00 GMT 2004,
					Fri Jan 30 07:34:00 GMT 2004"/>
        <testData input="2004:03:30:07:34:00:GMT,2.00"
                  expectedOutput="Sun May 30 07:34:00 GMT 2004,
					2004-05-30 07:34:00.0,
					Sun May 30 07:34:00 GMT 2004,
					Sun May 30 07:34:00 GMT 2004,
					Sun May 30 07:34:00 GMT 2004,
					2004-05-30 07:34:00.0,
					Sun May 30 07:34:00 GMT 2004,
					Sun May 30 07:34:00 GMT 2004"/>
        <testData input="2004:03:30:07:34:00:GMT,-3.00"
                  expectedOutput="Tue Dec 30 07:34:00 GMT 2003,
					2003-12-30 07:34:00.0,
					Tue Dec 30 07:34:00 GMT 2003,
					Tue Dec 30 07:34:00 GMT 2003,
					Tue Dec 30 07:34:00 GMT 2003,
					2003-12-30 07:34:00.0,
					Tue Dec 30 07:34:00 GMT 2003,
					Tue Dec 30 07:34:00 GMT 2003"/>
        <testData input="2004:03:30:07:34:00:GMT,3.00"
                  expectedOutput="Wed Jun 30 07:34:00 GMT 2004,
					2004-06-30 07:34:00.0,
					Wed Jun 30 07:34:00 GMT 2004,
					Wed Jun 30 07:34:00 GMT 2004,
					Wed Jun 30 07:34:00 GMT 2004,
					2004-06-30 07:34:00.0,
					Wed Jun 30 07:34:00 GMT 2004,
					Wed Jun 30 07:34:00 GMT 2004"/>
        <testData input="2004:03:30:07:34:00:GMT,0.50"
                  expectedOutput="Tue Mar 30 07:34:00 GMT 2004,
					2004-03-30 07:34:00.0,
					Tue Mar 30 07:34:00 GMT 2004,
					Tue Mar 30 07:34:00 GMT 2004,
					Tue Mar 30 07:34:00 GMT 2004,
					2004-03-30 07:34:00.0,
					Tue Mar 30 07:34:00 GMT 2004,
					Tue Mar 30 07:34:00 GMT 2004"/>
        <testData input="2004:03:30:07:34:00:GMT,0.00"
                  expectedOutput="Tue Mar 30 07:34:00 GMT 2004,
					2004-03-30 07:34:00.0,
					Tue Mar 30 07:34:00 GMT 2004,
					Tue Mar 30 07:34:00 GMT 2004,
					Tue Mar 30 07:34:00 GMT 2004,
					2004-03-30 07:34:00.0,
					Tue Mar 30 07:34:00 GMT 2004,
					Tue Mar 30 07:34:00 GMT 2004"/>
        <testData input="2004:03:30:07:34:00:GMT,-0.50"
                  expectedOutput="Tue Mar 30 07:34:00 GMT 2004,
					2004-03-30 07:34:00.0,
					Tue Mar 30 07:34:00 GMT 2004,
					Tue Mar 30 07:34:00 GMT 2004,
					Tue Mar 30 07:34:00 GMT 2004,
					2004-03-30 07:34:00.0,
					Tue Mar 30 07:34:00 GMT 2004,
					Tue Mar 30 07:34:00 GMT 2004"/>
    </testcase>
    <testcase testName="testAddMonthsDate"
              fieldName="testAddMonthsDate"
              dataType="DateOnly"
              formula="ADDMONTHS(customdate1__c,customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="2004:12:31:11:32:00,NULL"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:31:11:32:00,-12.00"
                  expectedOutput="Wed Dec 31 00:00:00 GMT 2003,
					2003-12-31 00:00:00.0,
					Wed Dec 31 00:00:00 GMT 2003,
					Wed Dec 31 00:00:00 GMT 2003,
					Wed Dec 31 00:00:00 GMT 2003,
					2003-12-31 00:00:00.0,
					Wed Dec 31 00:00:00 GMT 2003,
					Wed Dec 31 00:00:00 GMT 2003"/>
        <testData input="2004:12:31:11:32:00,12.00"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="2004:12:31:11:32:00,-1.00"
                  expectedOutput="Tue Nov 30 00:00:00 GMT 2004,
					2004-11-30 00:00:00.0,
					Tue Nov 30 00:00:00 GMT 2004,
					Tue Nov 30 00:00:00 GMT 2004,
					Tue Nov 30 00:00:00 GMT 2004,
					2004-11-30 00:00:00.0,
					Tue Nov 30 00:00:00 GMT 2004,
					Tue Nov 30 00:00:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,1.00"
                  expectedOutput="Mon Jan 31 00:00:00 GMT 2005,
					2005-01-31 00:00:00.0,
					Mon Jan 31 00:00:00 GMT 2005,
					Mon Jan 31 00:00:00 GMT 2005,
					Mon Jan 31 00:00:00 GMT 2005,
					2005-01-31 00:00:00.0,
					Mon Jan 31 00:00:00 GMT 2005,
					Mon Jan 31 00:00:00 GMT 2005"/>
        <testData input="2004:12:31:11:32:00,-2.00"
                  expectedOutput="Sun Oct 31 00:00:00 GMT 2004,
					2004-10-31 00:00:00.0,
					Sun Oct 31 00:00:00 GMT 2004,
					Sun Oct 31 00:00:00 GMT 2004,
					Sun Oct 31 00:00:00 GMT 2004,
					2004-10-31 00:00:00.0,
					Sun Oct 31 00:00:00 GMT 2004,
					Sun Oct 31 00:00:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,2.00"
                  expectedOutput="Mon Feb 28 00:00:00 GMT 2005,
					2005-02-28 00:00:00.0,
					Mon Feb 28 00:00:00 GMT 2005,
					Mon Feb 28 00:00:00 GMT 2005,
					Mon Feb 28 00:00:00 GMT 2005,
					2005-02-28 00:00:00.0,
					Mon Feb 28 00:00:00 GMT 2005,
					Mon Feb 28 00:00:00 GMT 2005"/>
        <testData input="2004:12:31:11:32:00,-3.00"
                  expectedOutput="Thu Sep 30 00:00:00 GMT 2004,
					2004-09-30 00:00:00.0,
					Thu Sep 30 00:00:00 GMT 2004,
					Thu Sep 30 00:00:00 GMT 2004,
					Thu Sep 30 00:00:00 GMT 2004,
					2004-09-30 00:00:00.0,
					Thu Sep 30 00:00:00 GMT 2004,
					Thu Sep 30 00:00:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,3.00"
                  expectedOutput="Thu Mar 31 00:00:00 GMT 2005,
					2005-03-31 00:00:00.0,
					Thu Mar 31 00:00:00 GMT 2005,
					Thu Mar 31 00:00:00 GMT 2005,
					Thu Mar 31 00:00:00 GMT 2005,
					2005-03-31 00:00:00.0,
					Thu Mar 31 00:00:00 GMT 2005,
					Thu Mar 31 00:00:00 GMT 2005"/>
        <testData input="2004:12:31:11:32:00,0.50"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,0.00"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,-0.50"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004"/>
        <testData input="2004:02:29:07:34:00:GMT,-12.00"
                  expectedOutput="Fri Feb 28 00:00:00 GMT 2003,
					2003-02-28 00:00:00.0,
					Fri Feb 28 00:00:00 GMT 2003,
					Fri Feb 28 00:00:00 GMT 2003,
					Fri Feb 28 00:00:00 GMT 2003,
					2003-02-28 00:00:00.0,
					Fri Feb 28 00:00:00 GMT 2003,
					Fri Feb 28 00:00:00 GMT 2003"/>
        <testData input="2004:02:29:07:34:00:GMT,12.00"
                  expectedOutput="Mon Feb 28 00:00:00 GMT 2005,
					2005-02-28 00:00:00.0,
					Mon Feb 28 00:00:00 GMT 2005,
					Mon Feb 28 00:00:00 GMT 2005,
					Mon Feb 28 00:00:00 GMT 2005,
					2005-02-28 00:00:00.0,
					Mon Feb 28 00:00:00 GMT 2005,
					Mon Feb 28 00:00:00 GMT 2005"/>
        <testData input="2004:02:29:07:34:00:GMT,-1.00"
                  expectedOutput="Sat Jan 31 00:00:00 GMT 2004,
					2004-01-31 00:00:00.0,
					Sat Jan 31 00:00:00 GMT 2004,
					Sat Jan 31 00:00:00 GMT 2004,
					Sat Jan 31 00:00:00 GMT 2004,
					2004-01-31 00:00:00.0,
					Sat Jan 31 00:00:00 GMT 2004,
					Sat Jan 31 00:00:00 GMT 2004"/>
        <testData input="2004:02:29:07:34:00:GMT,1.00"
                  expectedOutput="Wed Mar 31 00:00:00 GMT 2004,
					2004-03-31 00:00:00.0,
					Wed Mar 31 00:00:00 GMT 2004,
					Wed Mar 31 00:00:00 GMT 2004,
					Wed Mar 31 00:00:00 GMT 2004,
					2004-03-31 00:00:00.0,
					Wed Mar 31 00:00:00 GMT 2004,
					Wed Mar 31 00:00:00 GMT 2004"/>
        <testData input="2004:02:29:07:34:00:GMT,-2.00"
                  expectedOutput="Wed Dec 31 00:00:00 GMT 2003,
					2003-12-31 00:00:00.0,
					Wed Dec 31 00:00:00 GMT 2003,
					Wed Dec 31 00:00:00 GMT 2003,
					Wed Dec 31 00:00:00 GMT 2003,
					2003-12-31 00:00:00.0,
					Wed Dec 31 00:00:00 GMT 2003,
					Wed Dec 31 00:00:00 GMT 2003"/>
        <testData input="2004:02:29:07:34:00:GMT,2.00"
                  expectedOutput="Fri Apr 30 00:00:00 GMT 2004,
					2004-04-30 00:00:00.0,
					Fri Apr 30 00:00:00 GMT 2004,
					Fri Apr 30 00:00:00 GMT 2004,
					Fri Apr 30 00:00:00 GMT 2004,
					2004-04-30 00:00:00.0,
					Fri Apr 30 00:00:00 GMT 2004,
					Fri Apr 30 00:00:00 GMT 2004"/>
        <testData input="2004:02:29:07:34:00:GMT,-3.00"
                  expectedOutput="Sun Nov 30 00:00:00 GMT 2003,
					2003-11-30 00:00:00.0,
					Sun Nov 30 00:00:00 GMT 2003,
					Sun Nov 30 00:00:00 GMT 2003,
					Sun Nov 30 00:00:00 GMT 2003,
					2003-11-30 00:00:00.0,
					Sun Nov 30 00:00:00 GMT 2003,
					Sun Nov 30 00:00:00 GMT 2003"/>
        <testData input="2004:02:29:07:34:00:GMT,3.00"
                  expectedOutput="Mon May 31 00:00:00 GMT 2004,
					2004-05-31 00:00:00.0,
					Mon May 31 00:00:00 GMT 2004,
					Mon May 31 00:00:00 GMT 2004,
					Mon May 31 00:00:00 GMT 2004,
					2004-05-31 00:00:00.0,
					Mon May 31 00:00:00 GMT 2004,
					Mon May 31 00:00:00 GMT 2004"/>
        <testData input="2004:02:29:07:34:00:GMT,0.50"
                  expectedOutput="Sun Feb 29 00:00:00 GMT 2004,
					2004-02-29 00:00:00.0,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004,
					2004-02-29 00:00:00.0,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004"/>
        <testData input="2004:02:29:07:34:00:GMT,0.00"
                  expectedOutput="Sun Feb 29 00:00:00 GMT 2004,
					2004-02-29 00:00:00.0,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004,
					2004-02-29 00:00:00.0,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004"/>
        <testData input="2004:02:29:07:34:00:GMT,-0.50"
                  expectedOutput="Sun Feb 29 00:00:00 GMT 2004,
					2004-02-29 00:00:00.0,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004,
					2004-02-29 00:00:00.0,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004"/>
        <testData input="2004:03:29:07:34:00:GMT,-12.00"
                  expectedOutput="Sat Mar 29 00:00:00 GMT 2003,
					2003-03-29 00:00:00.0,
					Sat Mar 29 00:00:00 GMT 2003,
					Sat Mar 29 00:00:00 GMT 2003,
					Sat Mar 29 00:00:00 GMT 2003,
					2003-03-29 00:00:00.0,
					Sat Mar 29 00:00:00 GMT 2003,
					Sat Mar 29 00:00:00 GMT 2003"/>
        <testData input="2004:03:29:07:34:00:GMT,12.00"
                  expectedOutput="Tue Mar 29 00:00:00 GMT 2005,
					2005-03-29 00:00:00.0,
					Tue Mar 29 00:00:00 GMT 2005,
					Tue Mar 29 00:00:00 GMT 2005,
					Tue Mar 29 00:00:00 GMT 2005,
					2005-03-29 00:00:00.0,
					Tue Mar 29 00:00:00 GMT 2005,
					Tue Mar 29 00:00:00 GMT 2005"/>
        <testData input="2004:03:29:07:34:00:GMT,-1.00"
                  expectedOutput="Sun Feb 29 00:00:00 GMT 2004,
					2004-02-29 00:00:00.0,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004,
					2004-02-29 00:00:00.0,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004"/>
        <testData input="2004:03:29:07:34:00:GMT,1.00"
                  expectedOutput="Thu Apr 29 00:00:00 GMT 2004,
					2004-04-29 00:00:00.0,
					Thu Apr 29 00:00:00 GMT 2004,
					Thu Apr 29 00:00:00 GMT 2004,
					Thu Apr 29 00:00:00 GMT 2004,
					2004-04-29 00:00:00.0,
					Thu Apr 29 00:00:00 GMT 2004,
					Thu Apr 29 00:00:00 GMT 2004"/>
        <testData input="2004:03:29:07:34:00:GMT,-2.00"
                  expectedOutput="Thu Jan 29 00:00:00 GMT 2004,
					2004-01-29 00:00:00.0,
					Thu Jan 29 00:00:00 GMT 2004,
					Thu Jan 29 00:00:00 GMT 2004,
					Thu Jan 29 00:00:00 GMT 2004,
					2004-01-29 00:00:00.0,
					Thu Jan 29 00:00:00 GMT 2004,
					Thu Jan 29 00:00:00 GMT 2004"/>
        <testData input="2004:03:29:07:34:00:GMT,2.00"
                  expectedOutput="Sat May 29 00:00:00 GMT 2004,
					2004-05-29 00:00:00.0,
					Sat May 29 00:00:00 GMT 2004,
					Sat May 29 00:00:00 GMT 2004,
					Sat May 29 00:00:00 GMT 2004,
					2004-05-29 00:00:00.0,
					Sat May 29 00:00:00 GMT 2004,
					Sat May 29 00:00:00 GMT 2004"/>
        <testData input="2004:03:29:07:34:00:GMT,-3.00"
                  expectedOutput="Mon Dec 29 00:00:00 GMT 2003,
					2003-12-29 00:00:00.0,
					Mon Dec 29 00:00:00 GMT 2003,
					Mon Dec 29 00:00:00 GMT 2003,
					Mon Dec 29 00:00:00 GMT 2003,
					2003-12-29 00:00:00.0,
					Mon Dec 29 00:00:00 GMT 2003,
					Mon Dec 29 00:00:00 GMT 2003"/>
        <testData input="2004:03:29:07:34:00:GMT,3.00"
                  expectedOutput="Tue Jun 29 00:00:00 GMT 2004,
					2004-06-29 00:00:00.0,
					Tue Jun 29 00:00:00 GMT 2004,
					Tue Jun 29 00:00:00 GMT 2004,
					Tue Jun 29 00:00:00 GMT 2004,
					2004-06-29 00:00:00.0,
					Tue Jun 29 00:00:00 GMT 2004,
					Tue Jun 29 00:00:00 GMT 2004"/>
        <testData input="2004:03:29:07:34:00:GMT,0.50"
                  expectedOutput="Mon Mar 29 00:00:00 GMT 2004,
					2004-03-29 00:00:00.0,
					Mon Mar 29 00:00:00 GMT 2004,
					Mon Mar 29 00:00:00 GMT 2004,
					Mon Mar 29 00:00:00 GMT 2004,
					2004-03-29 00:00:00.0,
					Mon Mar 29 00:00:00 GMT 2004,
					Mon Mar 29 00:00:00 GMT 2004"/>
        <testData input="2004:03:29:07:34:00:GMT,0.00"
                  expectedOutput="Mon Mar 29 00:00:00 GMT 2004,
					2004-03-29 00:00:00.0,
					Mon Mar 29 00:00:00 GMT 2004,
					Mon Mar 29 00:00:00 GMT 2004,
					Mon Mar 29 00:00:00 GMT 2004,
					2004-03-29 00:00:00.0,
					Mon Mar 29 00:00:00 GMT 2004,
					Mon Mar 29 00:00:00 GMT 2004"/>
        <testData input="2004:03:29:07:34:00:GMT,-0.50"
                  expectedOutput="Mon Mar 29 00:00:00 GMT 2004,
					2004-03-29 00:00:00.0,
					Mon Mar 29 00:00:00 GMT 2004,
					Mon Mar 29 00:00:00 GMT 2004,
					Mon Mar 29 00:00:00 GMT 2004,
					2004-03-29 00:00:00.0,
					Mon Mar 29 00:00:00 GMT 2004,
					Mon Mar 29 00:00:00 GMT 2004"/>
        <testData input="2004:03:30:07:34:00:GMT,-12.00"
                  expectedOutput="Sun Mar 30 00:00:00 GMT 2003,
					2003-03-30 00:00:00.0,
					Sun Mar 30 00:00:00 GMT 2003,
					Sun Mar 30 00:00:00 GMT 2003,
					Sun Mar 30 00:00:00 GMT 2003,
					2003-03-30 00:00:00.0,
					Sun Mar 30 00:00:00 GMT 2003,
					Sun Mar 30 00:00:00 GMT 2003"/>
        <testData input="2004:03:30:07:34:00:GMT,12.00"
                  expectedOutput="Wed Mar 30 00:00:00 GMT 2005,
					2005-03-30 00:00:00.0,
					Wed Mar 30 00:00:00 GMT 2005,
					Wed Mar 30 00:00:00 GMT 2005,
					Wed Mar 30 00:00:00 GMT 2005,
					2005-03-30 00:00:00.0,
					Wed Mar 30 00:00:00 GMT 2005,
					Wed Mar 30 00:00:00 GMT 2005"/>
        <testData input="2004:03:30:07:34:00:GMT,-1.00"
                  expectedOutput="Sun Feb 29 00:00:00 GMT 2004,
					2004-02-29 00:00:00.0,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004,
					2004-02-29 00:00:00.0,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004"/>
        <testData input="2004:03:30:07:34:00:GMT,1.00"
                  expectedOutput="Fri Apr 30 00:00:00 GMT 2004,
					2004-04-30 00:00:00.0,
					Fri Apr 30 00:00:00 GMT 2004,
					Fri Apr 30 00:00:00 GMT 2004,
					Fri Apr 30 00:00:00 GMT 2004,
					2004-04-30 00:00:00.0,
					Fri Apr 30 00:00:00 GMT 2004,
					Fri Apr 30 00:00:00 GMT 2004"/>
        <testData input="2004:03:30:07:34:00:GMT,-2.00"
                  expectedOutput="Fri Jan 30 00:00:00 GMT 2004,
					2004-01-30 00:00:00.0,
					Fri Jan 30 00:00:00 GMT 2004,
					Fri Jan 30 00:00:00 GMT 2004,
					Fri Jan 30 00:00:00 GMT 2004,
					2004-01-30 00:00:00.0,
					Fri Jan 30 00:00:00 GMT 2004,
					Fri Jan 30 00:00:00 GMT 2004"/>
        <testData input="2004:03:30:07:34:00:GMT,2.00"
                  expectedOutput="Sun May 30 00:00:00 GMT 2004,
					2004-05-30 00:00:00.0,
					Sun May 30 00:00:00 GMT 2004,
					Sun May 30 00:00:00 GMT 2004,
					Sun May 30 00:00:00 GMT 2004,
					2004-05-30 00:00:00.0,
					Sun May 30 00:00:00 GMT 2004,
					Sun May 30 00:00:00 GMT 2004"/>
        <testData input="2004:03:30:07:34:00:GMT,-3.00"
                  expectedOutput="Tue Dec 30 00:00:00 GMT 2003,
					2003-12-30 00:00:00.0,
					Tue Dec 30 00:00:00 GMT 2003,
					Tue Dec 30 00:00:00 GMT 2003,
					Tue Dec 30 00:00:00 GMT 2003,
					2003-12-30 00:00:00.0,
					Tue Dec 30 00:00:00 GMT 2003,
					Tue Dec 30 00:00:00 GMT 2003"/>
        <testData input="2004:03:30:07:34:00:GMT,3.00"
                  expectedOutput="Wed Jun 30 00:00:00 GMT 2004,
					2004-06-30 00:00:00.0,
					Wed Jun 30 00:00:00 GMT 2004,
					Wed Jun 30 00:00:00 GMT 2004,
					Wed Jun 30 00:00:00 GMT 2004,
					2004-06-30 00:00:00.0,
					Wed Jun 30 00:00:00 GMT 2004,
					Wed Jun 30 00:00:00 GMT 2004"/>
        <testData input="2004:03:30:07:34:00:GMT,0.50"
                  expectedOutput="Tue Mar 30 00:00:00 GMT 2004,
					2004-03-30 00:00:00.0,
					Tue Mar 30 00:00:00 GMT 2004,
					Tue Mar 30 00:00:00 GMT 2004,
					Tue Mar 30 00:00:00 GMT 2004,
					2004-03-30 00:00:00.0,
					Tue Mar 30 00:00:00 GMT 2004,
					Tue Mar 30 00:00:00 GMT 2004"/>
        <testData input="2004:03:30:07:34:00:GMT,0.00"
                  expectedOutput="Tue Mar 30 00:00:00 GMT 2004,
					2004-03-30 00:00:00.0,
					Tue Mar 30 00:00:00 GMT 2004,
					Tue Mar 30 00:00:00 GMT 2004,
					Tue Mar 30 00:00:00 GMT 2004,
					2004-03-30 00:00:00.0,
					Tue Mar 30 00:00:00 GMT 2004,
					Tue Mar 30 00:00:00 GMT 2004"/>
        <testData input="2004:03:30:07:34:00:GMT,-0.50"
                  expectedOutput="Tue Mar 30 00:00:00 GMT 2004,
					2004-03-30 00:00:00.0,
					Tue Mar 30 00:00:00 GMT 2004,
					Tue Mar 30 00:00:00 GMT 2004,
					Tue Mar 30 00:00:00 GMT 2004,
					2004-03-30 00:00:00.0,
					Tue Mar 30 00:00:00 GMT 2004,
					Tue Mar 30 00:00:00 GMT 2004"/>
    </testcase>
    <testcase testName="testWeekday"
              fieldName="testWeekday"
              dataType="Double"
              formula="WEEKDAY(customdate1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input=",40"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2005:12:31,4.00" expectedOutput="7,
					7,
					7,
					7,
					7,
					7,
					7,
					7"/>
        <testData input="2004:12:31,3.00" expectedOutput="6,
					6,
					6,
					6,
					6,
					6,
					6,
					6"/>
        <testData input="2004:02:28:00:00:00,4.00"
                  expectedOutput="7,
					7,
					7,
					7,
					7,
					7,
					7,
					7"/>
        <testData input="2000:02:28,3.5" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="2000:02:28,3.4" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="2000:02:28,3.6" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="2000:02:28,40000" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="2000:02:28,365" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="2000:02:28,364" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="2000:02:28,30" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="1900:01:01,30" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="4000:01:01,30" expectedOutput="7,
					7,
					7,
					7,
					7,
					7,
					7,
					7"/>
        <testData input="2000:01:01,30" expectedOutput="7,
					7,
					7,
					7,
					7,
					7,
					7,
					7"/>
        <testData input="3999:01:01,0.23456"
                  expectedOutput="6,
					6,
					6,
					6,
					6,
					6,
					6,
					6"/>
    </testcase>
    <testcase testName="testDayOfYear"
              fieldName="testDayOfYear"
              dataType="Double"
              formula="DAYOFYEAR(customdate1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input=",40"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2005:12:31,4.00"
                  expectedOutput="365,
					365,
					365,
					365,
					365,
					365,
					365,
					365"/>
        <testData input="2004:12:31,3.00"
                  expectedOutput="366,
					366,
					366,
					366,
					366,
					366,
					366,
					366"/>
        <testData input="2004:02:28:00:00:00,4.00"
                  expectedOutput="59,
					59,
					59,
					59,
					59,
					59,
					59,
					59"/>
        <testData input="2000:02:28,3.5"
                  expectedOutput="59,
					59,
					59,
					59,
					59,
					59,
					59,
					59"/>
        <testData input="2000:02:28,3.4"
                  expectedOutput="59,
					59,
					59,
					59,
					59,
					59,
					59,
					59"/>
        <testData input="2000:02:28,3.6"
                  expectedOutput="59,
					59,
					59,
					59,
					59,
					59,
					59,
					59"/>
        <testData input="2000:02:28,40000"
                  expectedOutput="59,
					59,
					59,
					59,
					59,
					59,
					59,
					59"/>
        <testData input="2000:02:28,365"
                  expectedOutput="59,
					59,
					59,
					59,
					59,
					59,
					59,
					59"/>
        <testData input="2000:02:28,364"
                  expectedOutput="59,
					59,
					59,
					59,
					59,
					59,
					59,
					59"/>
        <testData input="2000:02:28,30"
                  expectedOutput="59,
					59,
					59,
					59,
					59,
					59,
					59,
					59"/>
        <testData input="1900:01:01,30" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="4000:01:01,30" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="2000:01:01,30" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="3999:01:01,0.23456"
                  expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
    </testcase>
    <testcase testName="testUnixTimestampWithDate"
              fieldName="testUnixTimestampWithDate"
              dataType="Double"
              formula="UNIXTIMESTAMP(customdate1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input=",40"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2005:12:31,4.00"
                  expectedOutput="1135987200,
					1135987200,
					1135987200,
					1135987200,
					1135987200,
					1135987200,
					1135987200,
					1135987200"/>
        <testData input="2004:12:31,3.00"
                  expectedOutput="1104451200,
					1104451200,
					1104451200,
					1104451200,
					1104451200,
					1104451200,
					1104451200,
					1104451200"/>
        <testData input="2004:02:28:00:00:00,4.00"
                  expectedOutput="1077926400,
					1077926400,
					1077926400,
					1077926400,
					1077926400,
					1077926400,
					1077926400,
					1077926400"/>
        <testData input="2000:02:28,3.5"
                  expectedOutput="951696000,
					951696000,
					951696000,
					951696000,
					951696000,
					951696000,
					951696000,
					951696000"/>
        <testData input="2000:02:28,3.4"
                  expectedOutput="951696000,
					951696000,
					951696000,
					951696000,
					951696000,
					951696000,
					951696000,
					951696000"/>
        <testData input="2000:02:28,3.6"
                  expectedOutput="951696000,
					951696000,
					951696000,
					951696000,
					951696000,
					951696000,
					951696000,
					951696000"/>
        <testData input="2000:02:28,40000"
                  expectedOutput="951696000,
					951696000,
					951696000,
					951696000,
					951696000,
					951696000,
					951696000,
					951696000"/>
        <testData input="2000:02:28,365"
                  expectedOutput="951696000,
					951696000,
					951696000,
					951696000,
					951696000,
					951696000,
					951696000,
					951696000"/>
        <testData input="2000:02:28,364"
                  expectedOutput="951696000,
					951696000,
					951696000,
					951696000,
					951696000,
					951696000,
					951696000,
					951696000"/>
        <testData input="2000:02:28,30"
                  expectedOutput="951696000,
					951696000,
					951696000,
					951696000,
					951696000,
					951696000,
					951696000,
					951696000"/>
        <testData input="1900:01:01,30"
                  expectedOutput="-2208988800,
					-2208988800,
					-2208988800,
					-2208988800,
					-2208988800,
					-2208988800,
					-2208988800,
					-2208988800"/>
        <testData input="4000:01:01,30"
                  expectedOutput="64060588800,
					64060588800,
					64060588800,
					64060588800,
					64060588800,
					64060588800,
					64060588800,
					64060588800"/>
        <testData input="2000:01:01,30"
                  expectedOutput="946684800,
					946684800,
					946684800,
					946684800,
					946684800,
					946684800,
					946684800,
					946684800"/>
        <testData input="3999:01:01,0.23456"
                  expectedOutput="64029052800,
					64029052800,
					64029052800,
					64029052800,
					64029052800,
					64029052800,
					64029052800,
					64029052800"/>
    </testcase>
    <testcase testName="testAddDateWithExpr"
              fieldName="testAddDateWithExpr"
              dataType="DateOnly"
              formula="(customformula0__c+customnumber1__c+customformula1__c+customcurrency1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customformula0"
                        dataType="DateOnly"
                        formula="(customdate1__c+custompercent1__c)">
            <referenceField fieldName="customdate1" dataType="DateOnly"/>
            <referenceField fieldName="custompercent1" dataType="Percent"/>
        </referenceField>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customformula1"
                        dataType="Double"
                        formula="(customdate2__c-customdate3__c)">
            <referenceField fieldName="customdate2" dataType="DateOnly"/>
            <referenceField fieldName="customdate3" dataType="DateOnly"/>
        </referenceField>
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <testData input="3998:01:31,200,10,3999:12:31,3999:12:01,0"
                  expectedOutput="Sat Mar 14 00:00:00 GMT 3998,
					3998-03-14 00:00:00.0,
					Sat Mar 14 00:00:00 GMT 3998,
					Sat Mar 14 00:00:00 GMT 3998,
					Sat Mar 14 00:00:00 GMT 3998,
					3998-03-14 00:00:00.0,
					Sat Mar 14 00:00:00 GMT 3998,
					Sat Mar 14 00:00:00 GMT 3998"/>
        <testData input="1900:01:01,.004,1,2004:12:31,2004:12:31,0"
                  expectedOutput="Tue Jan 02 00:00:00 GMT 1900,
					1900-01-02 00:00:00.0,
					Tue Jan 02 00:00:00 GMT 1900,
					Tue Jan 02 00:00:00 GMT 1900,
					Tue Jan 02 00:00:00 GMT 1900,
					1900-01-02 00:00:00.0,
					Tue Jan 02 00:00:00 GMT 1900,
					Tue Jan 02 00:00:00 GMT 1900"/>
        <testData input=",100,,2004:11:31,2004:12:31,0"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",100,,,2004:12:31,0"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:31,,,2004:11:31,2004:12:31,0"
                  expectedOutput="Wed Dec 01 00:00:00 GMT 2004,
					2004-12-01 00:00:00.0,
					Wed Dec 01 00:00:00 GMT 2004,
					Wed Dec 01 00:00:00 GMT 2004,
					null,
					null,
					null,
					null"/>
        <testData input=",100,,2004:11:31,,0"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testAddDateTime"
              fieldName="testAddDateTime"
              dataType="DateTime"
              formula="(customdatetime1__c+customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="2004:12:31:11:32:00,3.00"
                  expectedOutput="Mon Jan 03 11:32:00 GMT 2005,
					2005-01-03 11:32:00.0,
					Mon Jan 03 11:32:00 GMT 2005,
					Mon Jan 03 11:32:00 GMT 2005,
					Mon Jan 03 11:32:00 GMT 2005,
					2005-01-03 11:32:00.0,
					Mon Jan 03 11:32:00 GMT 2005,
					Mon Jan 03 11:32:00 GMT 2005"/>
        <testData input="2004:02:28:10:34:00,4.00"
                  expectedOutput="Wed Mar 03 10:34:00 GMT 2004,
					2004-03-03 10:34:00.0,
					Wed Mar 03 10:34:00 GMT 2004,
					Wed Mar 03 10:34:00 GMT 2004,
					Wed Mar 03 10:34:00 GMT 2004,
					2004-03-03 10:34:00.0,
					Wed Mar 03 10:34:00 GMT 2004,
					Wed Mar 03 10:34:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,3.50"
                  expectedOutput="Mon Jan 03 23:32:00 GMT 2005,
					2005-01-03 23:32:00.0,
					Mon Jan 03 23:32:00 GMT 2005,
					Mon Jan 03 23:32:00 GMT 2005,
					Mon Jan 03 23:32:00 GMT 2005,
					2005-01-03 23:32:00.0,
					Mon Jan 03 23:32:00 GMT 2005,
					Mon Jan 03 23:32:00 GMT 2005"/>
        <testData input="2004:02:28:10:34:00,4.50"
                  expectedOutput="Wed Mar 03 22:34:00 GMT 2004,
					2004-03-03 22:34:00.0,
					Wed Mar 03 22:34:00 GMT 2004,
					Wed Mar 03 22:34:00 GMT 2004,
					Wed Mar 03 22:34:00 GMT 2004,
					2004-03-03 22:34:00.0,
					Wed Mar 03 22:34:00 GMT 2004,
					Wed Mar 03 22:34:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,3.10"
                  expectedOutput="Mon Jan 03 13:56:00 GMT 2005,
					2005-01-03 13:56:00.0,
					Mon Jan 03 13:56:00 GMT 2005,
					Mon Jan 03 13:56:00 GMT 2005,
					Mon Jan 03 13:56:00 GMT 2005,
					2005-01-03 13:56:00.0,
					Mon Jan 03 13:56:00 GMT 2005,
					Mon Jan 03 13:56:00 GMT 2005"/>
        <testData input="2004:02:28:10:34:00,4.10"
                  expectedOutput="Wed Mar 03 12:58:00 GMT 2004,
					2004-03-03 12:58:00.0,
					Wed Mar 03 12:58:00 GMT 2004,
					Wed Mar 03 12:58:00 GMT 2004,
					Wed Mar 03 12:58:00 GMT 2004,
					2004-03-03 12:58:00.0,
					Wed Mar 03 12:58:00 GMT 2004,
					Wed Mar 03 12:58:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,3.60"
                  expectedOutput="Tue Jan 04 01:56:00 GMT 2005,
					2005-01-04 01:56:00.0,
					Tue Jan 04 01:56:00 GMT 2005,
					Tue Jan 04 01:56:00 GMT 2005,
					Tue Jan 04 01:56:00 GMT 2005,
					2005-01-04 01:56:00.0,
					Tue Jan 04 01:56:00 GMT 2005,
					Tue Jan 04 01:56:00 GMT 2005"/>
        <testData input="2004:02:28:10:34:00,4.60"
                  expectedOutput="Thu Mar 04 00:58:00 GMT 2004,
					2004-03-04 00:58:00.0,
					Thu Mar 04 00:58:00 GMT 2004,
					Thu Mar 04 00:58:00 GMT 2004,
					Thu Mar 04 00:58:00 GMT 2004,
					2004-03-04 00:58:00.0,
					Thu Mar 04 00:58:00 GMT 2004,
					Thu Mar 04 00:58:00 GMT 2004"/>
        <testData input="2004:12:31:23:32:00,0.50"
                  expectedOutput="Sat Jan 01 11:32:00 GMT 2005,
					2005-01-01 11:32:00.0,
					Sat Jan 01 11:32:00 GMT 2005,
					Sat Jan 01 11:32:00 GMT 2005,
					Sat Jan 01 11:32:00 GMT 2005,
					2005-01-01 11:32:00.0,
					Sat Jan 01 11:32:00 GMT 2005,
					Sat Jan 01 11:32:00 GMT 2005"/>
        <testData input="2004:02:28:23:34:00,0.40"
                  expectedOutput="Sun Feb 29 09:10:00 GMT 2004,
					2004-02-29 09:10:00.0,
					Sun Feb 29 09:10:00 GMT 2004,
					Sun Feb 29 09:10:00 GMT 2004,
					Sun Feb 29 09:10:00 GMT 2004,
					2004-02-29 09:10:00.0,
					Sun Feb 29 09:10:00 GMT 2004,
					Sun Feb 29 09:10:00 GMT 2004"/>
        <testData input="2004:02:28:23:34:00,1.00"
                  expectedOutput="Sun Feb 29 23:34:00 GMT 2004,
					2004-02-29 23:34:00.0,
					Sun Feb 29 23:34:00 GMT 2004,
					Sun Feb 29 23:34:00 GMT 2004,
					Sun Feb 29 23:34:00 GMT 2004,
					2004-02-29 23:34:00.0,
					Sun Feb 29 23:34:00 GMT 2004,
					Sun Feb 29 23:34:00 GMT 2004"/>
        <testData input="2004:02:28:01:34:00,1.00"
                  expectedOutput="Sun Feb 29 01:34:00 GMT 2004,
					2004-02-29 01:34:00.0,
					Sun Feb 29 01:34:00 GMT 2004,
					Sun Feb 29 01:34:00 GMT 2004,
					Sun Feb 29 01:34:00 GMT 2004,
					2004-02-29 01:34:00.0,
					Sun Feb 29 01:34:00 GMT 2004,
					Sun Feb 29 01:34:00 GMT 2004"/>
        <testData input="2004:02:28:23:34:00:PST,1.00"
                  expectedOutput="Mon Mar 01 07:34:00 GMT 2004,
					2004-03-01 07:34:00.0,
					Mon Mar 01 07:34:00 GMT 2004,
					Mon Mar 01 07:34:00 GMT 2004,
					Mon Mar 01 07:34:00 GMT 2004,
					2004-03-01 07:34:00.0,
					Mon Mar 01 07:34:00 GMT 2004,
					Mon Mar 01 07:34:00 GMT 2004"/>
        <testData input="2004:02:29:07:34:00:GMT,1.00"
                  expectedOutput="Mon Mar 01 07:34:00 GMT 2004,
					2004-03-01 07:34:00.0,
					Mon Mar 01 07:34:00 GMT 2004,
					Mon Mar 01 07:34:00 GMT 2004,
					Mon Mar 01 07:34:00 GMT 2004,
					2004-03-01 07:34:00.0,
					Mon Mar 01 07:34:00 GMT 2004,
					Mon Mar 01 07:34:00 GMT 2004"/>
        <testData input="2004:02:28:01:34:00:PST,1.00"
                  expectedOutput="Sun Feb 29 09:34:00 GMT 2004,
					2004-02-29 09:34:00.0,
					Sun Feb 29 09:34:00 GMT 2004,
					Sun Feb 29 09:34:00 GMT 2004,
					Sun Feb 29 09:34:00 GMT 2004,
					2004-02-29 09:34:00.0,
					Sun Feb 29 09:34:00 GMT 2004,
					Sun Feb 29 09:34:00 GMT 2004"/>
        <testData input="2009:02:07:10:00:00,0.16666"
                  expectedOutput="Sat Feb 07 13:59:59 GMT 2009,
					2009-02-07 13:59:59.0,
					Sat Feb 07 13:59:59 GMT 2009,
					Sat Feb 07 13:59:59 GMT 2009,
					Sat Feb 07 13:59:59 GMT 2009,
					2009-02-07 13:59:59.0,
					Sat Feb 07 13:59:59 GMT 2009,
					Sat Feb 07 13:59:59 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.166666"
                  expectedOutput="Sat Feb 07 14:00:00 GMT 2009,
					2009-02-07 14:00:00.0,
					Sat Feb 07 14:00:00 GMT 2009,
					Sat Feb 07 14:00:00 GMT 2009,
					Sat Feb 07 14:00:00 GMT 2009,
					2009-02-07 14:00:00.0,
					Sat Feb 07 14:00:00 GMT 2009,
					Sat Feb 07 14:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16596"
                  expectedOutput="Sat Feb 07 13:58:59 GMT 2009,
					2009-02-07 13:58:59.0,
					Sat Feb 07 13:58:59 GMT 2009,
					Sat Feb 07 13:58:59 GMT 2009,
					Sat Feb 07 13:58:59 GMT 2009,
					2009-02-07 13:58:59.0,
					Sat Feb 07 13:58:59 GMT 2009,
					Sat Feb 07 13:58:59 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.1659664"
                  expectedOutput="Sat Feb 07 13:58:59 GMT 2009,
					2009-02-07 13:58:59.0,
					Sat Feb 07 13:58:59 GMT 2009,
					Sat Feb 07 13:58:59 GMT 2009,
					Sat Feb 07 13:58:59 GMT 2009,
					2009-02-07 13:58:59.0,
					Sat Feb 07 13:58:59 GMT 2009,
					Sat Feb 07 13:58:59 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16596643"
                  expectedOutput="Sat Feb 07 13:58:59 GMT 2009,
					2009-02-07 13:58:59.0,
					Sat Feb 07 13:58:59 GMT 2009,
					Sat Feb 07 13:58:59 GMT 2009,
					Sat Feb 07 13:58:59 GMT 2009,
					2009-02-07 13:58:59.0,
					Sat Feb 07 13:58:59 GMT 2009,
					Sat Feb 07 13:58:59 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16596644"
                  expectedOutput="Sat Feb 07 13:59:00 GMT 2009,
					2009-02-07 13:59:00.0,
					Sat Feb 07 13:59:00 GMT 2009,
					Sat Feb 07 13:59:00 GMT 2009,
					Sat Feb 07 13:59:00 GMT 2009,
					2009-02-07 13:59:00.0,
					Sat Feb 07 13:59:00 GMT 2009,
					Sat Feb 07 13:59:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.1659665"
                  expectedOutput="Sat Feb 07 13:59:00 GMT 2009,
					2009-02-07 13:59:00.0,
					Sat Feb 07 13:59:00 GMT 2009,
					Sat Feb 07 13:59:00 GMT 2009,
					Sat Feb 07 13:59:00 GMT 2009,
					2009-02-07 13:59:00.0,
					Sat Feb 07 13:59:00 GMT 2009,
					Sat Feb 07 13:59:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16597"
                  expectedOutput="Sat Feb 07 13:59:00 GMT 2009,
					2009-02-07 13:59:00.0,
					Sat Feb 07 13:59:00 GMT 2009,
					Sat Feb 07 13:59:00 GMT 2009,
					Sat Feb 07 13:59:00 GMT 2009,
					2009-02-07 13:59:00.0,
					Sat Feb 07 13:59:00 GMT 2009,
					Sat Feb 07 13:59:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,100.16597"
                  expectedOutput="Mon May 18 13:59:00 GMT 2009,
					2009-05-18 13:59:00.0,
					Mon May 18 13:59:00 GMT 2009,
					Mon May 18 13:59:00 GMT 2009,
					Mon May 18 13:59:00 GMT 2009,
					2009-05-18 13:59:00.0,
					Mon May 18 13:59:00 GMT 2009,
					Mon May 18 13:59:00 GMT 2009"/>
    </testcase>
    <testcase testName="testAddMonthsDateTime"
              fieldName="testAddMonthsDateTime"
              dataType="DateTime"
              formula="ADDMONTHS(customdatetime1__c,customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="2004:12:31:11:32:00,3.00"
                  expectedOutput="Thu Mar 31 11:32:00 GMT 2005,
					2005-03-31 11:32:00.0,
					Thu Mar 31 11:32:00 GMT 2005,
					Thu Mar 31 11:32:00 GMT 2005,
					Thu Mar 31 11:32:00 GMT 2005,
					2005-03-31 11:32:00.0,
					Thu Mar 31 11:32:00 GMT 2005,
					Thu Mar 31 11:32:00 GMT 2005"/>
        <testData input="2004:02:28:10:34:00,4.00"
                  expectedOutput="Mon Jun 28 10:34:00 GMT 2004,
					2004-06-28 10:34:00.0,
					Mon Jun 28 10:34:00 GMT 2004,
					Mon Jun 28 10:34:00 GMT 2004,
					Mon Jun 28 10:34:00 GMT 2004,
					2004-06-28 10:34:00.0,
					Mon Jun 28 10:34:00 GMT 2004,
					Mon Jun 28 10:34:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,3.50"
                  expectedOutput="Thu Mar 31 11:32:00 GMT 2005,
					2005-03-31 11:32:00.0,
					Thu Mar 31 11:32:00 GMT 2005,
					Thu Mar 31 11:32:00 GMT 2005,
					Thu Mar 31 11:32:00 GMT 2005,
					2005-03-31 11:32:00.0,
					Thu Mar 31 11:32:00 GMT 2005,
					Thu Mar 31 11:32:00 GMT 2005"/>
        <testData input="2004:02:28:10:34:00,4.50"
                  expectedOutput="Mon Jun 28 10:34:00 GMT 2004,
					2004-06-28 10:34:00.0,
					Mon Jun 28 10:34:00 GMT 2004,
					Mon Jun 28 10:34:00 GMT 2004,
					Mon Jun 28 10:34:00 GMT 2004,
					2004-06-28 10:34:00.0,
					Mon Jun 28 10:34:00 GMT 2004,
					Mon Jun 28 10:34:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,3.10"
                  expectedOutput="Thu Mar 31 11:32:00 GMT 2005,
					2005-03-31 11:32:00.0,
					Thu Mar 31 11:32:00 GMT 2005,
					Thu Mar 31 11:32:00 GMT 2005,
					Thu Mar 31 11:32:00 GMT 2005,
					2005-03-31 11:32:00.0,
					Thu Mar 31 11:32:00 GMT 2005,
					Thu Mar 31 11:32:00 GMT 2005"/>
        <testData input="2004:02:28:10:34:00,4.10"
                  expectedOutput="Mon Jun 28 10:34:00 GMT 2004,
					2004-06-28 10:34:00.0,
					Mon Jun 28 10:34:00 GMT 2004,
					Mon Jun 28 10:34:00 GMT 2004,
					Mon Jun 28 10:34:00 GMT 2004,
					2004-06-28 10:34:00.0,
					Mon Jun 28 10:34:00 GMT 2004,
					Mon Jun 28 10:34:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,3.60"
                  expectedOutput="Thu Mar 31 11:32:00 GMT 2005,
					2005-03-31 11:32:00.0,
					Thu Mar 31 11:32:00 GMT 2005,
					Thu Mar 31 11:32:00 GMT 2005,
					Thu Mar 31 11:32:00 GMT 2005,
					2005-03-31 11:32:00.0,
					Thu Mar 31 11:32:00 GMT 2005,
					Thu Mar 31 11:32:00 GMT 2005"/>
        <testData input="2004:02:28:10:34:00,4.60"
                  expectedOutput="Mon Jun 28 10:34:00 GMT 2004,
					2004-06-28 10:34:00.0,
					Mon Jun 28 10:34:00 GMT 2004,
					Mon Jun 28 10:34:00 GMT 2004,
					Mon Jun 28 10:34:00 GMT 2004,
					2004-06-28 10:34:00.0,
					Mon Jun 28 10:34:00 GMT 2004,
					Mon Jun 28 10:34:00 GMT 2004"/>
        <testData input="2004:12:31:23:32:00,0.50"
                  expectedOutput="Fri Dec 31 23:32:00 GMT 2004,
					2004-12-31 23:32:00.0,
					Fri Dec 31 23:32:00 GMT 2004,
					Fri Dec 31 23:32:00 GMT 2004,
					Fri Dec 31 23:32:00 GMT 2004,
					2004-12-31 23:32:00.0,
					Fri Dec 31 23:32:00 GMT 2004,
					Fri Dec 31 23:32:00 GMT 2004"/>
        <testData input="2004:02:28:23:34:00,0.40"
                  expectedOutput="Sat Feb 28 23:34:00 GMT 2004,
					2004-02-28 23:34:00.0,
					Sat Feb 28 23:34:00 GMT 2004,
					Sat Feb 28 23:34:00 GMT 2004,
					Sat Feb 28 23:34:00 GMT 2004,
					2004-02-28 23:34:00.0,
					Sat Feb 28 23:34:00 GMT 2004,
					Sat Feb 28 23:34:00 GMT 2004"/>
        <testData input="2004:02:28:23:34:00,1.00"
                  expectedOutput="Sun Mar 28 23:34:00 GMT 2004,
					2004-03-28 23:34:00.0,
					Sun Mar 28 23:34:00 GMT 2004,
					Sun Mar 28 23:34:00 GMT 2004,
					Sun Mar 28 23:34:00 GMT 2004,
					2004-03-28 23:34:00.0,
					Sun Mar 28 23:34:00 GMT 2004,
					Sun Mar 28 23:34:00 GMT 2004"/>
        <testData input="2004:02:28:01:34:00,1.00"
                  expectedOutput="Sun Mar 28 01:34:00 GMT 2004,
					2004-03-28 01:34:00.0,
					Sun Mar 28 01:34:00 GMT 2004,
					Sun Mar 28 01:34:00 GMT 2004,
					Sun Mar 28 01:34:00 GMT 2004,
					2004-03-28 01:34:00.0,
					Sun Mar 28 01:34:00 GMT 2004,
					Sun Mar 28 01:34:00 GMT 2004"/>
        <testData input="2004:02:28:23:34:00:PST,1.00"
                  expectedOutput="Wed Mar 31 07:34:00 GMT 2004,
					2004-03-31 07:34:00.0,
					Wed Mar 31 07:34:00 GMT 2004,
					Wed Mar 31 07:34:00 GMT 2004,
					Wed Mar 31 07:34:00 GMT 2004,
					2004-03-31 07:34:00.0,
					Wed Mar 31 07:34:00 GMT 2004,
					Wed Mar 31 07:34:00 GMT 2004"/>
        <testData input="2004:02:29:07:34:00:GMT,1.00"
                  expectedOutput="Wed Mar 31 07:34:00 GMT 2004,
					2004-03-31 07:34:00.0,
					Wed Mar 31 07:34:00 GMT 2004,
					Wed Mar 31 07:34:00 GMT 2004,
					Wed Mar 31 07:34:00 GMT 2004,
					2004-03-31 07:34:00.0,
					Wed Mar 31 07:34:00 GMT 2004,
					Wed Mar 31 07:34:00 GMT 2004"/>
        <testData input="2004:02:28:01:34:00:PST,1.00"
                  expectedOutput="Sun Mar 28 09:34:00 GMT 2004,
					2004-03-28 09:34:00.0,
					Sun Mar 28 09:34:00 GMT 2004,
					Sun Mar 28 09:34:00 GMT 2004,
					Sun Mar 28 09:34:00 GMT 2004,
					2004-03-28 09:34:00.0,
					Sun Mar 28 09:34:00 GMT 2004,
					Sun Mar 28 09:34:00 GMT 2004"/>
        <testData input="2009:02:07:10:00:00,0.16666"
                  expectedOutput="Sat Feb 07 10:00:00 GMT 2009,
					2009-02-07 10:00:00.0,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009,
					2009-02-07 10:00:00.0,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.166666"
                  expectedOutput="Sat Feb 07 10:00:00 GMT 2009,
					2009-02-07 10:00:00.0,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009,
					2009-02-07 10:00:00.0,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16596"
                  expectedOutput="Sat Feb 07 10:00:00 GMT 2009,
					2009-02-07 10:00:00.0,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009,
					2009-02-07 10:00:00.0,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.1659664"
                  expectedOutput="Sat Feb 07 10:00:00 GMT 2009,
					2009-02-07 10:00:00.0,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009,
					2009-02-07 10:00:00.0,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16596643"
                  expectedOutput="Sat Feb 07 10:00:00 GMT 2009,
					2009-02-07 10:00:00.0,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009,
					2009-02-07 10:00:00.0,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16596644"
                  expectedOutput="Sat Feb 07 10:00:00 GMT 2009,
					2009-02-07 10:00:00.0,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009,
					2009-02-07 10:00:00.0,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.1659665"
                  expectedOutput="Sat Feb 07 10:00:00 GMT 2009,
					2009-02-07 10:00:00.0,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009,
					2009-02-07 10:00:00.0,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16597"
                  expectedOutput="Sat Feb 07 10:00:00 GMT 2009,
					2009-02-07 10:00:00.0,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009,
					2009-02-07 10:00:00.0,
					Sat Feb 07 10:00:00 GMT 2009,
					Sat Feb 07 10:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,100.16597"
                  expectedOutput="Wed Jun 07 10:00:00 GMT 2017,
					2017-06-07 10:00:00.0,
					Wed Jun 07 10:00:00 GMT 2017,
					Wed Jun 07 10:00:00 GMT 2017,
					Wed Jun 07 10:00:00 GMT 2017,
					2017-06-07 10:00:00.0,
					Wed Jun 07 10:00:00 GMT 2017,
					Wed Jun 07 10:00:00 GMT 2017"/>
    </testcase>
    <testcase testName="testAddDateTimeMinutes"
              fieldName="testAddDateTimeMinutes"
              dataType="DateTime"
              formula="customdatetime1__c+(customnumber1__c/(24*60))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="2009:02:07:10:00:00,240"
                  expectedOutput="Sat Feb 07 14:00:00 GMT 2009,
					2009-02-07 14:00:00.0,
					Sat Feb 07 14:00:00 GMT 2009,
					Sat Feb 07 14:00:00 GMT 2009,
					Sat Feb 07 14:00:00 GMT 2009,
					2009-02-07 14:00:00.0,
					Sat Feb 07 14:00:00 GMT 2009,
					Sat Feb 07 14:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,239"
                  expectedOutput="Sat Feb 07 13:59:00 GMT 2009,
					2009-02-07 13:59:00.0,
					Sat Feb 07 13:59:00 GMT 2009,
					Sat Feb 07 13:59:00 GMT 2009,
					Sat Feb 07 13:59:00 GMT 2009,
					2009-02-07 13:59:00.0,
					Sat Feb 07 13:59:00 GMT 2009,
					Sat Feb 07 13:59:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,239.1"
                  expectedOutput="Sat Feb 07 13:59:06 GMT 2009,
					2009-02-07 13:59:06.0,
					Sat Feb 07 13:59:06 GMT 2009,
					Sat Feb 07 13:59:06 GMT 2009,
					Sat Feb 07 13:59:06 GMT 2009,
					2009-02-07 13:59:06.0,
					Sat Feb 07 13:59:06 GMT 2009,
					Sat Feb 07 13:59:06 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,239.5"
                  expectedOutput="Sat Feb 07 13:59:30 GMT 2009,
					2009-02-07 13:59:30.0,
					Sat Feb 07 13:59:30 GMT 2009,
					Sat Feb 07 13:59:30 GMT 2009,
					Sat Feb 07 13:59:30 GMT 2009,
					2009-02-07 13:59:30.0,
					Sat Feb 07 13:59:30 GMT 2009,
					Sat Feb 07 13:59:30 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,239.9"
                  expectedOutput="Sat Feb 07 13:59:54 GMT 2009,
					2009-02-07 13:59:54.0,
					Sat Feb 07 13:59:54 GMT 2009,
					Sat Feb 07 13:59:54 GMT 2009,
					Sat Feb 07 13:59:54 GMT 2009,
					2009-02-07 13:59:54.0,
					Sat Feb 07 13:59:54 GMT 2009,
					Sat Feb 07 13:59:54 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,239.99"
                  expectedOutput="Sat Feb 07 13:59:59 GMT 2009,
					2009-02-07 13:59:59.0,
					Sat Feb 07 13:59:59 GMT 2009,
					Sat Feb 07 13:59:59 GMT 2009,
					Sat Feb 07 13:59:59 GMT 2009,
					2009-02-07 13:59:59.0,
					Sat Feb 07 13:59:59 GMT 2009,
					Sat Feb 07 13:59:59 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,239.999"
                  expectedOutput="Sat Feb 07 14:00:00 GMT 2009,
					2009-02-07 14:00:00.0,
					Sat Feb 07 14:00:00 GMT 2009,
					Sat Feb 07 14:00:00 GMT 2009,
					Sat Feb 07 14:00:00 GMT 2009,
					2009-02-07 14:00:00.0,
					Sat Feb 07 14:00:00 GMT 2009,
					Sat Feb 07 14:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,239.9999"
                  expectedOutput="Sat Feb 07 14:00:00 GMT 2009,
					2009-02-07 14:00:00.0,
					Sat Feb 07 14:00:00 GMT 2009,
					Sat Feb 07 14:00:00 GMT 2009,
					Sat Feb 07 14:00:00 GMT 2009,
					2009-02-07 14:00:00.0,
					Sat Feb 07 14:00:00 GMT 2009,
					Sat Feb 07 14:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,239.999999999999"
                  expectedOutput="Sat Feb 07 14:00:00 GMT 2009,
					2009-02-07 14:00:00.0,
					Sat Feb 07 14:00:00 GMT 2009,
					Sat Feb 07 14:00:00 GMT 2009,
					Sat Feb 07 14:00:00 GMT 2009,
					2009-02-07 14:00:00.0,
					Sat Feb 07 14:00:00 GMT 2009,
					Sat Feb 07 14:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,240.9"
                  expectedOutput="Sat Feb 07 14:00:54 GMT 2009,
					2009-02-07 14:00:54.0,
					Sat Feb 07 14:00:54 GMT 2009,
					Sat Feb 07 14:00:54 GMT 2009,
					Sat Feb 07 14:00:54 GMT 2009,
					2009-02-07 14:00:54.0,
					Sat Feb 07 14:00:54 GMT 2009,
					Sat Feb 07 14:00:54 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,240.99"
                  expectedOutput="Sat Feb 07 14:00:59 GMT 2009,
					2009-02-07 14:00:59.0,
					Sat Feb 07 14:00:59 GMT 2009,
					Sat Feb 07 14:00:59 GMT 2009,
					Sat Feb 07 14:00:59 GMT 2009,
					2009-02-07 14:00:59.0,
					Sat Feb 07 14:00:59 GMT 2009,
					Sat Feb 07 14:00:59 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,240.9999"
                  expectedOutput="Sat Feb 07 14:01:00 GMT 2009,
					2009-02-07 14:01:00.0,
					Sat Feb 07 14:01:00 GMT 2009,
					Sat Feb 07 14:01:00 GMT 2009,
					Sat Feb 07 14:01:00 GMT 2009,
					2009-02-07 14:01:00.0,
					Sat Feb 07 14:01:00 GMT 2009,
					Sat Feb 07 14:01:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,240.99999"
                  expectedOutput="Sat Feb 07 14:01:00 GMT 2009,
					2009-02-07 14:01:00.0,
					Sat Feb 07 14:01:00 GMT 2009,
					Sat Feb 07 14:01:00 GMT 2009,
					Sat Feb 07 14:01:00 GMT 2009,
					2009-02-07 14:01:00.0,
					Sat Feb 07 14:01:00 GMT 2009,
					Sat Feb 07 14:01:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,240.999999999999"
                  expectedOutput="Sat Feb 07 14:01:00 GMT 2009,
					2009-02-07 14:01:00.0,
					Sat Feb 07 14:01:00 GMT 2009,
					Sat Feb 07 14:01:00 GMT 2009,
					Sat Feb 07 14:01:00 GMT 2009,
					2009-02-07 14:01:00.0,
					Sat Feb 07 14:01:00 GMT 2009,
					Sat Feb 07 14:01:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,241"
                  expectedOutput="Sat Feb 07 14:01:00 GMT 2009,
					2009-02-07 14:01:00.0,
					Sat Feb 07 14:01:00 GMT 2009,
					Sat Feb 07 14:01:00 GMT 2009,
					Sat Feb 07 14:01:00 GMT 2009,
					2009-02-07 14:01:00.0,
					Sat Feb 07 14:01:00 GMT 2009,
					Sat Feb 07 14:01:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,123456789"
                  expectedOutput="Thu Nov 02 07:09:00 GMT 2243,
					2243-11-02 07:09:00.0,
					Thu Nov 02 07:09:00 GMT 2243,
					Thu Nov 02 07:09:00 GMT 2243,
					Thu Nov 02 07:09:00 GMT 2243,
					2243-11-02 07:09:00.0,
					Thu Nov 02 07:09:00 GMT 2243,
					Thu Nov 02 07:09:00 GMT 2243"/>
    </testcase>
    <testcase testName="testAddDateTimeGivingDate"
              fieldName="testAddDateTimeGivingDate"
              dataType="DateOnly"
              formula="(customdatetime1__c+customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="2004:12:31:11:32:00,3.00"
                  expectedOutput="Mon Jan 03 11:32:00 GMT 2005,
					2005-01-03 11:32:00.0,
					Mon Jan 03 11:32:00 GMT 2005,
					Mon Jan 03 11:32:00 GMT 2005,
					Mon Jan 03 11:32:00 GMT 2005,
					2005-01-03 11:32:00.0,
					Mon Jan 03 11:32:00 GMT 2005,
					Mon Jan 03 11:32:00 GMT 2005"/>
        <testData input="2004:02:28:10:34:00,4.00"
                  expectedOutput="Wed Mar 03 10:34:00 GMT 2004,
					2004-03-03 10:34:00.0,
					Wed Mar 03 10:34:00 GMT 2004,
					Wed Mar 03 10:34:00 GMT 2004,
					Wed Mar 03 10:34:00 GMT 2004,
					2004-03-03 10:34:00.0,
					Wed Mar 03 10:34:00 GMT 2004,
					Wed Mar 03 10:34:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,3.50"
                  expectedOutput="Mon Jan 03 23:32:00 GMT 2005,
					2005-01-03 23:32:00.0,
					Mon Jan 03 23:32:00 GMT 2005,
					Mon Jan 03 23:32:00 GMT 2005,
					Mon Jan 03 23:32:00 GMT 2005,
					2005-01-03 23:32:00.0,
					Mon Jan 03 23:32:00 GMT 2005,
					Mon Jan 03 23:32:00 GMT 2005"/>
        <testData input="2004:02:28:10:34:00,4.50"
                  expectedOutput="Wed Mar 03 22:34:00 GMT 2004,
					2004-03-03 22:34:00.0,
					Wed Mar 03 22:34:00 GMT 2004,
					Wed Mar 03 22:34:00 GMT 2004,
					Wed Mar 03 22:34:00 GMT 2004,
					2004-03-03 22:34:00.0,
					Wed Mar 03 22:34:00 GMT 2004,
					Wed Mar 03 22:34:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,3.10"
                  expectedOutput="Mon Jan 03 13:56:00 GMT 2005,
					2005-01-03 13:56:00.0,
					Mon Jan 03 13:56:00 GMT 2005,
					Mon Jan 03 13:56:00 GMT 2005,
					Mon Jan 03 13:56:00 GMT 2005,
					2005-01-03 13:56:00.0,
					Mon Jan 03 13:56:00 GMT 2005,
					Mon Jan 03 13:56:00 GMT 2005"/>
        <testData input="2004:02:28:10:34:00,4.10"
                  expectedOutput="Wed Mar 03 12:58:00 GMT 2004,
					2004-03-03 12:58:00.0,
					Wed Mar 03 12:58:00 GMT 2004,
					Wed Mar 03 12:58:00 GMT 2004,
					Wed Mar 03 12:58:00 GMT 2004,
					2004-03-03 12:58:00.0,
					Wed Mar 03 12:58:00 GMT 2004,
					Wed Mar 03 12:58:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,3.60"
                  expectedOutput="Tue Jan 04 01:56:00 GMT 2005,
					2005-01-04 01:56:00.0,
					Tue Jan 04 01:56:00 GMT 2005,
					Tue Jan 04 01:56:00 GMT 2005,
					Tue Jan 04 01:56:00 GMT 2005,
					2005-01-04 01:56:00.0,
					Tue Jan 04 01:56:00 GMT 2005,
					Tue Jan 04 01:56:00 GMT 2005"/>
        <testData input="2004:02:28:10:34:00,4.60"
                  expectedOutput="Thu Mar 04 00:58:00 GMT 2004,
					2004-03-04 00:58:00.0,
					Thu Mar 04 00:58:00 GMT 2004,
					Thu Mar 04 00:58:00 GMT 2004,
					Thu Mar 04 00:58:00 GMT 2004,
					2004-03-04 00:58:00.0,
					Thu Mar 04 00:58:00 GMT 2004,
					Thu Mar 04 00:58:00 GMT 2004"/>
        <testData input="2004:12:31:23:32:00,0.50"
                  expectedOutput="Sat Jan 01 11:32:00 GMT 2005,
					2005-01-01 11:32:00.0,
					Sat Jan 01 11:32:00 GMT 2005,
					Sat Jan 01 11:32:00 GMT 2005,
					Sat Jan 01 11:32:00 GMT 2005,
					2005-01-01 11:32:00.0,
					Sat Jan 01 11:32:00 GMT 2005,
					Sat Jan 01 11:32:00 GMT 2005"/>
        <testData input="2004:02:28:23:34:00,0.40"
                  expectedOutput="Sun Feb 29 09:10:00 GMT 2004,
					2004-02-29 09:10:00.0,
					Sun Feb 29 09:10:00 GMT 2004,
					Sun Feb 29 09:10:00 GMT 2004,
					Sun Feb 29 09:10:00 GMT 2004,
					2004-02-29 09:10:00.0,
					Sun Feb 29 09:10:00 GMT 2004,
					Sun Feb 29 09:10:00 GMT 2004"/>
        <testData input="2004:02:28:23:34:00,1.00"
                  expectedOutput="Sun Feb 29 23:34:00 GMT 2004,
					2004-02-29 23:34:00.0,
					Sun Feb 29 23:34:00 GMT 2004,
					Sun Feb 29 23:34:00 GMT 2004,
					Sun Feb 29 23:34:00 GMT 2004,
					2004-02-29 23:34:00.0,
					Sun Feb 29 23:34:00 GMT 2004,
					Sun Feb 29 23:34:00 GMT 2004"/>
        <testData input="2004:02:28:01:34:00,1.00"
                  expectedOutput="Sun Feb 29 01:34:00 GMT 2004,
					2004-02-29 01:34:00.0,
					Sun Feb 29 01:34:00 GMT 2004,
					Sun Feb 29 01:34:00 GMT 2004,
					Sun Feb 29 01:34:00 GMT 2004,
					2004-02-29 01:34:00.0,
					Sun Feb 29 01:34:00 GMT 2004,
					Sun Feb 29 01:34:00 GMT 2004"/>
        <testData input="2004:02:28:23:34:00:PST,1.00"
                  expectedOutput="Mon Mar 01 07:34:00 GMT 2004,
					2004-03-01 07:34:00.0,
					Mon Mar 01 07:34:00 GMT 2004,
					Mon Mar 01 07:34:00 GMT 2004,
					Mon Mar 01 07:34:00 GMT 2004,
					2004-03-01 07:34:00.0,
					Mon Mar 01 07:34:00 GMT 2004,
					Mon Mar 01 07:34:00 GMT 2004"/>
        <testData input="2004:02:29:07:34:00:GMT,1.00"
                  expectedOutput="Mon Mar 01 07:34:00 GMT 2004,
					2004-03-01 07:34:00.0,
					Mon Mar 01 07:34:00 GMT 2004,
					Mon Mar 01 07:34:00 GMT 2004,
					Mon Mar 01 07:34:00 GMT 2004,
					2004-03-01 07:34:00.0,
					Mon Mar 01 07:34:00 GMT 2004,
					Mon Mar 01 07:34:00 GMT 2004"/>
        <testData input="2004:02:28:01:34:00:PST,1.00"
                  expectedOutput="Sun Feb 29 09:34:00 GMT 2004,
					2004-02-29 09:34:00.0,
					Sun Feb 29 09:34:00 GMT 2004,
					Sun Feb 29 09:34:00 GMT 2004,
					Sun Feb 29 09:34:00 GMT 2004,
					2004-02-29 09:34:00.0,
					Sun Feb 29 09:34:00 GMT 2004,
					Sun Feb 29 09:34:00 GMT 2004"/>
        <testData input="2009:02:07:10:00:00,0.16666"
                  expectedOutput="Sat Feb 07 13:59:59 GMT 2009,
					2009-02-07 13:59:59.0,
					Sat Feb 07 13:59:59 GMT 2009,
					Sat Feb 07 13:59:59 GMT 2009,
					Sat Feb 07 13:59:59 GMT 2009,
					2009-02-07 13:59:59.0,
					Sat Feb 07 13:59:59 GMT 2009,
					Sat Feb 07 13:59:59 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.166666"
                  expectedOutput="Sat Feb 07 14:00:00 GMT 2009,
					2009-02-07 14:00:00.0,
					Sat Feb 07 14:00:00 GMT 2009,
					Sat Feb 07 14:00:00 GMT 2009,
					Sat Feb 07 14:00:00 GMT 2009,
					2009-02-07 14:00:00.0,
					Sat Feb 07 14:00:00 GMT 2009,
					Sat Feb 07 14:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16596"
                  expectedOutput="Sat Feb 07 13:58:59 GMT 2009,
					2009-02-07 13:58:59.0,
					Sat Feb 07 13:58:59 GMT 2009,
					Sat Feb 07 13:58:59 GMT 2009,
					Sat Feb 07 13:58:59 GMT 2009,
					2009-02-07 13:58:59.0,
					Sat Feb 07 13:58:59 GMT 2009,
					Sat Feb 07 13:58:59 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.1659664"
                  expectedOutput="Sat Feb 07 13:58:59 GMT 2009,
					2009-02-07 13:58:59.0,
					Sat Feb 07 13:58:59 GMT 2009,
					Sat Feb 07 13:58:59 GMT 2009,
					Sat Feb 07 13:58:59 GMT 2009,
					2009-02-07 13:58:59.0,
					Sat Feb 07 13:58:59 GMT 2009,
					Sat Feb 07 13:58:59 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16596643"
                  expectedOutput="Sat Feb 07 13:58:59 GMT 2009,
					2009-02-07 13:58:59.0,
					Sat Feb 07 13:58:59 GMT 2009,
					Sat Feb 07 13:58:59 GMT 2009,
					Sat Feb 07 13:58:59 GMT 2009,
					2009-02-07 13:58:59.0,
					Sat Feb 07 13:58:59 GMT 2009,
					Sat Feb 07 13:58:59 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16596644"
                  expectedOutput="Sat Feb 07 13:59:00 GMT 2009,
					2009-02-07 13:59:00.0,
					Sat Feb 07 13:59:00 GMT 2009,
					Sat Feb 07 13:59:00 GMT 2009,
					Sat Feb 07 13:59:00 GMT 2009,
					2009-02-07 13:59:00.0,
					Sat Feb 07 13:59:00 GMT 2009,
					Sat Feb 07 13:59:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.1659665"
                  expectedOutput="Sat Feb 07 13:59:00 GMT 2009,
					2009-02-07 13:59:00.0,
					Sat Feb 07 13:59:00 GMT 2009,
					Sat Feb 07 13:59:00 GMT 2009,
					Sat Feb 07 13:59:00 GMT 2009,
					2009-02-07 13:59:00.0,
					Sat Feb 07 13:59:00 GMT 2009,
					Sat Feb 07 13:59:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16597"
                  expectedOutput="Sat Feb 07 13:59:00 GMT 2009,
					2009-02-07 13:59:00.0,
					Sat Feb 07 13:59:00 GMT 2009,
					Sat Feb 07 13:59:00 GMT 2009,
					Sat Feb 07 13:59:00 GMT 2009,
					2009-02-07 13:59:00.0,
					Sat Feb 07 13:59:00 GMT 2009,
					Sat Feb 07 13:59:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,100.16597"
                  expectedOutput="Mon May 18 13:59:00 GMT 2009,
					2009-05-18 13:59:00.0,
					Mon May 18 13:59:00 GMT 2009,
					Mon May 18 13:59:00 GMT 2009,
					Mon May 18 13:59:00 GMT 2009,
					2009-05-18 13:59:00.0,
					Mon May 18 13:59:00 GMT 2009,
					Mon May 18 13:59:00 GMT 2009"/>
    </testcase>
    <testcase testName="testAddDateTimeGivingDateValue"
              fieldName="testAddDateTimeGivingDateValue"
              dataType="DateOnly"
              formula="DateValue(customdatetime1__c+customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="2004:12:31:11:32:00,3.00"
                  expectedOutput="Mon Jan 03 00:00:00 GMT 2005,
					2005-01-03 00:00:00.0,
					Mon Jan 03 00:00:00 GMT 2005,
					Mon Jan 03 00:00:00 GMT 2005,
					Mon Jan 03 00:00:00 GMT 2005,
					2005-01-03 00:00:00.0,
					Mon Jan 03 00:00:00 GMT 2005,
					Mon Jan 03 00:00:00 GMT 2005"/>
        <testData input="2004:02:28:10:34:00,4.00"
                  expectedOutput="Wed Mar 03 00:00:00 GMT 2004,
					2004-03-03 00:00:00.0,
					Wed Mar 03 00:00:00 GMT 2004,
					Wed Mar 03 00:00:00 GMT 2004,
					Wed Mar 03 00:00:00 GMT 2004,
					2004-03-03 00:00:00.0,
					Wed Mar 03 00:00:00 GMT 2004,
					Wed Mar 03 00:00:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,3.50"
                  expectedOutput="Mon Jan 03 00:00:00 GMT 2005,
					2005-01-03 00:00:00.0,
					Mon Jan 03 00:00:00 GMT 2005,
					Mon Jan 03 00:00:00 GMT 2005,
					Mon Jan 03 00:00:00 GMT 2005,
					2005-01-03 00:00:00.0,
					Mon Jan 03 00:00:00 GMT 2005,
					Mon Jan 03 00:00:00 GMT 2005"/>
        <testData input="2004:02:28:10:34:00,4.50"
                  expectedOutput="Wed Mar 03 00:00:00 GMT 2004,
					2004-03-03 00:00:00.0,
					Wed Mar 03 00:00:00 GMT 2004,
					Wed Mar 03 00:00:00 GMT 2004,
					Wed Mar 03 00:00:00 GMT 2004,
					2004-03-03 00:00:00.0,
					Wed Mar 03 00:00:00 GMT 2004,
					Wed Mar 03 00:00:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,3.10"
                  expectedOutput="Mon Jan 03 00:00:00 GMT 2005,
					2005-01-03 00:00:00.0,
					Mon Jan 03 00:00:00 GMT 2005,
					Mon Jan 03 00:00:00 GMT 2005,
					Mon Jan 03 00:00:00 GMT 2005,
					2005-01-03 00:00:00.0,
					Mon Jan 03 00:00:00 GMT 2005,
					Mon Jan 03 00:00:00 GMT 2005"/>
        <testData input="2004:02:28:10:34:00,4.10"
                  expectedOutput="Wed Mar 03 00:00:00 GMT 2004,
					2004-03-03 00:00:00.0,
					Wed Mar 03 00:00:00 GMT 2004,
					Wed Mar 03 00:00:00 GMT 2004,
					Wed Mar 03 00:00:00 GMT 2004,
					2004-03-03 00:00:00.0,
					Wed Mar 03 00:00:00 GMT 2004,
					Wed Mar 03 00:00:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,3.60"
                  expectedOutput="Tue Jan 04 00:00:00 GMT 2005,
					2005-01-04 00:00:00.0,
					Tue Jan 04 00:00:00 GMT 2005,
					Tue Jan 04 00:00:00 GMT 2005,
					Tue Jan 04 00:00:00 GMT 2005,
					2005-01-04 00:00:00.0,
					Tue Jan 04 00:00:00 GMT 2005,
					Tue Jan 04 00:00:00 GMT 2005"/>
        <testData input="2004:02:28:10:34:00,4.60"
                  expectedOutput="Thu Mar 04 00:00:00 GMT 2004,
					2004-03-04 00:00:00.0,
					Thu Mar 04 00:00:00 GMT 2004,
					Thu Mar 04 00:00:00 GMT 2004,
					Thu Mar 04 00:00:00 GMT 2004,
					2004-03-04 00:00:00.0,
					Thu Mar 04 00:00:00 GMT 2004,
					Thu Mar 04 00:00:00 GMT 2004"/>
        <testData input="2004:12:31:23:32:00,0.50"
                  expectedOutput="Sat Jan 01 00:00:00 GMT 2005,
					2005-01-01 00:00:00.0,
					Sat Jan 01 00:00:00 GMT 2005,
					Sat Jan 01 00:00:00 GMT 2005,
					Sat Jan 01 00:00:00 GMT 2005,
					2005-01-01 00:00:00.0,
					Sat Jan 01 00:00:00 GMT 2005,
					Sat Jan 01 00:00:00 GMT 2005"/>
        <testData input="2004:02:28:23:34:00,0.40"
                  expectedOutput="Sun Feb 29 00:00:00 GMT 2004,
					2004-02-29 00:00:00.0,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004,
					2004-02-29 00:00:00.0,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004"/>
        <testData input="2004:02:28:23:34:00,1.00"
                  expectedOutput="Sun Feb 29 00:00:00 GMT 2004,
					2004-02-29 00:00:00.0,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004,
					2004-02-29 00:00:00.0,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004"/>
        <testData input="2004:02:28:01:34:00,1.00"
                  expectedOutput="Sun Feb 29 00:00:00 GMT 2004,
					2004-02-29 00:00:00.0,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004,
					2004-02-29 00:00:00.0,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004"/>
        <testData input="2004:02:28:23:34:00:PST,1.00"
                  expectedOutput="Mon Mar 01 00:00:00 GMT 2004,
					2004-03-01 00:00:00.0,
					Mon Mar 01 00:00:00 GMT 2004,
					Mon Mar 01 00:00:00 GMT 2004,
					Mon Mar 01 00:00:00 GMT 2004,
					2004-03-01 00:00:00.0,
					Mon Mar 01 00:00:00 GMT 2004,
					Mon Mar 01 00:00:00 GMT 2004"/>
        <testData input="2004:02:29:07:34:00:GMT,1.00"
                  expectedOutput="Mon Mar 01 00:00:00 GMT 2004,
					2004-03-01 00:00:00.0,
					Mon Mar 01 00:00:00 GMT 2004,
					Mon Mar 01 00:00:00 GMT 2004,
					Mon Mar 01 00:00:00 GMT 2004,
					2004-03-01 00:00:00.0,
					Mon Mar 01 00:00:00 GMT 2004,
					Mon Mar 01 00:00:00 GMT 2004"/>
        <testData input="2004:02:28:01:34:00:PST,1.00"
                  expectedOutput="Sun Feb 29 00:00:00 GMT 2004,
					2004-02-29 00:00:00.0,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004,
					2004-02-29 00:00:00.0,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004"/>
        <testData input="2009:02:07:10:00:00,0.16666"
                  expectedOutput="Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.166666"
                  expectedOutput="Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16596"
                  expectedOutput="Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.1659664"
                  expectedOutput="Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16596643"
                  expectedOutput="Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16596644"
                  expectedOutput="Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.1659665"
                  expectedOutput="Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16597"
                  expectedOutput="Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,100.16597"
                  expectedOutput="Mon May 18 00:00:00 GMT 2009,
					2009-05-18 00:00:00.0,
					Mon May 18 00:00:00 GMT 2009,
					Mon May 18 00:00:00 GMT 2009,
					Mon May 18 00:00:00 GMT 2009,
					2009-05-18 00:00:00.0,
					Mon May 18 00:00:00 GMT 2009,
					Mon May 18 00:00:00 GMT 2009"/>
    </testcase>
    <testcase testName="testAddDateTimeWithExpr"
              fieldName="testAddDateTimeWithExpr"
              dataType="DateTime"
              formula="(customformula0__c+custompercent2__c+customformula1__c+LEN(customtext1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customformula0"
                        dataType="DateTime"
                        formula="(customdatetime1__c+custompercent1__c)">
            <referenceField fieldName="customdatetime1" dataType="DateTime"/>
            <referenceField fieldName="custompercent1" dataType="Percent"/>
        </referenceField>
        <referenceField fieldName="custompercent2" dataType="Percent"/>
        <referenceField fieldName="customformula1"
                        dataType="Double"
                        formula="(customdatetime2__c-customdatetime3__c)">
            <referenceField fieldName="customdatetime2" dataType="DateTime"/>
            <referenceField fieldName="customdatetime3" dataType="DateTime"/>
        </referenceField>
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="3998:01:31:23:00:00,200,10,3999:12:31:00:00:00,3999:12:01:00:00:00,thisistext"
                  expectedOutput="Sun Mar 15 01:24:00 GMT 3998,
					3998-03-15 01:24:00.0,
					Sun Mar 15 01:24:00 GMT 3998,
					Sun Mar 15 01:24:00 GMT 3998,
					Sun Mar 15 01:24:00 GMT 3998,
					3998-03-15 01:24:00.0,
					Sun Mar 15 01:24:00 GMT 3998,
					Sun Mar 15 01:24:00 GMT 3998"/>
        <testData input="1900:01:01:12:00:00,.004,1,2004:12:31:12:00:00,2004:12:31:12:00:00,thisisnottext"
                  expectedOutput="Sun Jan 14 12:14:27 GMT 1900,
					1900-01-14 12:14:27.0,
					Sun Jan 14 12:14:27 GMT 1900,
					Sun Jan 14 12:14:27 GMT 1900,
					Sun Jan 14 12:14:27 GMT 1900,
					1900-01-14 12:14:27.0,
					Sun Jan 14 12:14:27 GMT 1900,
					Sun Jan 14 12:14:27 GMT 1900"/>
        <testData input=",100,,2004:11:31:13:00:00,2004:12:31:13:00:00,works"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",100,,,2004:12:31:14:00:00,doesnotwork"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:31:23:00:00,,,2004:11:31:24:00:00,2004:12:31:14:00:00,flipping"
                  expectedOutput="Fri Dec 10 09:00:00 GMT 2004,
					2004-12-10 09:00:00.0,
					Fri Dec 10 09:00:00 GMT 2004,
					Fri Dec 10 09:00:00 GMT 2004,
					null,
					null,
					null,
					null"/>
        <testData input=",100,,2004:11:31:00:00:00,,not flipping"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testSubDate"
              fieldName="testSubDate"
              dataType="Double"
              formula="(customdate1__c-customdate2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <testData input="2004:12:31,2004:12:01"
                  expectedOutput="30,
					30,
					30,
					30,
					30,
					30,
					30,
					30"/>
        <testData input="2004:02:28,2003:12:21"
                  expectedOutput="69,
					69,
					69,
					69,
					69,
					69,
					69,
					69"/>
        <testData input="2004:02:27,2003:02:27"
                  expectedOutput="365,
					365,
					365,
					365,
					365,
					365,
					365,
					365"/>
        <testData input="2004:02:28,2005:02:28"
                  expectedOutput="-366,
					-366,
					-366,
					-366,
					-366,
					-366,
					-366,
					-366"/>
        <testData input="2004:02:27,2004:03:27"
                  expectedOutput="-29,
					-29,
					-29,
					-29,
					-29,
					-29,
					-29,
					-29"/>
        <testData input="1900:02:27,1901:02:27"
                  expectedOutput="-365,
					-365,
					-365,
					-365,
					-365,
					-365,
					-365,
					-365"/>
        <testData input="3998:02:27,2997:02:27"
                  expectedOutput="365607,
					365607,
					365607,
					365607,
					365607,
					365607,
					365607,
					365607"/>
        <testData input="1999:12:31,2000:01:01"
                  expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="1999:12:31,2000:01:01"
                  expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
    </testcase>
    <testcase testName="testSubDateTime"
              fieldName="testSubDateTime"
              dataType="Double"
              formula="(customdatetime1__c-customdatetime2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customdatetime2" dataType="DateTime"/>
        <testData input="2004:12:31:11:00:00,2004:12:25:11:00:00"
                  expectedOutput="6,
					6,
					6,
					6,
					6,
					6,
					6,
					6"/>
        <testData input="2004:02:28:11:00:00,2004:02:27:02:00:00"
                  expectedOutput="1.375,
					1.375,
					1.375,
					1.375,
					1.375,
					1.375,
					1.375,
					1.375"/>
        <testData input="2004:12:31:11:00:00,2005:01:01:11:00:00"
                  expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="2004:02:28:11:00:00,2004:03:01:02:00:00"
                  expectedOutput="-1.625,
					-1.625,
					-1.625,
					-1.625,
					-1.625,
					-1.625,
					-1.625,
					-1.625"/>
        <testData input="2004:12:31:11:30:00,2004:12:31:11:00:00"
                  expectedOutput="0.02083333333333333333333333333333,
					0.02083333333333333333,
					0.020833333333333332,
					0.0208333,
					0.02083333333333333333333333333333,
					0.02083333333333333333,
					0.020833333333333332,
					0.0208333"/>
        <testData input="2004:02:28:23:30:00,2004:02:28:24:00:00"
                  expectedOutput="-0.02083333333333333333333333333333,
					-0.02083333333333333333,
					-0.020833333333333332,
					-0.0208333,
					-0.02083333333333333333333333333333,
					-0.02083333333333333333,
					-0.020833333333333332,
					-0.0208333"/>
    </testcase>
    <testcase testName="testSubDateTimeCorners1"
              fieldName="testSubDateTimeCorners1"
              dataType="Double"
              formula="(floor((customdatetime1__c-customdatetime2__c)*1440*60))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customdatetime2" dataType="DateTime"/>
        <testData input="2004:12:31:11:01:00,2004:12:31:11:00:00"
                  expectedOutput="60,
					59,
					60,
					60,
					60,
					59,
					60,
					60"/>
        <testData input="2004:12:31:11:01:00,2004:12:31:09:00:00"
                  expectedOutput="7260,
					7260,
					7260,
					7260,
					7260,
					7260,
					7260,
					7260"/>
        <testData input="2004:12:31:11:01:00,2004:12:30:11:00:00"
                  expectedOutput="86460,
					86459,
					86460,
					86460,
					86460,
					86459,
					86460,
					86460"/>
        <testData input="2004:12:31:11:01:00,2004:12:20:11:00:00"
                  expectedOutput="950460,
					950459,
					950460,
					950460,
					950460,
					950459,
					950460,
					950460"/>
        <testData input="2004:12:31:12:00:00,2004:12:30:11:00:00"
                  expectedOutput="90000,
					90000,
					90000,
					90000,
					90000,
					90000,
					90000,
					90000"/>
        <testData input="2004:12:31:12:00:01,2004:12:30:12:00:00"
                  expectedOutput="86401,
					86400,
					86400,
					86401,
					86401,
					86400,
					86400,
					86401"/>
    </testcase>
    <testcase testName="testSubDateTimeCorners2"
              fieldName="testSubDateTimeCorners2"
              dataType="Double"
              formula="(ceiling((customdatetime1__c-customdatetime2__c)*1440*60))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customdatetime2" dataType="DateTime"/>
        <testData input="2004:12:31:11:01:00,2004:12:31:11:00:00"
                  expectedOutput="60,
					60,
					61,
					60,
					60,
					60,
					61,
					60"/>
        <testData input="2004:12:31:11:01:00,2004:12:31:09:00:00"
                  expectedOutput="7260,
					7261,
					7261,
					7261,
					7260,
					7261,
					7261,
					7261"/>
        <testData input="2004:12:31:11:01:00,2004:12:30:11:00:00"
                  expectedOutput="86460,
					86460,
					86461,
					86461,
					86460,
					86460,
					86461,
					86461"/>
        <testData input="2004:12:31:11:01:00,2004:12:20:11:00:00"
                  expectedOutput="950460,
					950460,
					950461,
					950460,
					950460,
					950460,
					950461,
					950460"/>
        <testData input="2004:12:31:12:00:00,2004:12:30:11:00:00"
                  expectedOutput="90000,
					90001,
					90001,
					90000,
					90000,
					90001,
					90001,
					90000"/>
        <testData input="2004:12:31:12:00:01,2004:12:30:12:00:00"
                  expectedOutput="86401,
					86401,
					86401,
					86401,
					86401,
					86401,
					86401,
					86401"/>
    </testcase>
    <testcase testName="testSubDateTimeGivingDateTime"
              fieldName="testSubDateTimeGivingDate"
              dataType="DateTime"
              formula="(customdatetime1__c-customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="2004:12:31:11:32:00,3.00"
                  expectedOutput="Tue Dec 28 11:32:00 GMT 2004,
					2004-12-28 11:32:00.0,
					Tue Dec 28 11:32:00 GMT 2004,
					Tue Dec 28 11:32:00 GMT 2004,
					Tue Dec 28 11:32:00 GMT 2004,
					2004-12-28 11:32:00.0,
					Tue Dec 28 11:32:00 GMT 2004,
					Tue Dec 28 11:32:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,4.00"
                  expectedOutput="Tue Feb 24 10:34:00 GMT 2004,
					2004-02-24 10:34:00.0,
					Tue Feb 24 10:34:00 GMT 2004,
					Tue Feb 24 10:34:00 GMT 2004,
					Tue Feb 24 10:34:00 GMT 2004,
					2004-02-24 10:34:00.0,
					Tue Feb 24 10:34:00 GMT 2004,
					Tue Feb 24 10:34:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,3.50"
                  expectedOutput="Mon Dec 27 23:32:00 GMT 2004,
					2004-12-27 23:32:00.0,
					Mon Dec 27 23:32:00 GMT 2004,
					Mon Dec 27 23:32:00 GMT 2004,
					Mon Dec 27 23:32:00 GMT 2004,
					2004-12-27 23:32:00.0,
					Mon Dec 27 23:32:00 GMT 2004,
					Mon Dec 27 23:32:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,4.50"
                  expectedOutput="Mon Feb 23 22:34:00 GMT 2004,
					2004-02-23 22:34:00.0,
					Mon Feb 23 22:34:00 GMT 2004,
					Mon Feb 23 22:34:00 GMT 2004,
					Mon Feb 23 22:34:00 GMT 2004,
					2004-02-23 22:34:00.0,
					Mon Feb 23 22:34:00 GMT 2004,
					Mon Feb 23 22:34:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,3.10"
                  expectedOutput="Tue Dec 28 09:08:00 GMT 2004,
					2004-12-28 09:08:00.0,
					Tue Dec 28 09:08:00 GMT 2004,
					Tue Dec 28 09:08:00 GMT 2004,
					Tue Dec 28 09:08:00 GMT 2004,
					2004-12-28 09:08:00.0,
					Tue Dec 28 09:08:00 GMT 2004,
					Tue Dec 28 09:08:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,4.10"
                  expectedOutput="Tue Feb 24 08:10:00 GMT 2004,
					2004-02-24 08:10:00.0,
					Tue Feb 24 08:10:00 GMT 2004,
					Tue Feb 24 08:10:00 GMT 2004,
					Tue Feb 24 08:10:00 GMT 2004,
					2004-02-24 08:10:00.0,
					Tue Feb 24 08:10:00 GMT 2004,
					Tue Feb 24 08:10:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,3.60"
                  expectedOutput="Mon Dec 27 21:08:00 GMT 2004,
					2004-12-27 21:08:00.0,
					Mon Dec 27 21:08:00 GMT 2004,
					Mon Dec 27 21:08:00 GMT 2004,
					Mon Dec 27 21:08:00 GMT 2004,
					2004-12-27 21:08:00.0,
					Mon Dec 27 21:08:00 GMT 2004,
					Mon Dec 27 21:08:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,4.60"
                  expectedOutput="Mon Feb 23 20:10:00 GMT 2004,
					2004-02-23 20:10:00.0,
					Mon Feb 23 20:10:00 GMT 2004,
					Mon Feb 23 20:10:00 GMT 2004,
					Mon Feb 23 20:10:00 GMT 2004,
					2004-02-23 20:10:00.0,
					Mon Feb 23 20:10:00 GMT 2004,
					Mon Feb 23 20:10:00 GMT 2004"/>
        <testData input="2004:12:31:23:32:00,0.50"
                  expectedOutput="Fri Dec 31 11:32:00 GMT 2004,
					2004-12-31 11:32:00.0,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004,
					2004-12-31 11:32:00.0,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004"/>
        <testData input="2004:02:28:23:34:00,0.40"
                  expectedOutput="Sat Feb 28 13:58:00 GMT 2004,
					2004-02-28 13:58:00.0,
					Sat Feb 28 13:58:00 GMT 2004,
					Sat Feb 28 13:58:00 GMT 2004,
					Sat Feb 28 13:58:00 GMT 2004,
					2004-02-28 13:58:00.0,
					Sat Feb 28 13:58:00 GMT 2004,
					Sat Feb 28 13:58:00 GMT 2004"/>
        <testData input="2004:02:28:23:34:00,1.00"
                  expectedOutput="Fri Feb 27 23:34:00 GMT 2004,
					2004-02-27 23:34:00.0,
					Fri Feb 27 23:34:00 GMT 2004,
					Fri Feb 27 23:34:00 GMT 2004,
					Fri Feb 27 23:34:00 GMT 2004,
					2004-02-27 23:34:00.0,
					Fri Feb 27 23:34:00 GMT 2004,
					Fri Feb 27 23:34:00 GMT 2004"/>
        <testData input="2004:02:28:01:34:00,1.00"
                  expectedOutput="Fri Feb 27 01:34:00 GMT 2004,
					2004-02-27 01:34:00.0,
					Fri Feb 27 01:34:00 GMT 2004,
					Fri Feb 27 01:34:00 GMT 2004,
					Fri Feb 27 01:34:00 GMT 2004,
					2004-02-27 01:34:00.0,
					Fri Feb 27 01:34:00 GMT 2004,
					Fri Feb 27 01:34:00 GMT 2004"/>
        <testData input="2004:02:28:23:34:00:PST,1.00"
                  expectedOutput="Sat Feb 28 07:34:00 GMT 2004,
					2004-02-28 07:34:00.0,
					Sat Feb 28 07:34:00 GMT 2004,
					Sat Feb 28 07:34:00 GMT 2004,
					Sat Feb 28 07:34:00 GMT 2004,
					2004-02-28 07:34:00.0,
					Sat Feb 28 07:34:00 GMT 2004,
					Sat Feb 28 07:34:00 GMT 2004"/>
        <testData input="2004:02:29:07:34:00:GMT,1.00"
                  expectedOutput="Sat Feb 28 07:34:00 GMT 2004,
					2004-02-28 07:34:00.0,
					Sat Feb 28 07:34:00 GMT 2004,
					Sat Feb 28 07:34:00 GMT 2004,
					Sat Feb 28 07:34:00 GMT 2004,
					2004-02-28 07:34:00.0,
					Sat Feb 28 07:34:00 GMT 2004,
					Sat Feb 28 07:34:00 GMT 2004"/>
        <testData input="2004:02:28:01:34:00:PST,1.00"
                  expectedOutput="Fri Feb 27 09:34:00 GMT 2004,
					2004-02-27 09:34:00.0,
					Fri Feb 27 09:34:00 GMT 2004,
					Fri Feb 27 09:34:00 GMT 2004,
					Fri Feb 27 09:34:00 GMT 2004,
					2004-02-27 09:34:00.0,
					Fri Feb 27 09:34:00 GMT 2004,
					Fri Feb 27 09:34:00 GMT 2004"/>
        <testData input="2009:02:07:10:00:00,0.16666"
                  expectedOutput="Sat Feb 07 06:00:01 GMT 2009,
					2009-02-07 06:00:01.0,
					Sat Feb 07 06:00:01 GMT 2009,
					Sat Feb 07 06:00:01 GMT 2009,
					Sat Feb 07 06:00:01 GMT 2009,
					2009-02-07 06:00:01.0,
					Sat Feb 07 06:00:01 GMT 2009,
					Sat Feb 07 06:00:01 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.166666"
                  expectedOutput="Sat Feb 07 06:00:00 GMT 2009,
					2009-02-07 06:00:00.0,
					Sat Feb 07 06:00:00 GMT 2009,
					Sat Feb 07 06:00:00 GMT 2009,
					Sat Feb 07 06:00:00 GMT 2009,
					2009-02-07 06:00:00.0,
					Sat Feb 07 06:00:00 GMT 2009,
					Sat Feb 07 06:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16596"
                  expectedOutput="Sat Feb 07 06:01:01 GMT 2009,
					2009-02-07 06:01:01.0,
					Sat Feb 07 06:01:01 GMT 2009,
					Sat Feb 07 06:01:01 GMT 2009,
					Sat Feb 07 06:01:01 GMT 2009,
					2009-02-07 06:01:01.0,
					Sat Feb 07 06:01:01 GMT 2009,
					Sat Feb 07 06:01:01 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.1659664"
                  expectedOutput="Sat Feb 07 06:01:01 GMT 2009,
					2009-02-07 06:01:01.0,
					Sat Feb 07 06:01:01 GMT 2009,
					Sat Feb 07 06:01:01 GMT 2009,
					Sat Feb 07 06:01:01 GMT 2009,
					2009-02-07 06:01:01.0,
					Sat Feb 07 06:01:01 GMT 2009,
					Sat Feb 07 06:01:01 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16596643"
                  expectedOutput="Sat Feb 07 06:01:01 GMT 2009,
					2009-02-07 06:01:01.0,
					Sat Feb 07 06:01:01 GMT 2009,
					Sat Feb 07 06:01:01 GMT 2009,
					Sat Feb 07 06:01:01 GMT 2009,
					2009-02-07 06:01:01.0,
					Sat Feb 07 06:01:01 GMT 2009,
					Sat Feb 07 06:01:01 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16596644"
                  expectedOutput="Sat Feb 07 06:01:00 GMT 2009,
					2009-02-07 06:01:00.0,
					Sat Feb 07 06:01:00 GMT 2009,
					Sat Feb 07 06:01:00 GMT 2009,
					Sat Feb 07 06:01:00 GMT 2009,
					2009-02-07 06:01:00.0,
					Sat Feb 07 06:01:00 GMT 2009,
					Sat Feb 07 06:01:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.1659665"
                  expectedOutput="Sat Feb 07 06:01:00 GMT 2009,
					2009-02-07 06:01:00.0,
					Sat Feb 07 06:01:00 GMT 2009,
					Sat Feb 07 06:01:00 GMT 2009,
					Sat Feb 07 06:01:00 GMT 2009,
					2009-02-07 06:01:00.0,
					Sat Feb 07 06:01:00 GMT 2009,
					Sat Feb 07 06:01:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16597"
                  expectedOutput="Sat Feb 07 06:01:00 GMT 2009,
					2009-02-07 06:01:00.0,
					Sat Feb 07 06:01:00 GMT 2009,
					Sat Feb 07 06:01:00 GMT 2009,
					Sat Feb 07 06:01:00 GMT 2009,
					2009-02-07 06:01:00.0,
					Sat Feb 07 06:01:00 GMT 2009,
					Sat Feb 07 06:01:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,100.16597"
                  expectedOutput="Thu Oct 30 06:01:00 GMT 2008,
					2008-10-30 06:01:00.0,
					Thu Oct 30 06:01:00 GMT 2008,
					Thu Oct 30 06:01:00 GMT 2008,
					Thu Oct 30 06:01:00 GMT 2008,
					2008-10-30 06:01:00.0,
					Thu Oct 30 06:01:00 GMT 2008,
					Thu Oct 30 06:01:00 GMT 2008"/>
    </testcase>
    <testcase testName="testSubDateTimeGivingDate"
              fieldName="testSubDateTimeGivingDate"
              dataType="DateOnly"
              formula="(customdatetime1__c-customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="2004:12:31:11:32:00,3.00"
                  expectedOutput="Tue Dec 28 11:32:00 GMT 2004,
					2004-12-28 11:32:00.0,
					Tue Dec 28 11:32:00 GMT 2004,
					Tue Dec 28 11:32:00 GMT 2004,
					Tue Dec 28 11:32:00 GMT 2004,
					2004-12-28 11:32:00.0,
					Tue Dec 28 11:32:00 GMT 2004,
					Tue Dec 28 11:32:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,4.00"
                  expectedOutput="Tue Feb 24 10:34:00 GMT 2004,
					2004-02-24 10:34:00.0,
					Tue Feb 24 10:34:00 GMT 2004,
					Tue Feb 24 10:34:00 GMT 2004,
					Tue Feb 24 10:34:00 GMT 2004,
					2004-02-24 10:34:00.0,
					Tue Feb 24 10:34:00 GMT 2004,
					Tue Feb 24 10:34:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,3.50"
                  expectedOutput="Mon Dec 27 23:32:00 GMT 2004,
					2004-12-27 23:32:00.0,
					Mon Dec 27 23:32:00 GMT 2004,
					Mon Dec 27 23:32:00 GMT 2004,
					Mon Dec 27 23:32:00 GMT 2004,
					2004-12-27 23:32:00.0,
					Mon Dec 27 23:32:00 GMT 2004,
					Mon Dec 27 23:32:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,4.50"
                  expectedOutput="Mon Feb 23 22:34:00 GMT 2004,
					2004-02-23 22:34:00.0,
					Mon Feb 23 22:34:00 GMT 2004,
					Mon Feb 23 22:34:00 GMT 2004,
					Mon Feb 23 22:34:00 GMT 2004,
					2004-02-23 22:34:00.0,
					Mon Feb 23 22:34:00 GMT 2004,
					Mon Feb 23 22:34:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,3.10"
                  expectedOutput="Tue Dec 28 09:08:00 GMT 2004,
					2004-12-28 09:08:00.0,
					Tue Dec 28 09:08:00 GMT 2004,
					Tue Dec 28 09:08:00 GMT 2004,
					Tue Dec 28 09:08:00 GMT 2004,
					2004-12-28 09:08:00.0,
					Tue Dec 28 09:08:00 GMT 2004,
					Tue Dec 28 09:08:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,4.10"
                  expectedOutput="Tue Feb 24 08:10:00 GMT 2004,
					2004-02-24 08:10:00.0,
					Tue Feb 24 08:10:00 GMT 2004,
					Tue Feb 24 08:10:00 GMT 2004,
					Tue Feb 24 08:10:00 GMT 2004,
					2004-02-24 08:10:00.0,
					Tue Feb 24 08:10:00 GMT 2004,
					Tue Feb 24 08:10:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,3.60"
                  expectedOutput="Mon Dec 27 21:08:00 GMT 2004,
					2004-12-27 21:08:00.0,
					Mon Dec 27 21:08:00 GMT 2004,
					Mon Dec 27 21:08:00 GMT 2004,
					Mon Dec 27 21:08:00 GMT 2004,
					2004-12-27 21:08:00.0,
					Mon Dec 27 21:08:00 GMT 2004,
					Mon Dec 27 21:08:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,4.60"
                  expectedOutput="Mon Feb 23 20:10:00 GMT 2004,
					2004-02-23 20:10:00.0,
					Mon Feb 23 20:10:00 GMT 2004,
					Mon Feb 23 20:10:00 GMT 2004,
					Mon Feb 23 20:10:00 GMT 2004,
					2004-02-23 20:10:00.0,
					Mon Feb 23 20:10:00 GMT 2004,
					Mon Feb 23 20:10:00 GMT 2004"/>
        <testData input="2004:12:31:23:32:00,0.50"
                  expectedOutput="Fri Dec 31 11:32:00 GMT 2004,
					2004-12-31 11:32:00.0,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004,
					2004-12-31 11:32:00.0,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004"/>
        <testData input="2004:02:28:23:34:00,0.40"
                  expectedOutput="Sat Feb 28 13:58:00 GMT 2004,
					2004-02-28 13:58:00.0,
					Sat Feb 28 13:58:00 GMT 2004,
					Sat Feb 28 13:58:00 GMT 2004,
					Sat Feb 28 13:58:00 GMT 2004,
					2004-02-28 13:58:00.0,
					Sat Feb 28 13:58:00 GMT 2004,
					Sat Feb 28 13:58:00 GMT 2004"/>
        <testData input="2004:02:28:23:34:00,1.00"
                  expectedOutput="Fri Feb 27 23:34:00 GMT 2004,
					2004-02-27 23:34:00.0,
					Fri Feb 27 23:34:00 GMT 2004,
					Fri Feb 27 23:34:00 GMT 2004,
					Fri Feb 27 23:34:00 GMT 2004,
					2004-02-27 23:34:00.0,
					Fri Feb 27 23:34:00 GMT 2004,
					Fri Feb 27 23:34:00 GMT 2004"/>
        <testData input="2004:02:28:01:34:00,1.00"
                  expectedOutput="Fri Feb 27 01:34:00 GMT 2004,
					2004-02-27 01:34:00.0,
					Fri Feb 27 01:34:00 GMT 2004,
					Fri Feb 27 01:34:00 GMT 2004,
					Fri Feb 27 01:34:00 GMT 2004,
					2004-02-27 01:34:00.0,
					Fri Feb 27 01:34:00 GMT 2004,
					Fri Feb 27 01:34:00 GMT 2004"/>
        <testData input="2004:02:28:23:34:00:PST,1.00"
                  expectedOutput="Sat Feb 28 07:34:00 GMT 2004,
					2004-02-28 07:34:00.0,
					Sat Feb 28 07:34:00 GMT 2004,
					Sat Feb 28 07:34:00 GMT 2004,
					Sat Feb 28 07:34:00 GMT 2004,
					2004-02-28 07:34:00.0,
					Sat Feb 28 07:34:00 GMT 2004,
					Sat Feb 28 07:34:00 GMT 2004"/>
        <testData input="2004:02:29:07:34:00:GMT,1.00"
                  expectedOutput="Sat Feb 28 07:34:00 GMT 2004,
					2004-02-28 07:34:00.0,
					Sat Feb 28 07:34:00 GMT 2004,
					Sat Feb 28 07:34:00 GMT 2004,
					Sat Feb 28 07:34:00 GMT 2004,
					2004-02-28 07:34:00.0,
					Sat Feb 28 07:34:00 GMT 2004,
					Sat Feb 28 07:34:00 GMT 2004"/>
        <testData input="2004:02:28:01:34:00:PST,1.00"
                  expectedOutput="Fri Feb 27 09:34:00 GMT 2004,
					2004-02-27 09:34:00.0,
					Fri Feb 27 09:34:00 GMT 2004,
					Fri Feb 27 09:34:00 GMT 2004,
					Fri Feb 27 09:34:00 GMT 2004,
					2004-02-27 09:34:00.0,
					Fri Feb 27 09:34:00 GMT 2004,
					Fri Feb 27 09:34:00 GMT 2004"/>
        <testData input="2009:02:07:10:00:00,0.16666"
                  expectedOutput="Sat Feb 07 06:00:01 GMT 2009,
					2009-02-07 06:00:01.0,
					Sat Feb 07 06:00:01 GMT 2009,
					Sat Feb 07 06:00:01 GMT 2009,
					Sat Feb 07 06:00:01 GMT 2009,
					2009-02-07 06:00:01.0,
					Sat Feb 07 06:00:01 GMT 2009,
					Sat Feb 07 06:00:01 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.166666"
                  expectedOutput="Sat Feb 07 06:00:00 GMT 2009,
					2009-02-07 06:00:00.0,
					Sat Feb 07 06:00:00 GMT 2009,
					Sat Feb 07 06:00:00 GMT 2009,
					Sat Feb 07 06:00:00 GMT 2009,
					2009-02-07 06:00:00.0,
					Sat Feb 07 06:00:00 GMT 2009,
					Sat Feb 07 06:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16596"
                  expectedOutput="Sat Feb 07 06:01:01 GMT 2009,
					2009-02-07 06:01:01.0,
					Sat Feb 07 06:01:01 GMT 2009,
					Sat Feb 07 06:01:01 GMT 2009,
					Sat Feb 07 06:01:01 GMT 2009,
					2009-02-07 06:01:01.0,
					Sat Feb 07 06:01:01 GMT 2009,
					Sat Feb 07 06:01:01 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.1659664"
                  expectedOutput="Sat Feb 07 06:01:01 GMT 2009,
					2009-02-07 06:01:01.0,
					Sat Feb 07 06:01:01 GMT 2009,
					Sat Feb 07 06:01:01 GMT 2009,
					Sat Feb 07 06:01:01 GMT 2009,
					2009-02-07 06:01:01.0,
					Sat Feb 07 06:01:01 GMT 2009,
					Sat Feb 07 06:01:01 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16596643"
                  expectedOutput="Sat Feb 07 06:01:01 GMT 2009,
					2009-02-07 06:01:01.0,
					Sat Feb 07 06:01:01 GMT 2009,
					Sat Feb 07 06:01:01 GMT 2009,
					Sat Feb 07 06:01:01 GMT 2009,
					2009-02-07 06:01:01.0,
					Sat Feb 07 06:01:01 GMT 2009,
					Sat Feb 07 06:01:01 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16596644"
                  expectedOutput="Sat Feb 07 06:01:00 GMT 2009,
					2009-02-07 06:01:00.0,
					Sat Feb 07 06:01:00 GMT 2009,
					Sat Feb 07 06:01:00 GMT 2009,
					Sat Feb 07 06:01:00 GMT 2009,
					2009-02-07 06:01:00.0,
					Sat Feb 07 06:01:00 GMT 2009,
					Sat Feb 07 06:01:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.1659665"
                  expectedOutput="Sat Feb 07 06:01:00 GMT 2009,
					2009-02-07 06:01:00.0,
					Sat Feb 07 06:01:00 GMT 2009,
					Sat Feb 07 06:01:00 GMT 2009,
					Sat Feb 07 06:01:00 GMT 2009,
					2009-02-07 06:01:00.0,
					Sat Feb 07 06:01:00 GMT 2009,
					Sat Feb 07 06:01:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16597"
                  expectedOutput="Sat Feb 07 06:01:00 GMT 2009,
					2009-02-07 06:01:00.0,
					Sat Feb 07 06:01:00 GMT 2009,
					Sat Feb 07 06:01:00 GMT 2009,
					Sat Feb 07 06:01:00 GMT 2009,
					2009-02-07 06:01:00.0,
					Sat Feb 07 06:01:00 GMT 2009,
					Sat Feb 07 06:01:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,100.16597"
                  expectedOutput="Thu Oct 30 06:01:00 GMT 2008,
					2008-10-30 06:01:00.0,
					Thu Oct 30 06:01:00 GMT 2008,
					Thu Oct 30 06:01:00 GMT 2008,
					Thu Oct 30 06:01:00 GMT 2008,
					2008-10-30 06:01:00.0,
					Thu Oct 30 06:01:00 GMT 2008,
					Thu Oct 30 06:01:00 GMT 2008"/>
    </testcase>
    <testcase testName="testSubDateTimeGivingDateValue"
              fieldName="testSubDateTimeGivingDateValue"
              dataType="DateOnly"
              formula="DateValue(customdatetime1__c-customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="2004:12:31:11:32:00,3.00"
                  expectedOutput="Tue Dec 28 00:00:00 GMT 2004,
					2004-12-28 00:00:00.0,
					Tue Dec 28 00:00:00 GMT 2004,
					Tue Dec 28 00:00:00 GMT 2004,
					Tue Dec 28 00:00:00 GMT 2004,
					2004-12-28 00:00:00.0,
					Tue Dec 28 00:00:00 GMT 2004,
					Tue Dec 28 00:00:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,4.00"
                  expectedOutput="Tue Feb 24 00:00:00 GMT 2004,
					2004-02-24 00:00:00.0,
					Tue Feb 24 00:00:00 GMT 2004,
					Tue Feb 24 00:00:00 GMT 2004,
					Tue Feb 24 00:00:00 GMT 2004,
					2004-02-24 00:00:00.0,
					Tue Feb 24 00:00:00 GMT 2004,
					Tue Feb 24 00:00:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,3.50"
                  expectedOutput="Mon Dec 27 00:00:00 GMT 2004,
					2004-12-27 00:00:00.0,
					Mon Dec 27 00:00:00 GMT 2004,
					Mon Dec 27 00:00:00 GMT 2004,
					Mon Dec 27 00:00:00 GMT 2004,
					2004-12-27 00:00:00.0,
					Mon Dec 27 00:00:00 GMT 2004,
					Mon Dec 27 00:00:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,4.50"
                  expectedOutput="Mon Feb 23 00:00:00 GMT 2004,
					2004-02-23 00:00:00.0,
					Mon Feb 23 00:00:00 GMT 2004,
					Mon Feb 23 00:00:00 GMT 2004,
					Mon Feb 23 00:00:00 GMT 2004,
					2004-02-23 00:00:00.0,
					Mon Feb 23 00:00:00 GMT 2004,
					Mon Feb 23 00:00:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,3.10"
                  expectedOutput="Tue Dec 28 00:00:00 GMT 2004,
					2004-12-28 00:00:00.0,
					Tue Dec 28 00:00:00 GMT 2004,
					Tue Dec 28 00:00:00 GMT 2004,
					Tue Dec 28 00:00:00 GMT 2004,
					2004-12-28 00:00:00.0,
					Tue Dec 28 00:00:00 GMT 2004,
					Tue Dec 28 00:00:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,4.10"
                  expectedOutput="Tue Feb 24 00:00:00 GMT 2004,
					2004-02-24 00:00:00.0,
					Tue Feb 24 00:00:00 GMT 2004,
					Tue Feb 24 00:00:00 GMT 2004,
					Tue Feb 24 00:00:00 GMT 2004,
					2004-02-24 00:00:00.0,
					Tue Feb 24 00:00:00 GMT 2004,
					Tue Feb 24 00:00:00 GMT 2004"/>
        <testData input="2004:12:31:11:32:00,3.60"
                  expectedOutput="Mon Dec 27 00:00:00 GMT 2004,
					2004-12-27 00:00:00.0,
					Mon Dec 27 00:00:00 GMT 2004,
					Mon Dec 27 00:00:00 GMT 2004,
					Mon Dec 27 00:00:00 GMT 2004,
					2004-12-27 00:00:00.0,
					Mon Dec 27 00:00:00 GMT 2004,
					Mon Dec 27 00:00:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,4.60"
                  expectedOutput="Mon Feb 23 00:00:00 GMT 2004,
					2004-02-23 00:00:00.0,
					Mon Feb 23 00:00:00 GMT 2004,
					Mon Feb 23 00:00:00 GMT 2004,
					Mon Feb 23 00:00:00 GMT 2004,
					2004-02-23 00:00:00.0,
					Mon Feb 23 00:00:00 GMT 2004,
					Mon Feb 23 00:00:00 GMT 2004"/>
        <testData input="2004:12:31:23:32:00,0.50"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004"/>
        <testData input="2004:02:28:23:34:00,0.40"
                  expectedOutput="Sat Feb 28 00:00:00 GMT 2004,
					2004-02-28 00:00:00.0,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004,
					2004-02-28 00:00:00.0,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004"/>
        <testData input="2004:02:28:23:34:00,1.00"
                  expectedOutput="Fri Feb 27 00:00:00 GMT 2004,
					2004-02-27 00:00:00.0,
					Fri Feb 27 00:00:00 GMT 2004,
					Fri Feb 27 00:00:00 GMT 2004,
					Fri Feb 27 00:00:00 GMT 2004,
					2004-02-27 00:00:00.0,
					Fri Feb 27 00:00:00 GMT 2004,
					Fri Feb 27 00:00:00 GMT 2004"/>
        <testData input="2004:02:28:01:34:00,1.00"
                  expectedOutput="Fri Feb 27 00:00:00 GMT 2004,
					2004-02-27 00:00:00.0,
					Fri Feb 27 00:00:00 GMT 2004,
					Fri Feb 27 00:00:00 GMT 2004,
					Fri Feb 27 00:00:00 GMT 2004,
					2004-02-27 00:00:00.0,
					Fri Feb 27 00:00:00 GMT 2004,
					Fri Feb 27 00:00:00 GMT 2004"/>
        <testData input="2004:02:28:23:34:00:PST,1.00"
                  expectedOutput="Sat Feb 28 00:00:00 GMT 2004,
					2004-02-28 00:00:00.0,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004,
					2004-02-28 00:00:00.0,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004"/>
        <testData input="2004:02:29:07:34:00:GMT,1.00"
                  expectedOutput="Sat Feb 28 00:00:00 GMT 2004,
					2004-02-28 00:00:00.0,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004,
					2004-02-28 00:00:00.0,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004"/>
        <testData input="2004:02:28:01:34:00:PST,1.00"
                  expectedOutput="Fri Feb 27 00:00:00 GMT 2004,
					2004-02-27 00:00:00.0,
					Fri Feb 27 00:00:00 GMT 2004,
					Fri Feb 27 00:00:00 GMT 2004,
					Fri Feb 27 00:00:00 GMT 2004,
					2004-02-27 00:00:00.0,
					Fri Feb 27 00:00:00 GMT 2004,
					Fri Feb 27 00:00:00 GMT 2004"/>
        <testData input="2009:02:07:10:00:00,0.16666"
                  expectedOutput="Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.166666"
                  expectedOutput="Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16596"
                  expectedOutput="Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.1659664"
                  expectedOutput="Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16596643"
                  expectedOutput="Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16596644"
                  expectedOutput="Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.1659665"
                  expectedOutput="Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,0.16597"
                  expectedOutput="Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009,
					2009-02-07 00:00:00.0,
					Sat Feb 07 00:00:00 GMT 2009,
					Sat Feb 07 00:00:00 GMT 2009"/>
        <testData input="2009:02:07:10:00:00,100.16597"
                  expectedOutput="Thu Oct 30 00:00:00 GMT 2008,
					2008-10-30 00:00:00.0,
					Thu Oct 30 00:00:00 GMT 2008,
					Thu Oct 30 00:00:00 GMT 2008,
					Thu Oct 30 00:00:00 GMT 2008,
					2008-10-30 00:00:00.0,
					Thu Oct 30 00:00:00 GMT 2008,
					Thu Oct 30 00:00:00 GMT 2008"/>
    </testcase>
    <testcase testName="testOriginDateTime"
              fieldName="testOriginDateTime"
              dataType="DateTime"
              formula="$System.originDateTime"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <testData expectedOutput="Mon Jan 01 00:00:00 GMT 1900,
					1900-01-01 00:00:00.0,
					Mon Jan 01 00:00:00 GMT 1900,
					Mon Jan 01 00:00:00 GMT 1900,
					Mon Jan 01 00:00:00 GMT 1900,
					1900-01-01 00:00:00.0,
					Mon Jan 01 00:00:00 GMT 1900,
					Mon Jan 01 00:00:00 GMT 1900"/>
    </testcase>
    <testcase testName="testDateTimeText"
              fieldName="testDateTimeText"
              dataType="Text"
              formula="Text(customdatetime1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <testData input="2004:12:31:11:32:00"
                  expectedOutput="2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z"/>
        <testData input="2004:02:28:10:34:00"
                  expectedOutput="2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z"/>
        <testData input="2004:12:31:11:32:00"
                  expectedOutput="2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z"/>
        <testData input="2004:02:28:10:34:00"
                  expectedOutput="2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z"/>
        <testData input="2004:12:31:11:32:00"
                  expectedOutput="2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z"/>
        <testData input="2004:02:28:10:34:00"
                  expectedOutput="2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z"/>
        <testData input="2004:12:31:11:32:00"
                  expectedOutput="2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z,
					2004-12-31 11:32:00Z"/>
        <testData input="2004:02:28:10:34:00"
                  expectedOutput="2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z,
					2004-02-28 10:34:00Z"/>
        <testData input="2004:12:31:23:32:00"
                  expectedOutput="2004-12-31 23:32:00Z,
					2004-12-31 23:32:00Z,
					2004-12-31 23:32:00Z,
					2004-12-31 23:32:00Z,
					2004-12-31 23:32:00Z,
					2004-12-31 23:32:00Z,
					2004-12-31 23:32:00Z,
					2004-12-31 23:32:00Z"/>
        <testData input="2004:02:28:23:34:00"
                  expectedOutput="2004-02-28 23:34:00Z,
					2004-02-28 23:34:00Z,
					2004-02-28 23:34:00Z,
					2004-02-28 23:34:00Z,
					2004-02-28 23:34:00Z,
					2004-02-28 23:34:00Z,
					2004-02-28 23:34:00Z,
					2004-02-28 23:34:00Z"/>
        <testData input="2004:02:28:23:34:00"
                  expectedOutput="2004-02-28 23:34:00Z,
					2004-02-28 23:34:00Z,
					2004-02-28 23:34:00Z,
					2004-02-28 23:34:00Z,
					2004-02-28 23:34:00Z,
					2004-02-28 23:34:00Z,
					2004-02-28 23:34:00Z,
					2004-02-28 23:34:00Z"/>
        <testData input="2004:02:28:01:34:00"
                  expectedOutput="2004-02-28 01:34:00Z,
					2004-02-28 01:34:00Z,
					2004-02-28 01:34:00Z,
					2004-02-28 01:34:00Z,
					2004-02-28 01:34:00Z,
					2004-02-28 01:34:00Z,
					2004-02-28 01:34:00Z,
					2004-02-28 01:34:00Z"/>
        <testData input="2004:02:28:23:34:00:PST"
                  expectedOutput="2004-02-29 07:34:00Z,
					2004-02-29 07:34:00Z,
					2004-02-29 07:34:00Z,
					2004-02-29 07:34:00Z,
					2004-02-29 07:34:00Z,
					2004-02-29 07:34:00Z,
					2004-02-29 07:34:00Z,
					2004-02-29 07:34:00Z"/>
        <testData input="2004:02:29:07:34:00:GMT"
                  expectedOutput="2004-02-29 07:34:00Z,
					2004-02-29 07:34:00Z,
					2004-02-29 07:34:00Z,
					2004-02-29 07:34:00Z,
					2004-02-29 07:34:00Z,
					2004-02-29 07:34:00Z,
					2004-02-29 07:34:00Z,
					2004-02-29 07:34:00Z"/>
        <testData input="2004:02:28:01:34:00:PST"
                  expectedOutput="2004-02-28 09:34:00Z,
					2004-02-28 09:34:00Z,
					2004-02-28 09:34:00Z,
					2004-02-28 09:34:00Z,
					2004-02-28 09:34:00Z,
					2004-02-28 09:34:00Z,
					2004-02-28 09:34:00Z,
					2004-02-28 09:34:00Z"/>
        <testData input="2009:02:07:10:00:00"
                  expectedOutput="2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z"/>
        <testData input="2009:02:07:10:00:00"
                  expectedOutput="2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z"/>
        <testData input="2009:02:07:10:00:00"
                  expectedOutput="2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z"/>
        <testData input="2009:02:07:10:00:00"
                  expectedOutput="2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z"/>
        <testData input="2009:02:07:10:00:00"
                  expectedOutput="2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z"/>
        <testData input="2009:02:07:10:00:00"
                  expectedOutput="2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z"/>
        <testData input="2009:02:07:10:00:00"
                  expectedOutput="2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z"/>
        <testData input="2009:02:07:10:00:00"
                  expectedOutput="2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z"/>
        <testData input="2009:02:07:10:00:00"
                  expectedOutput="2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z,
					2009-02-07 10:00:00Z"/>
    </testcase>
    <testcase testName="testMonths"
              fieldName="testMonths"
              dataType="Double"
              formula="month(customdate1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <testData input="2023:02:27" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
    </testcase>
    <testcase testName="testMultiplySimple"
              fieldName="testMultiplySimple"
              dataType="Double"
              formula="(customcurrency1__c*customcurrency2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <referenceField fieldName="customcurrency2" dataType="Currency"/>
        <testData input="20,40"
                  expectedOutput="800,
					800,
					800,
					800,
					800,
					800,
					800,
					800"/>
        <testData input="12.234, 46.456"
                  expectedOutput="568.342704,
					568.342704,
					568.342704,
					568.342704,
					568.342704,
					568.342704,
					568.342704,
					568.342704"/>
        <testData input="-200, -200"
                  expectedOutput="40000,
					40000,
					40000,
					40000,
					40000,
					40000,
					40000,
					40000"/>
        <testData input="0,
					0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123456789,123456789"
                  expectedOutput="15241578750190521,
					15241578750190521,
					15241578750190520,
					15241578750190520,
					15241578750190521,
					15241578750190521,
					15241578750190520,
					15241578750190520"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="15241578780673678.515622620750190521,
					15241578780673678.515622620750190521,
					15241578780673678,
					15241578780673680,
					15241578780673678.515622620750190521,
					15241578780673678.515622620750190521,
					15241578780673678,
					15241578780673680"/>
        <testData input="0.0024, 0.0050"
                  expectedOutput="0.00001200,
					0.000012,
					0.000012,
					0.000012,
					0.00001200,
					0.000012,
					0.000012,
					0.000012"/>
        <testData input="0.00000009, 0.000000009"
                  expectedOutput="0.00000000000000081,
					0.00000000000000081,
					8.1E-16,
					0,
					0.00000000000000081,
					0.00000000000000081,
					8.1E-16,
					0"/>
        <testData input="-1,
					-1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-123456789.123456789,-0.00"
                  expectedOutput="0.00000000000,
					0,
					0,
					0,
					0.00000000000,
					0,
					0,
					0"/>
        <testData input="-0,-0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
    </testcase>
    <testcase testName="testMultiplyWithDivideExpr"
              fieldName="testMultiplyWithDivideExpr"
              dataType="Currency"
              formula="(customformula0__c*customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customformula0"
                        dataType="Double"
                        formula="(custompercent1__c/customcurrency1__c)">
            <referenceField fieldName="custompercent1" dataType="Percent"/>
            <referenceField fieldName="customcurrency1" dataType="Currency"/>
        </referenceField>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="100,200,100"
                  expectedOutput="0.500,
					0.50000000000000000000000000000000,
					0.5,
					0.5,
					0.500,
					0.50000000000000000000000000000000,
					0.5,
					0.5"/>
        <testData input="4,4,4"
                  expectedOutput="0.04,
					0.04000000000000000000000000000000,
					0.04,
					0.04,
					0.04,
					0.04000000000000000000000000000000,
					0.04,
					0.04"/>
        <testData input="-1,-1,-1"
                  expectedOutput="-0.01,
					-0.01000000000000000000000000000000,
					-0.01,
					-0.01,
					-0.01,
					-0.01000000000000000000000000000000,
					-0.01,
					-0.01"/>
        <testData input="123456789,123456789,12345678"
                  expectedOutput="123456.78,
					123456.78000000000000000000000000000000,
					123456.78,
					123456.78,
					123456.78,
					123456.78000000000000000000000000000000,
					123456.78,
					123456.78"/>
        <testData input="-9,-22,10"
                  expectedOutput="0.04090909090909090909090909090909,
					0.04090909090909090910000000000000,
					0.04090909090909091,
					0.0409091,
					0.04090909090909090909090909090909,
					0.04090909090909090910000000000000,
					0.04090909090909091,
					0.0409091"/>
        <testData input="9,-6,10"
                  expectedOutput="-0.150,
					-0.15000000000000000000000000000000,
					-0.15,
					-0.15,
					-0.150,
					-0.15000000000000000000000000000000,
					-0.15,
					-0.15"/>
        <testData input=",2,20"
                  expectedOutput="0,
					0E-32,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0,2,20" expectedOutput="0,
					0E-32,
					0,
					0,
					0,
					0E-32,
					0,
					0"/>
        <testData input="0.2,0.02,.002"
                  expectedOutput="0.0002,
					0.00020000000000000000000000000000,
					0.0002,
					0.0002,
					0.0002,
					0.00020000000000000000000000000000,
					0.0002,
					0.0002"/>
        <testData input="0.2,0.002,.02"
                  expectedOutput="0.02,
					0.02000000000000000000000000000000,
					0.02,
					0.02,
					0.02,
					0.02000000000000000000000000000000,
					0.02,
					0.02"/>
        <testData input="1.111,1.222,1.333"
                  expectedOutput="0.01211917348608837970540098199673,
					0.01211917348608837970647000000000,
					0.01211917348608838,
					0.0121192,
					0.01211917348608837970540098199673,
					0.01211917348608837970647000000000,
					0.01211917348608838,
					0.0121192"/>
    </testcase>
    <testcase testName="testMultiplyWithDivideExpr2"
              fieldName="testMultiplyWithDivideExpr2"
              dataType="Currency"
              formula="(customformula0__c*customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customformula0"
                        dataType="Double"
                        formula="(custompercent1__c/customcurrency1__c)">
            <referenceField fieldName="custompercent1" dataType="Percent"/>
            <referenceField fieldName="customcurrency1" dataType="Currency"/>
        </referenceField>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="100,200,100"
                  expectedOutput="0.500,
					0.50000000000000000000000000000000,
					0.5,
					0.5,
					0.500,
					0.50000000000000000000000000000000,
					0.5,
					0.5"/>
        <testData input="4,4,4"
                  expectedOutput="0.04,
					0.04000000000000000000000000000000,
					0.04,
					0.04,
					0.04,
					0.04000000000000000000000000000000,
					0.04,
					0.04"/>
        <testData input="-1,-1,-1"
                  expectedOutput="-0.01,
					-0.01000000000000000000000000000000,
					-0.01,
					-0.01,
					-0.01,
					-0.01000000000000000000000000000000,
					-0.01,
					-0.01"/>
        <testData input="123456789,123456789,12345678"
                  expectedOutput="123456.78,
					123456.78000000000000000000000000000000,
					123456.78,
					123456.78,
					123456.78,
					123456.78000000000000000000000000000000,
					123456.78,
					123456.78"/>
        <testData input="-9,-22,10"
                  expectedOutput="0.04090909090909090909090909090909,
					0.04090909090909090910000000000000,
					0.04090909090909091,
					0.0409091,
					0.04090909090909090909090909090909,
					0.04090909090909090910000000000000,
					0.04090909090909091,
					0.0409091"/>
        <testData input="9,-6,10"
                  expectedOutput="-0.150,
					-0.15000000000000000000000000000000,
					-0.15,
					-0.15,
					-0.150,
					-0.15000000000000000000000000000000,
					-0.15,
					-0.15"/>
        <testData input=",2,20"
                  expectedOutput="0,
					0E-32,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0,2,20" expectedOutput="0,
					0E-32,
					0,
					0,
					0,
					0E-32,
					0,
					0"/>
        <testData input="0.2,0.02,.002"
                  expectedOutput="0.0002,
					0.00020000000000000000000000000000,
					0.0002,
					0.0002,
					0.0002,
					0.00020000000000000000000000000000,
					0.0002,
					0.0002"/>
        <testData input="0.2,0.002,.02"
                  expectedOutput="0.02,
					0.02000000000000000000000000000000,
					0.02,
					0.02,
					0.02,
					0.02000000000000000000000000000000,
					0.02,
					0.02"/>
        <testData input="1.111,1.222,1.333"
                  expectedOutput="0.01211917348608837970540098199673,
					0.01211917348608837970647000000000,
					0.01211917348608838,
					0.0121192,
					0.01211917348608837970540098199673,
					0.01211917348608837970647000000000,
					0.01211917348608838,
					0.0121192"/>
    </testcase>
    <testcase testName="testIfTextCompareNotEqualReturnNum"
              fieldName="testIfTextCompareNotEqualReturnNum"
              dataType="Currency"
              formula="IF((customtext1__c&lt;&gt;customtext2__c),customnumber1__c,custompercent1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customtext2" dataType="Text"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <testData input="123456789,123456789,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
        <testData input="12345678,123456789,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="12345678,1234567,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input=",10.24,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="10.24,,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input=",,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
        <testData input="123.23456789,123.123456789,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="123.23456780,123.123456789,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="123.23456789,123.123456780,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="-200.434,200.434, 200, 300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="200, -200.434, 200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="0,0,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
        <testData input="200,200,0.123456789,0.123456789"
                  expectedOutput="0.00123456789,
					0.00123456789000000000000000000000,
					0.00123456789,
					0.0012346,
					0.00123456789,
					0.00123456789000000000000000000000,
					0.00123456789,
					0.0012346"/>
        <testData input="201,200,0.123456789,0.123456789"
                  expectedOutput="0.123456789,
					0.12345678900000000000000000000000,
					0.123456789,
					0.1234568,
					0.123456789,
					0.12345678900000000000000000000000,
					0.123456789,
					0.1234568"/>
        <testData input="200,201,0.123456789,0.123456789"
                  expectedOutput="0.123456789,
					0.12345678900000000000000000000000,
					0.123456789,
					0.1234568,
					0.123456789,
					0.12345678900000000000000000000000,
					0.123456789,
					0.1234568"/>
    </testcase>
    <testcase testName="testIfTextCompareEqualReturnNum"
              fieldName="testIfTextCompareEqualReturnNum"
              dataType="Percent"
              formula="IF((customtext1__c=customtext2__c),customnumber1__c,customcurrency1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customtext2" dataType="Text"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <testData input="123456789,123456789,200,300"
                  expectedOutput="20000,
					20000.000000000000000000000000000000,
					20000,
					20000,
					20000,
					20000.000000000000000000000000000000,
					20000,
					20000"/>
        <testData input="12345678,123456789,200,300"
                  expectedOutput="30000,
					30000.000000000000000000000000000000,
					30000,
					30000,
					30000,
					30000.000000000000000000000000000000,
					30000,
					30000"/>
        <testData input="12345678,1234567,200,300"
                  expectedOutput="30000,
					30000.000000000000000000000000000000,
					30000,
					30000,
					30000,
					30000.000000000000000000000000000000,
					30000,
					30000"/>
        <testData input=",10.24,200,300"
                  expectedOutput="30000,
					30000.000000000000000000000000000000,
					30000,
					30000,
					30000,
					30000.000000000000000000000000000000,
					30000,
					30000"/>
        <testData input="10.24,,200,300"
                  expectedOutput="30000,
					30000.000000000000000000000000000000,
					30000,
					30000,
					30000,
					30000.000000000000000000000000000000,
					30000,
					30000"/>
        <testData input=",,200,300"
                  expectedOutput="20000,
					20000.000000000000000000000000000000,
					20000,
					20000,
					20000,
					20000.000000000000000000000000000000,
					20000,
					20000"/>
        <testData input="123.23456789,123.123456789,200,300"
                  expectedOutput="30000,
					30000.000000000000000000000000000000,
					30000,
					30000,
					30000,
					30000.000000000000000000000000000000,
					30000,
					30000"/>
        <testData input="123.23456780,123.123456789,200,300"
                  expectedOutput="30000,
					30000.000000000000000000000000000000,
					30000,
					30000,
					30000,
					30000.000000000000000000000000000000,
					30000,
					30000"/>
        <testData input="123.23456789,123.123456780,200,300"
                  expectedOutput="30000,
					30000.000000000000000000000000000000,
					30000,
					30000,
					30000,
					30000.000000000000000000000000000000,
					30000,
					30000"/>
        <testData input="-200.434,200.434, 200, 300"
                  expectedOutput="30000,
					30000.000000000000000000000000000000,
					30000,
					30000,
					30000,
					30000.000000000000000000000000000000,
					30000,
					30000"/>
        <testData input="200, -200.434, 200,300"
                  expectedOutput="30000,
					30000.000000000000000000000000000000,
					30000,
					30000,
					30000,
					30000.000000000000000000000000000000,
					30000,
					30000"/>
        <testData input="0,0,200,300"
                  expectedOutput="20000,
					20000.000000000000000000000000000000,
					20000,
					20000,
					20000,
					20000.000000000000000000000000000000,
					20000,
					20000"/>
        <testData input="200,200,0.123456789,0.123456789"
                  expectedOutput="12.3456789,
					12.345678900000000000000000000000,
					12.3456789,
					12.34568,
					12.3456789,
					12.345678900000000000000000000000,
					12.3456789,
					12.34568"/>
        <testData input="201,200,0.123456789,0.123456789"
                  expectedOutput="12.3456789,
					12.345678900000000000000000000000,
					12.3456789,
					12.34568,
					12.3456789,
					12.345678900000000000000000000000,
					12.3456789,
					12.34568"/>
        <testData input="200,201,0.123456789,0.123456789"
                  expectedOutput="12.3456789,
					12.345678900000000000000000000000,
					12.3456789,
					12.34568,
					12.3456789,
					12.345678900000000000000000000000,
					12.3456789,
					12.34568"/>
    </testcase>
    <testcase testName="testIfTextCompareEqualReturnDate"
              fieldName="testIfTextCompareEqualReturnDate"
              dataType="DateOnly"
              formula="IF((customtext1__c=customemail1__c),customdate1__c,customformula1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customemail1" dataType="email"/>
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customformula1"
                        dataType="DateOnly"
                        formula="(customdate2__c+customnumber1__c)">
            <referenceField fieldName="customdate2" dataType="DateOnly"/>
            <referenceField fieldName="customnumber1" dataType="Double"/>
        </referenceField>
        <testData input="srikanth@yahoo.com,srikanth@yahoo.com,2004:12:31,2004:12:31,20"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004"/>
        <testData input="sriKanth@yahoo.com,srikanth@yahoo.com,2004:12:31,2004:12:31,20"
                  expectedOutput="Thu Jan 20 00:00:00 GMT 2005,
					2005-01-20 00:00:00.0,
					Thu Jan 20 00:00:00 GMT 2005,
					Thu Jan 20 00:00:00 GMT 2005,
					Thu Jan 20 00:00:00 GMT 2005,
					2005-01-20 00:00:00.0,
					Thu Jan 20 00:00:00 GMT 2005,
					Thu Jan 20 00:00:00 GMT 2005"/>
        <testData input="srikanth@yahoo.com,srikaNth@yahoo.com,2004:12:31,2004:12:31,20"
                  expectedOutput="Thu Jan 20 00:00:00 GMT 2005,
					2005-01-20 00:00:00.0,
					Thu Jan 20 00:00:00 GMT 2005,
					Thu Jan 20 00:00:00 GMT 2005,
					Thu Jan 20 00:00:00 GMT 2005,
					2005-01-20 00:00:00.0,
					Thu Jan 20 00:00:00 GMT 2005,
					Thu Jan 20 00:00:00 GMT 2005"/>
        <testData input="srikanth@yahoo.com,srikanth@yahoo.com,2004:12:31,2004:12:31,20"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004"/>
        <testData input="srikanth@yahoo.com,aa@yahoo.com,2004:12:31,2004:12:31,20"
                  expectedOutput="Thu Jan 20 00:00:00 GMT 2005,
					2005-01-20 00:00:00.0,
					Thu Jan 20 00:00:00 GMT 2005,
					Thu Jan 20 00:00:00 GMT 2005,
					Thu Jan 20 00:00:00 GMT 2005,
					2005-01-20 00:00:00.0,
					Thu Jan 20 00:00:00 GMT 2005,
					Thu Jan 20 00:00:00 GMT 2005"/>
        <testData input="srikanth@yahoo.com,srikanth@yahoo.com,2004:12:31,2004:12:31,20"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004"/>
        <testData input=",srikanth@yahoo.com,2004:12:31,2004:12:31,20"
                  expectedOutput="Thu Jan 20 00:00:00 GMT 2005,
					2005-01-20 00:00:00.0,
					Thu Jan 20 00:00:00 GMT 2005,
					Thu Jan 20 00:00:00 GMT 2005,
					Thu Jan 20 00:00:00 GMT 2005,
					2005-01-20 00:00:00.0,
					Thu Jan 20 00:00:00 GMT 2005,
					Thu Jan 20 00:00:00 GMT 2005"/>
        <testData input="srikanth@yahoo.com,,2004:12:31,2004:12:31,20"
                  expectedOutput="Thu Jan 20 00:00:00 GMT 2005,
					2005-01-20 00:00:00.0,
					Thu Jan 20 00:00:00 GMT 2005,
					Thu Jan 20 00:00:00 GMT 2005,
					Thu Jan 20 00:00:00 GMT 2005,
					2005-01-20 00:00:00.0,
					Thu Jan 20 00:00:00 GMT 2005,
					Thu Jan 20 00:00:00 GMT 2005"/>
        <testData input=",,2004:12:31,2004:12:31,20"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004"/>
        <testData input="srikanth@yahoo.com,srikanth@yahoo.com,,2004:12:31,20"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="srikanth@yahoo.com,srikanth@yahoo.com,2004:12:31,,20"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004"/>
        <testData input="srikanth@yahoo.com,srianth@yahoo.com,,2004:12:31,20"
                  expectedOutput="Thu Jan 20 00:00:00 GMT 2005,
					2005-01-20 00:00:00.0,
					Thu Jan 20 00:00:00 GMT 2005,
					Thu Jan 20 00:00:00 GMT 2005,
					Thu Jan 20 00:00:00 GMT 2005,
					2005-01-20 00:00:00.0,
					Thu Jan 20 00:00:00 GMT 2005,
					Thu Jan 20 00:00:00 GMT 2005"/>
        <testData input="srikanth@yahoo.com,srikanth@yahoo.com,2004:12:31,2004:12:31,"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004"/>
        <testData input="srikanth@yahoo.com,srikanth@yahoo.com,,,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",,,,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="srikanth@yahoo.com,srikanth@yahoo.com,2004:12:31,2004:12:31,-30"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004"/>
    </testcase>
    <testcase testName="testIfTextCompareEqualReturnDateTime"
              fieldName="testIfTextCompareEqualReturnDateTime"
              dataType="DateTime"
              formula="IF((customphone1__c=customphone2__c),customformula1__c,customdatetime2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customphone1" dataType="phone"/>
        <referenceField fieldName="customphone2" dataType="phone"/>
        <referenceField fieldName="customformula1"
                        dataType="DateTime"
                        formula="(customdatetime1__c-customcurrency1__c)">
            <referenceField fieldName="customdatetime1" dataType="DateTime"/>
            <referenceField fieldName="customcurrency1" dataType="Currency"/>
        </referenceField>
        <referenceField fieldName="customdatetime2" dataType="DateTime"/>
        <testData input="510 797 4647,510 797 4647,2004:12:31:12:00:00,4.3,2004:12:31:00:00:00"
                  expectedOutput="Mon Dec 27 04:48:00 GMT 2004,
					2004-12-27 04:48:00.0,
					Mon Dec 27 04:48:00 GMT 2004,
					Mon Dec 27 04:48:00 GMT 2004,
					Mon Dec 27 04:48:00 GMT 2004,
					2004-12-27 04:48:00.0,
					Mon Dec 27 04:48:00 GMT 2004,
					Mon Dec 27 04:48:00 GMT 2004"/>
        <testData input="510-797-4647,510 797 4647,2004:12:31:12:00:00,4.3,2004:12:31:00:00:00"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004"/>
        <testData input="510 797 4657,510 797 4647,2004:12:31:12:00:00,4.3,2004:12:31:00:00:00"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004"/>
        <testData input="510 797 4647,510 797 4657,2004:12:31:12:00:00,4.3,2004:12:31:00:00:00"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004"/>
        <testData input="510 797 4647,510 797 4647,2004:12:31:12:00:00,-.3,2004:12:31:00:00:00"
                  expectedOutput="Fri Dec 31 19:12:00 GMT 2004,
					2004-12-31 19:12:00.0,
					Fri Dec 31 19:12:00 GMT 2004,
					Fri Dec 31 19:12:00 GMT 2004,
					Fri Dec 31 19:12:00 GMT 2004,
					2004-12-31 19:12:00.0,
					Fri Dec 31 19:12:00 GMT 2004,
					Fri Dec 31 19:12:00 GMT 2004"/>
        <testData input="510 797 4647,510 797 4647,2004:02:28:12:00:00,12.3,2004:12:31:00:00:00"
                  expectedOutput="Mon Feb 16 04:48:00 GMT 2004,
					2004-02-16 04:48:00.0,
					Mon Feb 16 04:48:00 GMT 2004,
					Mon Feb 16 04:48:00 GMT 2004,
					Mon Feb 16 04:48:00 GMT 2004,
					2004-02-16 04:48:00.0,
					Mon Feb 16 04:48:00 GMT 2004,
					Mon Feb 16 04:48:00 GMT 2004"/>
        <testData input="510 797 4647,510 797 4647,,4.3,2004:12:31:00:00:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="510 797 4647,510 797 4647,2004:12:31:12:00:00,,2004:12:31:00:00:00"
                  expectedOutput="Fri Dec 31 12:00:00 GMT 2004,
					2004-12-31 12:00:00.0,
					Fri Dec 31 12:00:00 GMT 2004,
					Fri Dec 31 12:00:00 GMT 2004,
					null,
					null,
					null,
					null"/>
        <testData input="510 797 4647,510 797 4657,2004:12:31:12:00:00,4.3,2004:02:27:22:12:59"
                  expectedOutput="Fri Feb 27 22:12:59 GMT 2004,
					2004-02-27 22:12:59.0,
					Fri Feb 27 22:12:59 GMT 2004,
					Fri Feb 27 22:12:59 GMT 2004,
					Fri Feb 27 22:12:59 GMT 2004,
					2004-02-27 22:12:59.0,
					Fri Feb 27 22:12:59 GMT 2004,
					Fri Feb 27 22:12:59 GMT 2004"/>
        <testData input="510 797 4647,510 797 4657,2004:12:31:12:00:00,4.3,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",510 797 4657,2004:12:31:12:00:00,4.3,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="510 797 4647,,2004:12:31:12:00:00,4.3,2004:12:31:00:00:00"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004"/>
        <testData input=",,2004:12:31:12:00:00,4.3,2004:12:31:00:00:00"
                  expectedOutput="Mon Dec 27 04:48:00 GMT 2004,
					2004-12-27 04:48:00.0,
					Mon Dec 27 04:48:00 GMT 2004,
					Mon Dec 27 04:48:00 GMT 2004,
					Mon Dec 27 04:48:00 GMT 2004,
					2004-12-27 04:48:00.0,
					Mon Dec 27 04:48:00 GMT 2004,
					Mon Dec 27 04:48:00 GMT 2004"/>
        <testData input=",,,,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testIfTextCompareEqualReturnText"
              fieldName="testIfTextCompareEqualReturnText"
              dataType="Text"
              formula="IF((customtext1__c=customtext2__c), &#34;true&#34;, &#34;false&#34;)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customtext2" dataType="Text"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="aaaa,bbbb"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="aaaa,"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=",bbbb"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=","
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
    </testcase>
    <testcase testName="testIfUsesTrue"
              fieldName="testIfUsesTrue"
              dataType="Double"
              formula="IF(true,1,0)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <testData expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
    </testcase>
    <testcase testName="testIfUsesFalse"
              fieldName="testIfUsesFalse"
              dataType="Percent"
              formula="IF(false,1,0)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <testData expectedOutput="0,
					0E-30,
					0,
					0,
					0,
					0E-30,
					0,
					0"/>
    </testcase>
    <testcase testName="testIfIf"
              fieldName="testIfIf"
              dataType="Text"
              formula="if( if (customtext1__c=customtext2__c, true, false),  &#34;true&#34;, &#34;false&#34;)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customtext2" dataType="Text"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="aaaa,bbbb"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="aaaa,"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=",bbbb"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=","
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
    </testcase>
    <testcase testName="testIfNullThenIf"
              fieldName="testIfNullThenIf"
              dataType="Text"
              formula="if( if (customtext1__c=customtext2__c, null, false),  &#34;true&#34;, &#34;false&#34;)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customtext2" dataType="Text"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="aaaa,bbbb"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="aaaa,"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=",bbbb"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=","
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
    </testcase>
    <testcase testName="testIfNullElseIf"
              fieldName="testIfNullElseIf"
              dataType="Text"
              formula="if( if (customtext1__c=customtext2__c, true, null),  &#34;true&#34;, &#34;false&#34;)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customtext2" dataType="Text"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="aaaa,bbbb"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="aaaa,"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=",bbbb"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=","
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
    </testcase>
    <testcase testName="testIfNullNullIf"
              fieldName="testIfNullNullIf"
              dataType="Text"
              formula="if( if (customtext1__c=customtext2__c, null, null) = 0,  &#34;true&#34;, &#34;false&#34;)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customtext2" dataType="Text"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="false,
					Error: ERROR: operator does not exist: text = integer   Hint: No operator matches the given name and argument types. You might need to add explicit type casts.   Position: 177,
					false,
					false,
					false,
					Error: ERROR: operator does not exist: text = integer   Hint: No operator matches the given name and argument types. You might need to add explicit type casts.   Position: 177,
					false,
					false"/>
        <testData input="aaaa,bbbb"
                  expectedOutput="false,
					Error: ERROR: operator does not exist: text = integer   Hint: No operator matches the given name and argument types. You might need to add explicit type casts.   Position: 177,
					false,
					false,
					false,
					Error: ERROR: operator does not exist: text = integer   Hint: No operator matches the given name and argument types. You might need to add explicit type casts.   Position: 177,
					false,
					false"/>
        <testData input="aaaa,"
                  expectedOutput="false,
					Error: ERROR: operator does not exist: text = integer   Hint: No operator matches the given name and argument types. You might need to add explicit type casts.   Position: 177,
					false,
					false,
					false,
					Error: ERROR: operator does not exist: text = integer   Hint: No operator matches the given name and argument types. You might need to add explicit type casts.   Position: 177,
					false,
					false"/>
        <testData input=",bbbb"
                  expectedOutput="false,
					Error: ERROR: operator does not exist: text = integer   Hint: No operator matches the given name and argument types. You might need to add explicit type casts.   Position: 177,
					false,
					false,
					false,
					Error: ERROR: operator does not exist: text = integer   Hint: No operator matches the given name and argument types. You might need to add explicit type casts.   Position: 177,
					false,
					false"/>
        <testData input=","
                  expectedOutput="false,
					Error: ERROR: operator does not exist: text = integer   Hint: No operator matches the given name and argument types. You might need to add explicit type casts.   Position: 177,
					false,
					false,
					false,
					Error: ERROR: operator does not exist: text = integer   Hint: No operator matches the given name and argument types. You might need to add explicit type casts.   Position: 177,
					false,
					false"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="false,
					Error: ERROR: operator does not exist: text = integer   Hint: No operator matches the given name and argument types. You might need to add explicit type casts.   Position: 177,
					false,
					false,
					false,
					Error: ERROR: operator does not exist: text = integer   Hint: No operator matches the given name and argument types. You might need to add explicit type casts.   Position: 177,
					false,
					false"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="false,
					Error: ERROR: operator does not exist: text = integer   Hint: No operator matches the given name and argument types. You might need to add explicit type casts.   Position: 177,
					false,
					false,
					false,
					Error: ERROR: operator does not exist: text = integer   Hint: No operator matches the given name and argument types. You might need to add explicit type casts.   Position: 177,
					false,
					false"/>
    </testcase>
    <testcase testName="testIfNotNull"
              fieldName="testIfNotNull"
              dataType="Text"
              formula="if (not(null), &#34;True&#34;, &#34;False&#34;)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <testData expectedOutput="False,
					False,
					False,
					False,
					False,
					False,
					False,
					False"/>
    </testcase>
    <testcase testName="testIfAndNull"
              fieldName="testIfAndNull"
              dataType="Text"
              formula="IF(AND(null,customcheckbox1__c),&#34;T&#34;,&#34;F&#34;) &amp; IF(AND(customcheckbox1__c,null),&#34;T&#34;,&#34;F&#34;)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customcheckbox1" dataType="Boolean"/>
        <testData input="true" expectedOutput="FF,
					FF,
					FF,
					FF,
					FF,
					FF,
					FF,
					FF"/>
        <testData input="false" expectedOutput="FF,
					FF,
					FF,
					FF,
					FF,
					FF,
					FF,
					FF"/>
    </testcase>
    <testcase testName="testIfOrNull"
              fieldName="testIfOrNull"
              dataType="Text"
              formula="IF(OR(null,customcheckbox1__c),&#34;T&#34;,&#34;F&#34;) &amp; IF(OR(customcheckbox1__c,null),&#34;T&#34;,&#34;F&#34;)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customcheckbox1" dataType="Boolean"/>
        <testData input="true" expectedOutput="TT,
					TT,
					TT,
					TT,
					TT,
					TT,
					TT,
					TT"/>
        <testData input="false" expectedOutput="FF,
					FF,
					FF,
					FF,
					FF,
					FF,
					FF,
					FF"/>
    </testcase>
    <testcase testName="testIfNumIf"
              fieldName="testIfNumIf"
              dataType="Text"
              formula="if( if (customtext1__c=customtext2__c, 1, 2) = 1,  &#34;true&#34;, &#34;false&#34;)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customtext2" dataType="Text"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="aaaa,bbbb"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="aaaa,"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=",bbbb"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=","
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
    </testcase>
    <testcase testName="testIfNumNullIf"
              fieldName="testIfNumNullIf"
              dataType="Text"
              formula="if( if (customtext1__c=customtext2__c, 1, null) = 1,  &#34;true&#34;, &#34;false&#34;)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customtext2" dataType="Text"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="aaaa,bbbb"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="aaaa,"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=",bbbb"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=","
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="aaaa,aaaa"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
    </testcase>
    <testcase testName="testIfNumCompareEqual"
              fieldName="testIfNumCompareEqual"
              dataType="Text"
              formula="IF((customnumber1__c=customcurrency1__c),customtext1__c,customphone1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customphone1" dataType="phone"/>
        <testData input="123456789,123456789,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="12345678,123456789,200,300"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="12345678,1234567,200,300"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input=",10.24,200,300"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="10.24,,200,300"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input=",,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					300,
					300,
					300,
					200"/>
        <testData input="123.23456789,123.123456789,200,300"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="123.23456780,123.123456789,200,300"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="123.23456789,123.123456780,200,300"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="-200.434,200.434, 200, 300"
                  expectedOutput=" 300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="200, -200.434, 200,300"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="0,0,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="200,200,0.123456789,0.123456789"
                  expectedOutput="0.123456789,
					0.123456789,
					0.123456789,
					0.123456789,
					0.123456789,
					0.123456789,
					0.123456789,
					0.123456789"/>
        <testData input="201,200,0.123456789,0.123456789"
                  expectedOutput="0.123456789,
					0.123456789,
					0.123456789,
					0.123456789,
					0.123456789,
					0.123456789,
					0.123456789,
					0.123456789"/>
        <testData input="200,201,0.123456789,0.123456789"
                  expectedOutput="0.123456789,
					0.123456789,
					0.123456789,
					0.123456789,
					0.123456789,
					0.123456789,
					0.123456789,
					0.123456789"/>
    </testcase>
    <testcase testName="testIfNumCompareLess"
              fieldName="testIfNumCompareLess"
              dataType="Percent"
              formula="IF((customcurrency1__c&lt;customcurrency2__c),customcurrency3__c,customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <referenceField fieldName="customcurrency2" dataType="Currency"/>
        <referenceField fieldName="customcurrency3" dataType="Currency"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="123456789,123456789,200,300"
                  expectedOutput="30000,
					30000.000000000000000000000000000000,
					30000,
					30000,
					30000,
					30000.000000000000000000000000000000,
					30000,
					30000"/>
        <testData input="12345678,123456789,200,300"
                  expectedOutput="20000,
					20000.000000000000000000000000000000,
					20000,
					20000,
					20000,
					20000.000000000000000000000000000000,
					20000,
					20000"/>
        <testData input="12345678,1234567,200,300"
                  expectedOutput="30000,
					30000.000000000000000000000000000000,
					30000,
					30000,
					30000,
					30000.000000000000000000000000000000,
					30000,
					30000"/>
        <testData input=",10.24,200,300"
                  expectedOutput="20000,
					20000.000000000000000000000000000000,
					20000,
					20000,
					30000,
					30000.000000000000000000000000000000,
					30000,
					30000"/>
        <testData input="10.24,,200,300"
                  expectedOutput="30000,
					30000.000000000000000000000000000000,
					30000,
					30000,
					30000,
					30000.000000000000000000000000000000,
					30000,
					30000"/>
        <testData input=",,200,300"
                  expectedOutput="30000,
					30000.000000000000000000000000000000,
					30000,
					30000,
					30000,
					30000.000000000000000000000000000000,
					30000,
					30000"/>
        <testData input="123.23456789,123.123456789,200,300"
                  expectedOutput="30000,
					30000.000000000000000000000000000000,
					30000,
					30000,
					30000,
					30000.000000000000000000000000000000,
					30000,
					30000"/>
        <testData input="123.23456780,123.123456789,200,300"
                  expectedOutput="30000,
					30000.000000000000000000000000000000,
					30000,
					30000,
					30000,
					30000.000000000000000000000000000000,
					30000,
					30000"/>
        <testData input="123.23456789,123.123456780,200,300"
                  expectedOutput="30000,
					30000.000000000000000000000000000000,
					30000,
					30000,
					30000,
					30000.000000000000000000000000000000,
					30000,
					30000"/>
        <testData input="-200.434,200.434, 200, 300"
                  expectedOutput="20000,
					20000.000000000000000000000000000000,
					20000,
					20000,
					20000,
					20000.000000000000000000000000000000,
					20000,
					20000"/>
        <testData input="200, -200.434, 200,300"
                  expectedOutput="30000,
					30000.000000000000000000000000000000,
					30000,
					30000,
					30000,
					30000.000000000000000000000000000000,
					30000,
					30000"/>
        <testData input="0,0,200,300"
                  expectedOutput="30000,
					30000.000000000000000000000000000000,
					30000,
					30000,
					30000,
					30000.000000000000000000000000000000,
					30000,
					30000"/>
        <testData input="200,200,0.123456789,0.123456789"
                  expectedOutput="12.3456789,
					12.345678900000000000000000000000,
					12.3456789,
					12.34568,
					12.3456789,
					12.345678900000000000000000000000,
					12.3456789,
					12.34568"/>
        <testData input="201,200,0.123456789,0.123456789"
                  expectedOutput="12.3456789,
					12.345678900000000000000000000000,
					12.3456789,
					12.34568,
					12.3456789,
					12.345678900000000000000000000000,
					12.3456789,
					12.34568"/>
        <testData input="200,201,0.123456789,0.123456789"
                  expectedOutput="12.3456789,
					12.345678900000000000000000000000,
					12.3456789,
					12.34568,
					12.3456789,
					12.345678900000000000000000000000,
					12.3456789,
					12.34568"/>
    </testcase>
    <testcase testName="testIfNumCompareLessOrEqual"
              fieldName="testIfNumCompareLessOrEqual"
              dataType="Currency"
              formula="IF((customcurrency1__c&lt;=customcurrency2__c),customcurrency3__c,customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <referenceField fieldName="customcurrency2" dataType="Currency"/>
        <referenceField fieldName="customcurrency3" dataType="Currency"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="123456789,123456789,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="12345678,123456789,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="12345678,1234567,200,300"
                  expectedOutput="300,
					300.00000000000000000000000000000000,
					300,
					300,
					300,
					300.00000000000000000000000000000000,
					300,
					300"/>
        <testData input=",10.24,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					300,
					300.00000000000000000000000000000000,
					300,
					300"/>
        <testData input="10.24,,200,300"
                  expectedOutput="300,
					300.00000000000000000000000000000000,
					300,
					300,
					300,
					300.00000000000000000000000000000000,
					300,
					300"/>
        <testData input=",,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					300,
					300.00000000000000000000000000000000,
					300,
					300"/>
        <testData input="123.23456789,123.123456789,200,300"
                  expectedOutput="300,
					300.00000000000000000000000000000000,
					300,
					300,
					300,
					300.00000000000000000000000000000000,
					300,
					300"/>
        <testData input="123.23456780,123.123456789,200,300"
                  expectedOutput="300,
					300.00000000000000000000000000000000,
					300,
					300,
					300,
					300.00000000000000000000000000000000,
					300,
					300"/>
        <testData input="123.23456789,123.123456780,200,300"
                  expectedOutput="300,
					300.00000000000000000000000000000000,
					300,
					300,
					300,
					300.00000000000000000000000000000000,
					300,
					300"/>
        <testData input="-200.434,200.434, 200, 300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="200, -200.434, 200,300"
                  expectedOutput="300,
					300.00000000000000000000000000000000,
					300,
					300,
					300,
					300.00000000000000000000000000000000,
					300,
					300"/>
        <testData input="0,0,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="200,200,0.123456789,0.123456789"
                  expectedOutput="0.123456789,
					0.12345678900000000000000000000000,
					0.123456789,
					0.1234568,
					0.123456789,
					0.12345678900000000000000000000000,
					0.123456789,
					0.1234568"/>
        <testData input="201,200,0.123456789,0.123456789"
                  expectedOutput="0.123456789,
					0.12345678900000000000000000000000,
					0.123456789,
					0.1234568,
					0.123456789,
					0.12345678900000000000000000000000,
					0.123456789,
					0.1234568"/>
        <testData input="200,201,0.123456789,0.123456789"
                  expectedOutput="0.123456789,
					0.12345678900000000000000000000000,
					0.123456789,
					0.1234568,
					0.123456789,
					0.12345678900000000000000000000000,
					0.123456789,
					0.1234568"/>
    </testcase>
    <testcase testName="testIfNumCompareNotEqual"
              fieldName="testIfNumCompareNotEqual"
              dataType="Double"
              formula="IF((customcurrency1__c&lt;&gt;customcurrency2__c),customcurrency3__c,customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <referenceField fieldName="customcurrency2" dataType="Currency"/>
        <referenceField fieldName="customcurrency3" dataType="Currency"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="123456789,123456789,200,300"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="12345678,123456789,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="12345678,1234567,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input=",10.24,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					300,
					300,
					Error: TypeError: Cannot read property 'eq' of null,
					200"/>
        <testData input="10.24,,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					300,
					300,
					Error: Error: [DecimalError] Invalid argument: null,
					200"/>
        <testData input=",,200,300"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					Error: TypeError: Cannot read property 'eq' of null,
					300"/>
        <testData input="123.23456789,123.123456789,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="123.23456780,123.123456789,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="123.23456789,123.123456780,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="-200.434,200.434, 200, 300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="200, -200.434, 200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="0,0,200,300"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="200,200,0.123456789,0.123456789"
                  expectedOutput="0.123456789,
					0.123456789,
					0.123456789,
					0.1234568,
					0.123456789,
					0.123456789,
					0.123456789,
					0.1234568"/>
        <testData input="201,200,0.123456789,0.123456789"
                  expectedOutput="0.123456789,
					0.123456789,
					0.123456789,
					0.1234568,
					0.123456789,
					0.123456789,
					0.123456789,
					0.1234568"/>
        <testData input="200,201,0.123456789,0.123456789"
                  expectedOutput="0.123456789,
					0.123456789,
					0.123456789,
					0.1234568,
					0.123456789,
					0.123456789,
					0.123456789,
					0.1234568"/>
    </testcase>
    <testcase testName="testIfContainsFunc"
              fieldName="testIfContainsFunc"
              dataType="Double"
              formula="IF(CONTAINS(customtext1__c,customtext2__c),ABS(customnumber1__c),FLOOR(customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customtext2" dataType="Text"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="123456789,123456789,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="12345678,123456789,200,300"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="12345678,1234567,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input=",10.24,200,300"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="10.24,,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input=",,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="123.23456789,123.123456789,200,300"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="123.23456780,123.123456789,200,300"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="123.23456789,123.123456780,200,300"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="-200.434,200.434, 200, 300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="200, -200.434, 200,300"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="0,0,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="200,200,0.123456789,0.123456789"
                  expectedOutput="0.123456789,
					0.123456789,
					0.123456789,
					0.1234568,
					0.123456789,
					0.123456789,
					0.123456789,
					0.1234568"/>
        <testData input="201,200,0.123456789,0.123456789"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="200,201,0.123456789,0.123456789"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
    </testcase>
    <testcase testName="testDate"
              fieldName="testDate"
              dataType="DateOnly"
              formula="DATE(customnumber1__c,customnumber2__c,customnumber3__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customnumber3" dataType="Double"/>
        <testData input="2007,2,29"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Mar 01 00:00:00 GMT 2007,
					Thu Mar 01 00:00:00 GMT 2007,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Mar 01 00:00:00 GMT 2007,
					Thu Mar 01 00:00:00 GMT 2007"/>
        <testData input="2008,2,29"
                  expectedOutput="Fri Feb 29 00:00:00 GMT 2008,
					2008-02-29 00:00:00.0,
					Fri Feb 29 00:00:00 GMT 2008,
					Fri Feb 29 00:00:00 GMT 2008,
					Fri Feb 29 00:00:00 GMT 2008,
					2008-02-29 00:00:00.0,
					Fri Feb 29 00:00:00 GMT 2008,
					Fri Feb 29 00:00:00 GMT 2008"/>
        <testData input="2007,3,32"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Apr 01 00:00:00 GMT 2007,
					Sun Apr 01 00:00:00 GMT 2007,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Apr 01 00:00:00 GMT 2007,
					Sun Apr 01 00:00:00 GMT 2007"/>
        <testData input="10000,3,2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Mar 02 00:00:00 GMT 10000,
					Thu Mar 02 00:00:00 GMT 10000,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Mar 02 00:00:00 GMT 10000,
					Thu Mar 02 00:00:00 GMT 10000"/>
        <testData input="9999,12,31"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 9999,
					9999-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 9999,
					Fri Dec 31 00:00:00 GMT 9999,
					Fri Dec 31 00:00:00 GMT 9999,
					9999-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 9999,
					Fri Dec 31 00:00:00 GMT 9999"/>
        <testData input="10000,1,1"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Jan 01 00:00:00 GMT 10000,
					Sat Jan 01 00:00:00 GMT 10000,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Jan 01 00:00:00 GMT 10000,
					Sat Jan 01 00:00:00 GMT 10000"/>
        <testData input="1000,3,2"
                  expectedOutput="Sat Mar 02 00:00:00 GMT 1000,
					1000-03-02 00:00:00.0,
					Sun Feb 25 00:00:00 GMT 1000,
					Sun Feb 25 00:00:00 GMT 1000,
					Sat Mar 02 00:00:00 GMT 1000,
					1000-03-02 00:00:00.0,
					Sun Feb 25 00:00:00 GMT 1000,
					Sun Feb 25 00:00:00 GMT 1000"/>
        <testData input="2010,,29"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Dec 29 00:00:00 GMT 2009,
					Tue Dec 29 00:00:00 GMT 2009,
					null,
					null,
					null,
					null"/>
        <testData input="2010,2,"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Jan 31 00:00:00 GMT 2010,
					Sun Jan 31 00:00:00 GMT 2010,
					null,
					null,
					null,
					null"/>
        <testData input=",2,29"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Mar 01 00:00:00 GMT 1900,
					Thu Mar 01 00:00:00 GMT 1900,
					null,
					null,
					null,
					null"/>
        <testData input="2010,0,2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Dec 02 00:00:00 GMT 2009,
					Wed Dec 02 00:00:00 GMT 2009,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Dec 02 00:00:00 GMT 2009,
					Wed Dec 02 00:00:00 GMT 2009"/>
        <testData input=",,"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Nov 30 00:00:00 GMT 1899,
					Thu Nov 30 00:00:00 GMT 1899,
					null,
					null,
					null,
					null"/>
        <testData input="2010,,"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Mon Nov 30 00:00:00 GMT 2009,
					Mon Nov 30 00:00:00 GMT 2009,
					null,
					null,
					null,
					null"/>
        <testData input=",2,"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Jan 31 00:00:00 GMT 1900,
					Wed Jan 31 00:00:00 GMT 1900,
					null,
					null,
					null,
					null"/>
        <testData input=",,11"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Mon Dec 11 00:00:00 GMT 1899,
					Mon Dec 11 00:00:00 GMT 1899,
					null,
					null,
					null,
					null"/>
        <testData input="2009.5,3,2"
                  expectedOutput="Mon Mar 02 00:00:00 GMT 2009,
					2009-03-02 00:00:00.0,
					Mon Mar 02 00:00:00 GMT 2009,
					Mon Mar 02 00:00:00 GMT 2009,
					Mon Mar 02 00:00:00 GMT 2009,
					2009-03-02 00:00:00.0,
					Mon Mar 02 00:00:00 GMT 2009,
					Mon Mar 02 00:00:00 GMT 2009"/>
        <testData input="2009,3.5,2"
                  expectedOutput="Mon Mar 02 00:00:00 GMT 2009,
					2009-03-02 00:00:00.0,
					Mon Mar 02 00:00:00 GMT 2009,
					Mon Mar 02 00:00:00 GMT 2009,
					Mon Mar 02 00:00:00 GMT 2009,
					2009-03-02 00:00:00.0,
					Mon Mar 02 00:00:00 GMT 2009,
					Mon Mar 02 00:00:00 GMT 2009"/>
        <testData input="2009,3,2.5"
                  expectedOutput="Mon Mar 02 00:00:00 GMT 2009,
					2009-03-02 00:00:00.0,
					Mon Mar 02 00:00:00 GMT 2009,
					Mon Mar 02 00:00:00 GMT 2009,
					Mon Mar 02 00:00:00 GMT 2009,
					2009-03-02 00:00:00.0,
					Mon Mar 02 00:00:00 GMT 2009,
					Mon Mar 02 00:00:00 GMT 2009"/>
        <testData input="2009,12.5,31.5"
                  expectedOutput="Thu Dec 31 00:00:00 GMT 2009,
					2009-12-31 00:00:00.0,
					Thu Dec 31 00:00:00 GMT 2009,
					Thu Dec 31 00:00:00 GMT 2009,
					Thu Dec 31 00:00:00 GMT 2009,
					2009-12-31 00:00:00.0,
					Thu Dec 31 00:00:00 GMT 2009,
					Thu Dec 31 00:00:00 GMT 2009"/>
        <testData input="2009,12,32.1"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Jan 01 00:00:00 GMT 2010,
					Fri Jan 01 00:00:00 GMT 2010,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Jan 01 00:00:00 GMT 2010,
					Fri Jan 01 00:00:00 GMT 2010"/>
        <testData input="2009,12,0.9"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Mon Nov 30 00:00:00 GMT 2009,
					Mon Nov 30 00:00:00 GMT 2009,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Mon Nov 30 00:00:00 GMT 2009,
					Mon Nov 30 00:00:00 GMT 2009"/>
        <testData input="2009,0.9,26"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Mon Jan 26 00:00:00 GMT 2009,
					Mon Jan 26 00:00:00 GMT 2009,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Mon Jan 26 00:00:00 GMT 2009,
					Mon Jan 26 00:00:00 GMT 2009"/>
        <testData input="-2009,2,3"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Feb 20 00:00:00 GMT 2010,
					Sun Feb 20 00:00:00 GMT 2010,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Feb 20 00:00:00 GMT 2010,
					Sun Feb 20 00:00:00 GMT 2010"/>
        <testData input="2009,-3,4"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Sep 04 00:00:00 GMT 2008,
					Thu Sep 04 00:00:00 GMT 2008,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Sep 04 00:00:00 GMT 2008,
					Thu Sep 04 00:00:00 GMT 2008"/>
        <testData input="2009,3,-4"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Feb 24 00:00:00 GMT 2009,
					Tue Feb 24 00:00:00 GMT 2009,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Feb 24 00:00:00 GMT 2009,
					Tue Feb 24 00:00:00 GMT 2009"/>
        <testData input="-2009.2,3,2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Mar 19 00:00:00 GMT 2010,
					Sat Mar 19 00:00:00 GMT 2010,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Mar 19 00:00:00 GMT 2010,
					Sat Mar 19 00:00:00 GMT 2010"/>
        <testData input="2009,-3.2,4"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Sep 04 00:00:00 GMT 2008,
					Thu Sep 04 00:00:00 GMT 2008,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Sep 04 00:00:00 GMT 2008,
					Thu Sep 04 00:00:00 GMT 2008"/>
        <testData input="2009,2,-4.2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Jan 27 00:00:00 GMT 2009,
					Tue Jan 27 00:00:00 GMT 2009,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Jan 27 00:00:00 GMT 2009,
					Tue Jan 27 00:00:00 GMT 2009"/>
        <testData input="0,2,2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Feb 02 00:00:00 GMT 1900,
					Fri Feb 02 00:00:00 GMT 1900,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Feb 02 00:00:00 GMT 1900,
					Fri Feb 02 00:00:00 GMT 1900"/>
        <testData input="2012,0,2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Dec 02 00:00:00 GMT 2011,
					Fri Dec 02 00:00:00 GMT 2011,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Dec 02 00:00:00 GMT 2011,
					Fri Dec 02 00:00:00 GMT 2011"/>
        <testData input="2012,2,0"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Jan 31 00:00:00 GMT 2012,
					Tue Jan 31 00:00:00 GMT 2012,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Jan 31 00:00:00 GMT 2012,
					Tue Jan 31 00:00:00 GMT 2012"/>
        <testData input="2013,2,29"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Mar 01 00:00:00 GMT 2013,
					Fri Mar 01 00:00:00 GMT 2013,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Mar 01 00:00:00 GMT 2013,
					Fri Mar 01 00:00:00 GMT 2013"/>
        <testData input="2013,2,28"
                  expectedOutput="Thu Feb 28 00:00:00 GMT 2013,
					2013-02-28 00:00:00.0,
					Thu Feb 28 00:00:00 GMT 2013,
					Thu Feb 28 00:00:00 GMT 2013,
					Thu Feb 28 00:00:00 GMT 2013,
					2013-02-28 00:00:00.0,
					Thu Feb 28 00:00:00 GMT 2013,
					Thu Feb 28 00:00:00 GMT 2013"/>
        <testData input="2016,2,28"
                  expectedOutput="Sun Feb 28 00:00:00 GMT 2016,
					2016-02-28 00:00:00.0,
					Sun Feb 28 00:00:00 GMT 2016,
					Sun Feb 28 00:00:00 GMT 2016,
					Sun Feb 28 00:00:00 GMT 2016,
					2016-02-28 00:00:00.0,
					Sun Feb 28 00:00:00 GMT 2016,
					Sun Feb 28 00:00:00 GMT 2016"/>
        <testData input="2016,2,29"
                  expectedOutput="Mon Feb 29 00:00:00 GMT 2016,
					2016-02-29 00:00:00.0,
					Mon Feb 29 00:00:00 GMT 2016,
					Mon Feb 29 00:00:00 GMT 2016,
					Mon Feb 29 00:00:00 GMT 2016,
					2016-02-29 00:00:00.0,
					Mon Feb 29 00:00:00 GMT 2016,
					Mon Feb 29 00:00:00 GMT 2016"/>
        <testData input="2016,2,30"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Mar 01 00:00:00 GMT 2016,
					Tue Mar 01 00:00:00 GMT 2016,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Mar 01 00:00:00 GMT 2016,
					Tue Mar 01 00:00:00 GMT 2016"/>
    </testcase>
    <testcase testName="testDateConstVarVar"
              fieldName="testDateConstVarVar"
              dataType="DateOnly"
              formula="DATE(2012,customnumber2__c,customnumber3__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customnumber3" dataType="Double"/>
        <testData input="2007,2,29"
                  expectedOutput="Wed Feb 29 00:00:00 GMT 2012,
					2012-02-29 00:00:00.0,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012,
					2012-02-29 00:00:00.0,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012"/>
        <testData input="2008,2,29"
                  expectedOutput="Wed Feb 29 00:00:00 GMT 2012,
					2012-02-29 00:00:00.0,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012,
					2012-02-29 00:00:00.0,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012"/>
        <testData input="2007,3,32"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Apr 01 00:00:00 GMT 2012,
					Sun Apr 01 00:00:00 GMT 2012,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Apr 01 00:00:00 GMT 2012,
					Sun Apr 01 00:00:00 GMT 2012"/>
        <testData input="10000,3,2"
                  expectedOutput="Fri Mar 02 00:00:00 GMT 2012,
					2012-03-02 00:00:00.0,
					Fri Mar 02 00:00:00 GMT 2012,
					Fri Mar 02 00:00:00 GMT 2012,
					Fri Mar 02 00:00:00 GMT 2012,
					2012-03-02 00:00:00.0,
					Fri Mar 02 00:00:00 GMT 2012,
					Fri Mar 02 00:00:00 GMT 2012"/>
        <testData input="9999,12,31"
                  expectedOutput="Mon Dec 31 00:00:00 GMT 2012,
					2012-12-31 00:00:00.0,
					Mon Dec 31 00:00:00 GMT 2012,
					Mon Dec 31 00:00:00 GMT 2012,
					Mon Dec 31 00:00:00 GMT 2012,
					2012-12-31 00:00:00.0,
					Mon Dec 31 00:00:00 GMT 2012,
					Mon Dec 31 00:00:00 GMT 2012"/>
        <testData input="10000,1,1"
                  expectedOutput="Sun Jan 01 00:00:00 GMT 2012,
					2012-01-01 00:00:00.0,
					Sun Jan 01 00:00:00 GMT 2012,
					Sun Jan 01 00:00:00 GMT 2012,
					Sun Jan 01 00:00:00 GMT 2012,
					2012-01-01 00:00:00.0,
					Sun Jan 01 00:00:00 GMT 2012,
					Sun Jan 01 00:00:00 GMT 2012"/>
        <testData input="1000,3,2"
                  expectedOutput="Fri Mar 02 00:00:00 GMT 2012,
					2012-03-02 00:00:00.0,
					Fri Mar 02 00:00:00 GMT 2012,
					Fri Mar 02 00:00:00 GMT 2012,
					Fri Mar 02 00:00:00 GMT 2012,
					2012-03-02 00:00:00.0,
					Fri Mar 02 00:00:00 GMT 2012,
					Fri Mar 02 00:00:00 GMT 2012"/>
        <testData input="2010,,29"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Dec 29 00:00:00 GMT 2011,
					Thu Dec 29 00:00:00 GMT 2011,
					null,
					null,
					null,
					null"/>
        <testData input="2010,2,"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Jan 31 00:00:00 GMT 2012,
					Tue Jan 31 00:00:00 GMT 2012,
					null,
					null,
					null,
					null"/>
        <testData input=",2,29"
                  expectedOutput="Wed Feb 29 00:00:00 GMT 2012,
					2012-02-29 00:00:00.0,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012,
					2012-02-29 00:00:00.0,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012"/>
        <testData input="2010,0,2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Dec 02 00:00:00 GMT 2011,
					Fri Dec 02 00:00:00 GMT 2011,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Dec 02 00:00:00 GMT 2011,
					Fri Dec 02 00:00:00 GMT 2011"/>
        <testData input=",,"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Nov 30 00:00:00 GMT 2011,
					Wed Nov 30 00:00:00 GMT 2011,
					null,
					null,
					null,
					null"/>
        <testData input="2010,,"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Nov 30 00:00:00 GMT 2011,
					Wed Nov 30 00:00:00 GMT 2011,
					null,
					null,
					null,
					null"/>
        <testData input=",2,"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Jan 31 00:00:00 GMT 2012,
					Tue Jan 31 00:00:00 GMT 2012,
					null,
					null,
					null,
					null"/>
        <testData input=",,11"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Dec 11 00:00:00 GMT 2011,
					Sun Dec 11 00:00:00 GMT 2011,
					null,
					null,
					null,
					null"/>
        <testData input="2009.5,3,2"
                  expectedOutput="Fri Mar 02 00:00:00 GMT 2012,
					2012-03-02 00:00:00.0,
					Fri Mar 02 00:00:00 GMT 2012,
					Fri Mar 02 00:00:00 GMT 2012,
					Fri Mar 02 00:00:00 GMT 2012,
					2012-03-02 00:00:00.0,
					Fri Mar 02 00:00:00 GMT 2012,
					Fri Mar 02 00:00:00 GMT 2012"/>
        <testData input="2009,3.5,2"
                  expectedOutput="Fri Mar 02 00:00:00 GMT 2012,
					2012-03-02 00:00:00.0,
					Fri Mar 02 00:00:00 GMT 2012,
					Fri Mar 02 00:00:00 GMT 2012,
					Fri Mar 02 00:00:00 GMT 2012,
					2012-03-02 00:00:00.0,
					Fri Mar 02 00:00:00 GMT 2012,
					Fri Mar 02 00:00:00 GMT 2012"/>
        <testData input="2009,3,2.5"
                  expectedOutput="Fri Mar 02 00:00:00 GMT 2012,
					2012-03-02 00:00:00.0,
					Fri Mar 02 00:00:00 GMT 2012,
					Fri Mar 02 00:00:00 GMT 2012,
					Fri Mar 02 00:00:00 GMT 2012,
					2012-03-02 00:00:00.0,
					Fri Mar 02 00:00:00 GMT 2012,
					Fri Mar 02 00:00:00 GMT 2012"/>
        <testData input="2009,12.5,31.5"
                  expectedOutput="Mon Dec 31 00:00:00 GMT 2012,
					2012-12-31 00:00:00.0,
					Mon Dec 31 00:00:00 GMT 2012,
					Mon Dec 31 00:00:00 GMT 2012,
					Mon Dec 31 00:00:00 GMT 2012,
					2012-12-31 00:00:00.0,
					Mon Dec 31 00:00:00 GMT 2012,
					Mon Dec 31 00:00:00 GMT 2012"/>
        <testData input="2009,12,32.1"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Jan 01 00:00:00 GMT 2013,
					Tue Jan 01 00:00:00 GMT 2013,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Jan 01 00:00:00 GMT 2013,
					Tue Jan 01 00:00:00 GMT 2013"/>
        <testData input="2009,12,0.9"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Nov 30 00:00:00 GMT 2012,
					Fri Nov 30 00:00:00 GMT 2012,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Nov 30 00:00:00 GMT 2012,
					Fri Nov 30 00:00:00 GMT 2012"/>
        <testData input="2009,0.9,26"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Jan 26 00:00:00 GMT 2012,
					Thu Jan 26 00:00:00 GMT 2012,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Jan 26 00:00:00 GMT 2012,
					Thu Jan 26 00:00:00 GMT 2012"/>
        <testData input="-2009,2,3"
                  expectedOutput="Fri Feb 03 00:00:00 GMT 2012,
					2012-02-03 00:00:00.0,
					Fri Feb 03 00:00:00 GMT 2012,
					Fri Feb 03 00:00:00 GMT 2012,
					Fri Feb 03 00:00:00 GMT 2012,
					2012-02-03 00:00:00.0,
					Fri Feb 03 00:00:00 GMT 2012,
					Fri Feb 03 00:00:00 GMT 2012"/>
        <testData input="2009,-3,4"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Sep 04 00:00:00 GMT 2011,
					Sun Sep 04 00:00:00 GMT 2011,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Sep 04 00:00:00 GMT 2011,
					Sun Sep 04 00:00:00 GMT 2011"/>
        <testData input="2009,3,-4"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Feb 25 00:00:00 GMT 2012,
					Sat Feb 25 00:00:00 GMT 2012,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Feb 25 00:00:00 GMT 2012,
					Sat Feb 25 00:00:00 GMT 2012"/>
        <testData input="-2009.2,3,2"
                  expectedOutput="Fri Mar 02 00:00:00 GMT 2012,
					2012-03-02 00:00:00.0,
					Fri Mar 02 00:00:00 GMT 2012,
					Fri Mar 02 00:00:00 GMT 2012,
					Fri Mar 02 00:00:00 GMT 2012,
					2012-03-02 00:00:00.0,
					Fri Mar 02 00:00:00 GMT 2012,
					Fri Mar 02 00:00:00 GMT 2012"/>
        <testData input="2009,-3.2,4"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Sep 04 00:00:00 GMT 2011,
					Sun Sep 04 00:00:00 GMT 2011,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Sep 04 00:00:00 GMT 2011,
					Sun Sep 04 00:00:00 GMT 2011"/>
        <testData input="2009,2,-4.2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Jan 27 00:00:00 GMT 2012,
					Fri Jan 27 00:00:00 GMT 2012,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Jan 27 00:00:00 GMT 2012,
					Fri Jan 27 00:00:00 GMT 2012"/>
        <testData input="0,2,2"
                  expectedOutput="Thu Feb 02 00:00:00 GMT 2012,
					2012-02-02 00:00:00.0,
					Thu Feb 02 00:00:00 GMT 2012,
					Thu Feb 02 00:00:00 GMT 2012,
					Thu Feb 02 00:00:00 GMT 2012,
					2012-02-02 00:00:00.0,
					Thu Feb 02 00:00:00 GMT 2012,
					Thu Feb 02 00:00:00 GMT 2012"/>
        <testData input="2012,0,2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Dec 02 00:00:00 GMT 2011,
					Fri Dec 02 00:00:00 GMT 2011,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Dec 02 00:00:00 GMT 2011,
					Fri Dec 02 00:00:00 GMT 2011"/>
        <testData input="2012,2,0"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Jan 31 00:00:00 GMT 2012,
					Tue Jan 31 00:00:00 GMT 2012,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Jan 31 00:00:00 GMT 2012,
					Tue Jan 31 00:00:00 GMT 2012"/>
        <testData input="2013,2,29"
                  expectedOutput="Wed Feb 29 00:00:00 GMT 2012,
					2012-02-29 00:00:00.0,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012,
					2012-02-29 00:00:00.0,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012"/>
        <testData input="2013,2,28"
                  expectedOutput="Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012"/>
        <testData input="2016,2,28"
                  expectedOutput="Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012"/>
        <testData input="2016,2,29"
                  expectedOutput="Wed Feb 29 00:00:00 GMT 2012,
					2012-02-29 00:00:00.0,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012,
					2012-02-29 00:00:00.0,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012"/>
        <testData input="2016,2,30"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Mar 01 00:00:00 GMT 2012,
					Thu Mar 01 00:00:00 GMT 2012,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Mar 01 00:00:00 GMT 2012,
					Thu Mar 01 00:00:00 GMT 2012"/>
    </testcase>
    <testcase testName="testDateVarConstVar"
              fieldName="testDateVarConstVar"
              dataType="DateOnly"
              formula="DATE(customnumber1__c,12,customnumber3__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customnumber3" dataType="Double"/>
        <testData input="2007,2,29"
                  expectedOutput="Sat Dec 29 00:00:00 GMT 2007,
					2007-12-29 00:00:00.0,
					Sat Dec 29 00:00:00 GMT 2007,
					Sat Dec 29 00:00:00 GMT 2007,
					Sat Dec 29 00:00:00 GMT 2007,
					2007-12-29 00:00:00.0,
					Sat Dec 29 00:00:00 GMT 2007,
					Sat Dec 29 00:00:00 GMT 2007"/>
        <testData input="2008,2,29"
                  expectedOutput="Mon Dec 29 00:00:00 GMT 2008,
					2008-12-29 00:00:00.0,
					Mon Dec 29 00:00:00 GMT 2008,
					Mon Dec 29 00:00:00 GMT 2008,
					Mon Dec 29 00:00:00 GMT 2008,
					2008-12-29 00:00:00.0,
					Mon Dec 29 00:00:00 GMT 2008,
					Mon Dec 29 00:00:00 GMT 2008"/>
        <testData input="2007,3,32"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Jan 01 00:00:00 GMT 2008,
					Tue Jan 01 00:00:00 GMT 2008,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Jan 01 00:00:00 GMT 2008,
					Tue Jan 01 00:00:00 GMT 2008"/>
        <testData input="10000,3,2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Dec 02 00:00:00 GMT 10000,
					Sat Dec 02 00:00:00 GMT 10000,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Dec 02 00:00:00 GMT 10000,
					Sat Dec 02 00:00:00 GMT 10000"/>
        <testData input="9999,12,31"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 9999,
					9999-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 9999,
					Fri Dec 31 00:00:00 GMT 9999,
					Fri Dec 31 00:00:00 GMT 9999,
					9999-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 9999,
					Fri Dec 31 00:00:00 GMT 9999"/>
        <testData input="10000,1,1"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Dec 01 00:00:00 GMT 10000,
					Fri Dec 01 00:00:00 GMT 10000,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Dec 01 00:00:00 GMT 10000,
					Fri Dec 01 00:00:00 GMT 10000"/>
        <testData input="1000,3,2"
                  expectedOutput="Mon Dec 02 00:00:00 GMT 1000,
					1000-12-02 00:00:00.0,
					Tue Nov 26 00:00:00 GMT 1000,
					Tue Nov 26 00:00:00 GMT 1000,
					Mon Dec 02 00:00:00 GMT 1000,
					1000-12-02 00:00:00.0,
					Tue Nov 26 00:00:00 GMT 1000,
					Tue Nov 26 00:00:00 GMT 1000"/>
        <testData input="2010,,29"
                  expectedOutput="Wed Dec 29 00:00:00 GMT 2010,
					2010-12-29 00:00:00.0,
					Wed Dec 29 00:00:00 GMT 2010,
					Wed Dec 29 00:00:00 GMT 2010,
					Wed Dec 29 00:00:00 GMT 2010,
					2010-12-29 00:00:00.0,
					Wed Dec 29 00:00:00 GMT 2010,
					Wed Dec 29 00:00:00 GMT 2010"/>
        <testData input="2010,2,"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Nov 30 00:00:00 GMT 2010,
					Tue Nov 30 00:00:00 GMT 2010,
					null,
					null,
					null,
					null"/>
        <testData input=",2,29"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Dec 29 00:00:00 GMT 1900,
					Sat Dec 29 00:00:00 GMT 1900,
					null,
					null,
					null,
					null"/>
        <testData input="2010,0,2"
                  expectedOutput="Thu Dec 02 00:00:00 GMT 2010,
					2010-12-02 00:00:00.0,
					Thu Dec 02 00:00:00 GMT 2010,
					Thu Dec 02 00:00:00 GMT 2010,
					Thu Dec 02 00:00:00 GMT 2010,
					2010-12-02 00:00:00.0,
					Thu Dec 02 00:00:00 GMT 2010,
					Thu Dec 02 00:00:00 GMT 2010"/>
        <testData input=",,"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Nov 30 00:00:00 GMT 1900,
					Fri Nov 30 00:00:00 GMT 1900,
					null,
					null,
					null,
					null"/>
        <testData input="2010,,"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Nov 30 00:00:00 GMT 2010,
					Tue Nov 30 00:00:00 GMT 2010,
					null,
					null,
					null,
					null"/>
        <testData input=",2,"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Nov 30 00:00:00 GMT 1900,
					Fri Nov 30 00:00:00 GMT 1900,
					null,
					null,
					null,
					null"/>
        <testData input=",,11"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Dec 11 00:00:00 GMT 1900,
					Tue Dec 11 00:00:00 GMT 1900,
					null,
					null,
					null,
					null"/>
        <testData input="2009.5,3,2"
                  expectedOutput="Wed Dec 02 00:00:00 GMT 2009,
					2009-12-02 00:00:00.0,
					Wed Dec 02 00:00:00 GMT 2009,
					Wed Dec 02 00:00:00 GMT 2009,
					Wed Dec 02 00:00:00 GMT 2009,
					2009-12-02 00:00:00.0,
					Wed Dec 02 00:00:00 GMT 2009,
					Wed Dec 02 00:00:00 GMT 2009"/>
        <testData input="2009,3.5,2"
                  expectedOutput="Wed Dec 02 00:00:00 GMT 2009,
					2009-12-02 00:00:00.0,
					Wed Dec 02 00:00:00 GMT 2009,
					Wed Dec 02 00:00:00 GMT 2009,
					Wed Dec 02 00:00:00 GMT 2009,
					2009-12-02 00:00:00.0,
					Wed Dec 02 00:00:00 GMT 2009,
					Wed Dec 02 00:00:00 GMT 2009"/>
        <testData input="2009,3,2.5"
                  expectedOutput="Wed Dec 02 00:00:00 GMT 2009,
					2009-12-02 00:00:00.0,
					Wed Dec 02 00:00:00 GMT 2009,
					Wed Dec 02 00:00:00 GMT 2009,
					Wed Dec 02 00:00:00 GMT 2009,
					2009-12-02 00:00:00.0,
					Wed Dec 02 00:00:00 GMT 2009,
					Wed Dec 02 00:00:00 GMT 2009"/>
        <testData input="2009,12.5,31.5"
                  expectedOutput="Thu Dec 31 00:00:00 GMT 2009,
					2009-12-31 00:00:00.0,
					Thu Dec 31 00:00:00 GMT 2009,
					Thu Dec 31 00:00:00 GMT 2009,
					Thu Dec 31 00:00:00 GMT 2009,
					2009-12-31 00:00:00.0,
					Thu Dec 31 00:00:00 GMT 2009,
					Thu Dec 31 00:00:00 GMT 2009"/>
        <testData input="2009,12,32.1"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Jan 01 00:00:00 GMT 2010,
					Fri Jan 01 00:00:00 GMT 2010,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Jan 01 00:00:00 GMT 2010,
					Fri Jan 01 00:00:00 GMT 2010"/>
        <testData input="2009,12,0.9"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Mon Nov 30 00:00:00 GMT 2009,
					Mon Nov 30 00:00:00 GMT 2009,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Mon Nov 30 00:00:00 GMT 2009,
					Mon Nov 30 00:00:00 GMT 2009"/>
        <testData input="2009,0.9,26"
                  expectedOutput="Sat Dec 26 00:00:00 GMT 2009,
					2009-12-26 00:00:00.0,
					Sat Dec 26 00:00:00 GMT 2009,
					Sat Dec 26 00:00:00 GMT 2009,
					Sat Dec 26 00:00:00 GMT 2009,
					2009-12-26 00:00:00.0,
					Sat Dec 26 00:00:00 GMT 2009,
					Sat Dec 26 00:00:00 GMT 2009"/>
        <testData input="-2009,2,3"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Dec 20 00:00:00 GMT 2010,
					Tue Dec 20 00:00:00 GMT 2010,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Dec 20 00:00:00 GMT 2010,
					Tue Dec 20 00:00:00 GMT 2010"/>
        <testData input="2009,-3,4"
                  expectedOutput="Fri Dec 04 00:00:00 GMT 2009,
					2009-12-04 00:00:00.0,
					Fri Dec 04 00:00:00 GMT 2009,
					Fri Dec 04 00:00:00 GMT 2009,
					Fri Dec 04 00:00:00 GMT 2009,
					2009-12-04 00:00:00.0,
					Fri Dec 04 00:00:00 GMT 2009,
					Fri Dec 04 00:00:00 GMT 2009"/>
        <testData input="2009,3,-4"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Nov 26 00:00:00 GMT 2009,
					Thu Nov 26 00:00:00 GMT 2009,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Nov 26 00:00:00 GMT 2009,
					Thu Nov 26 00:00:00 GMT 2009"/>
        <testData input="-2009.2,3,2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Mon Dec 19 00:00:00 GMT 2010,
					Mon Dec 19 00:00:00 GMT 2010,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Mon Dec 19 00:00:00 GMT 2010,
					Mon Dec 19 00:00:00 GMT 2010"/>
        <testData input="2009,-3.2,4"
                  expectedOutput="Fri Dec 04 00:00:00 GMT 2009,
					2009-12-04 00:00:00.0,
					Fri Dec 04 00:00:00 GMT 2009,
					Fri Dec 04 00:00:00 GMT 2009,
					Fri Dec 04 00:00:00 GMT 2009,
					2009-12-04 00:00:00.0,
					Fri Dec 04 00:00:00 GMT 2009,
					Fri Dec 04 00:00:00 GMT 2009"/>
        <testData input="2009,2,-4.2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Nov 26 00:00:00 GMT 2009,
					Thu Nov 26 00:00:00 GMT 2009,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Nov 26 00:00:00 GMT 2009,
					Thu Nov 26 00:00:00 GMT 2009"/>
        <testData input="0,2,2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Dec 02 00:00:00 GMT 1900,
					Sun Dec 02 00:00:00 GMT 1900,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Dec 02 00:00:00 GMT 1900,
					Sun Dec 02 00:00:00 GMT 1900"/>
        <testData input="2012,0,2"
                  expectedOutput="Sun Dec 02 00:00:00 GMT 2012,
					2012-12-02 00:00:00.0,
					Sun Dec 02 00:00:00 GMT 2012,
					Sun Dec 02 00:00:00 GMT 2012,
					Sun Dec 02 00:00:00 GMT 2012,
					2012-12-02 00:00:00.0,
					Sun Dec 02 00:00:00 GMT 2012,
					Sun Dec 02 00:00:00 GMT 2012"/>
        <testData input="2012,2,0"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Nov 30 00:00:00 GMT 2012,
					Fri Nov 30 00:00:00 GMT 2012,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Nov 30 00:00:00 GMT 2012,
					Fri Nov 30 00:00:00 GMT 2012"/>
        <testData input="2013,2,29"
                  expectedOutput="Sun Dec 29 00:00:00 GMT 2013,
					2013-12-29 00:00:00.0,
					Sun Dec 29 00:00:00 GMT 2013,
					Sun Dec 29 00:00:00 GMT 2013,
					Sun Dec 29 00:00:00 GMT 2013,
					2013-12-29 00:00:00.0,
					Sun Dec 29 00:00:00 GMT 2013,
					Sun Dec 29 00:00:00 GMT 2013"/>
        <testData input="2013,2,28"
                  expectedOutput="Sat Dec 28 00:00:00 GMT 2013,
					2013-12-28 00:00:00.0,
					Sat Dec 28 00:00:00 GMT 2013,
					Sat Dec 28 00:00:00 GMT 2013,
					Sat Dec 28 00:00:00 GMT 2013,
					2013-12-28 00:00:00.0,
					Sat Dec 28 00:00:00 GMT 2013,
					Sat Dec 28 00:00:00 GMT 2013"/>
        <testData input="2016,2,28"
                  expectedOutput="Wed Dec 28 00:00:00 GMT 2016,
					2016-12-28 00:00:00.0,
					Wed Dec 28 00:00:00 GMT 2016,
					Wed Dec 28 00:00:00 GMT 2016,
					Wed Dec 28 00:00:00 GMT 2016,
					2016-12-28 00:00:00.0,
					Wed Dec 28 00:00:00 GMT 2016,
					Wed Dec 28 00:00:00 GMT 2016"/>
        <testData input="2016,2,29"
                  expectedOutput="Thu Dec 29 00:00:00 GMT 2016,
					2016-12-29 00:00:00.0,
					Thu Dec 29 00:00:00 GMT 2016,
					Thu Dec 29 00:00:00 GMT 2016,
					Thu Dec 29 00:00:00 GMT 2016,
					2016-12-29 00:00:00.0,
					Thu Dec 29 00:00:00 GMT 2016,
					Thu Dec 29 00:00:00 GMT 2016"/>
        <testData input="2016,2,30"
                  expectedOutput="Fri Dec 30 00:00:00 GMT 2016,
					2016-12-30 00:00:00.0,
					Fri Dec 30 00:00:00 GMT 2016,
					Fri Dec 30 00:00:00 GMT 2016,
					Fri Dec 30 00:00:00 GMT 2016,
					2016-12-30 00:00:00.0,
					Fri Dec 30 00:00:00 GMT 2016,
					Fri Dec 30 00:00:00 GMT 2016"/>
    </testcase>
    <testcase testName="testDateVarVarConst"
              fieldName="testDateVarVarConst"
              dataType="DateOnly"
              formula="DATE(customnumber1__c,customnumber2__c,28)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customnumber3" dataType="Double"/>
        <testData input="2007,2,29"
                  expectedOutput="Wed Feb 28 00:00:00 GMT 2007,
					2007-02-28 00:00:00.0,
					Wed Feb 28 00:00:00 GMT 2007,
					Wed Feb 28 00:00:00 GMT 2007,
					Wed Feb 28 00:00:00 GMT 2007,
					2007-02-28 00:00:00.0,
					Wed Feb 28 00:00:00 GMT 2007,
					Wed Feb 28 00:00:00 GMT 2007"/>
        <testData input="2008,2,29"
                  expectedOutput="Thu Feb 28 00:00:00 GMT 2008,
					2008-02-28 00:00:00.0,
					Thu Feb 28 00:00:00 GMT 2008,
					Thu Feb 28 00:00:00 GMT 2008,
					Thu Feb 28 00:00:00 GMT 2008,
					2008-02-28 00:00:00.0,
					Thu Feb 28 00:00:00 GMT 2008,
					Thu Feb 28 00:00:00 GMT 2008"/>
        <testData input="2007,3,32"
                  expectedOutput="Wed Mar 28 00:00:00 GMT 2007,
					2007-03-28 00:00:00.0,
					Wed Mar 28 00:00:00 GMT 2007,
					Wed Mar 28 00:00:00 GMT 2007,
					Wed Mar 28 00:00:00 GMT 2007,
					2007-03-28 00:00:00.0,
					Wed Mar 28 00:00:00 GMT 2007,
					Wed Mar 28 00:00:00 GMT 2007"/>
        <testData input="10000,3,2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Mar 28 00:00:00 GMT 10000,
					Tue Mar 28 00:00:00 GMT 10000,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Mar 28 00:00:00 GMT 10000,
					Tue Mar 28 00:00:00 GMT 10000"/>
        <testData input="9999,12,31"
                  expectedOutput="Tue Dec 28 00:00:00 GMT 9999,
					9999-12-28 00:00:00.0,
					Tue Dec 28 00:00:00 GMT 9999,
					Tue Dec 28 00:00:00 GMT 9999,
					Tue Dec 28 00:00:00 GMT 9999,
					9999-12-28 00:00:00.0,
					Tue Dec 28 00:00:00 GMT 9999,
					Tue Dec 28 00:00:00 GMT 9999"/>
        <testData input="10000,1,1"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Jan 28 00:00:00 GMT 10000,
					Fri Jan 28 00:00:00 GMT 10000,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Jan 28 00:00:00 GMT 10000,
					Fri Jan 28 00:00:00 GMT 10000"/>
        <testData input="1000,3,2"
                  expectedOutput="Thu Mar 28 00:00:00 GMT 1000,
					1000-03-28 00:00:00.0,
					Fri Mar 22 00:00:00 GMT 1000,
					Fri Mar 22 00:00:00 GMT 1000,
					Thu Mar 28 00:00:00 GMT 1000,
					1000-03-28 00:00:00.0,
					Fri Mar 22 00:00:00 GMT 1000,
					Fri Mar 22 00:00:00 GMT 1000"/>
        <testData input="2010,,29"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Mon Dec 28 00:00:00 GMT 2009,
					Mon Dec 28 00:00:00 GMT 2009,
					null,
					null,
					null,
					null"/>
        <testData input="2010,2,"
                  expectedOutput="Sun Feb 28 00:00:00 GMT 2010,
					2010-02-28 00:00:00.0,
					Sun Feb 28 00:00:00 GMT 2010,
					Sun Feb 28 00:00:00 GMT 2010,
					Sun Feb 28 00:00:00 GMT 2010,
					2010-02-28 00:00:00.0,
					Sun Feb 28 00:00:00 GMT 2010,
					Sun Feb 28 00:00:00 GMT 2010"/>
        <testData input=",2,29"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Feb 28 00:00:00 GMT 1900,
					Wed Feb 28 00:00:00 GMT 1900,
					null,
					null,
					null,
					null"/>
        <testData input="2010,0,2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Mon Dec 28 00:00:00 GMT 2009,
					Mon Dec 28 00:00:00 GMT 2009,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Mon Dec 28 00:00:00 GMT 2009,
					Mon Dec 28 00:00:00 GMT 2009"/>
        <testData input=",,"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Dec 28 00:00:00 GMT 1899,
					Thu Dec 28 00:00:00 GMT 1899,
					null,
					null,
					null,
					null"/>
        <testData input="2010,,"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Mon Dec 28 00:00:00 GMT 2009,
					Mon Dec 28 00:00:00 GMT 2009,
					null,
					null,
					null,
					null"/>
        <testData input=",2,"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Feb 28 00:00:00 GMT 1900,
					Wed Feb 28 00:00:00 GMT 1900,
					null,
					null,
					null,
					null"/>
        <testData input=",,11"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Dec 28 00:00:00 GMT 1899,
					Thu Dec 28 00:00:00 GMT 1899,
					null,
					null,
					null,
					null"/>
        <testData input="2009.5,3,2"
                  expectedOutput="Sat Mar 28 00:00:00 GMT 2009,
					2009-03-28 00:00:00.0,
					Sat Mar 28 00:00:00 GMT 2009,
					Sat Mar 28 00:00:00 GMT 2009,
					Sat Mar 28 00:00:00 GMT 2009,
					2009-03-28 00:00:00.0,
					Sat Mar 28 00:00:00 GMT 2009,
					Sat Mar 28 00:00:00 GMT 2009"/>
        <testData input="2009,3.5,2"
                  expectedOutput="Sat Mar 28 00:00:00 GMT 2009,
					2009-03-28 00:00:00.0,
					Sat Mar 28 00:00:00 GMT 2009,
					Sat Mar 28 00:00:00 GMT 2009,
					Sat Mar 28 00:00:00 GMT 2009,
					2009-03-28 00:00:00.0,
					Sat Mar 28 00:00:00 GMT 2009,
					Sat Mar 28 00:00:00 GMT 2009"/>
        <testData input="2009,3,2.5"
                  expectedOutput="Sat Mar 28 00:00:00 GMT 2009,
					2009-03-28 00:00:00.0,
					Sat Mar 28 00:00:00 GMT 2009,
					Sat Mar 28 00:00:00 GMT 2009,
					Sat Mar 28 00:00:00 GMT 2009,
					2009-03-28 00:00:00.0,
					Sat Mar 28 00:00:00 GMT 2009,
					Sat Mar 28 00:00:00 GMT 2009"/>
        <testData input="2009,12.5,31.5"
                  expectedOutput="Mon Dec 28 00:00:00 GMT 2009,
					2009-12-28 00:00:00.0,
					Mon Dec 28 00:00:00 GMT 2009,
					Mon Dec 28 00:00:00 GMT 2009,
					Mon Dec 28 00:00:00 GMT 2009,
					2009-12-28 00:00:00.0,
					Mon Dec 28 00:00:00 GMT 2009,
					Mon Dec 28 00:00:00 GMT 2009"/>
        <testData input="2009,12,32.1"
                  expectedOutput="Mon Dec 28 00:00:00 GMT 2009,
					2009-12-28 00:00:00.0,
					Mon Dec 28 00:00:00 GMT 2009,
					Mon Dec 28 00:00:00 GMT 2009,
					Mon Dec 28 00:00:00 GMT 2009,
					2009-12-28 00:00:00.0,
					Mon Dec 28 00:00:00 GMT 2009,
					Mon Dec 28 00:00:00 GMT 2009"/>
        <testData input="2009,12,0.9"
                  expectedOutput="Mon Dec 28 00:00:00 GMT 2009,
					2009-12-28 00:00:00.0,
					Mon Dec 28 00:00:00 GMT 2009,
					Mon Dec 28 00:00:00 GMT 2009,
					Mon Dec 28 00:00:00 GMT 2009,
					2009-12-28 00:00:00.0,
					Mon Dec 28 00:00:00 GMT 2009,
					Mon Dec 28 00:00:00 GMT 2009"/>
        <testData input="2009,0.9,26"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Jan 28 00:00:00 GMT 2009,
					Wed Jan 28 00:00:00 GMT 2009,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Jan 28 00:00:00 GMT 2009,
					Wed Jan 28 00:00:00 GMT 2009"/>
        <testData input="-2009,2,3"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Mar 17 00:00:00 GMT 2010,
					Thu Mar 17 00:00:00 GMT 2010,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Mar 17 00:00:00 GMT 2010,
					Thu Mar 17 00:00:00 GMT 2010"/>
        <testData input="2009,-3,4"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Sep 28 00:00:00 GMT 2008,
					Sun Sep 28 00:00:00 GMT 2008,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Sep 28 00:00:00 GMT 2008,
					Sun Sep 28 00:00:00 GMT 2008"/>
        <testData input="2009,3,-4"
                  expectedOutput="Sat Mar 28 00:00:00 GMT 2009,
					2009-03-28 00:00:00.0,
					Sat Mar 28 00:00:00 GMT 2009,
					Sat Mar 28 00:00:00 GMT 2009,
					Sat Mar 28 00:00:00 GMT 2009,
					2009-03-28 00:00:00.0,
					Sat Mar 28 00:00:00 GMT 2009,
					Sat Mar 28 00:00:00 GMT 2009"/>
        <testData input="-2009.2,3,2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Apr 14 00:00:00 GMT 2010,
					Thu Apr 14 00:00:00 GMT 2010,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Apr 14 00:00:00 GMT 2010,
					Thu Apr 14 00:00:00 GMT 2010"/>
        <testData input="2009,-3.2,4"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Sep 28 00:00:00 GMT 2008,
					Sun Sep 28 00:00:00 GMT 2008,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Sep 28 00:00:00 GMT 2008,
					Sun Sep 28 00:00:00 GMT 2008"/>
        <testData input="2009,2,-4.2"
                  expectedOutput="Sat Feb 28 00:00:00 GMT 2009,
					2009-02-28 00:00:00.0,
					Sat Feb 28 00:00:00 GMT 2009,
					Sat Feb 28 00:00:00 GMT 2009,
					Sat Feb 28 00:00:00 GMT 2009,
					2009-02-28 00:00:00.0,
					Sat Feb 28 00:00:00 GMT 2009,
					Sat Feb 28 00:00:00 GMT 2009"/>
        <testData input="0,2,2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Feb 28 00:00:00 GMT 1900,
					Wed Feb 28 00:00:00 GMT 1900,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Feb 28 00:00:00 GMT 1900,
					Wed Feb 28 00:00:00 GMT 1900"/>
        <testData input="2012,0,2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Dec 28 00:00:00 GMT 2011,
					Wed Dec 28 00:00:00 GMT 2011,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Dec 28 00:00:00 GMT 2011,
					Wed Dec 28 00:00:00 GMT 2011"/>
        <testData input="2012,2,0"
                  expectedOutput="Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012"/>
        <testData input="2013,2,29"
                  expectedOutput="Thu Feb 28 00:00:00 GMT 2013,
					2013-02-28 00:00:00.0,
					Thu Feb 28 00:00:00 GMT 2013,
					Thu Feb 28 00:00:00 GMT 2013,
					Thu Feb 28 00:00:00 GMT 2013,
					2013-02-28 00:00:00.0,
					Thu Feb 28 00:00:00 GMT 2013,
					Thu Feb 28 00:00:00 GMT 2013"/>
        <testData input="2013,2,28"
                  expectedOutput="Thu Feb 28 00:00:00 GMT 2013,
					2013-02-28 00:00:00.0,
					Thu Feb 28 00:00:00 GMT 2013,
					Thu Feb 28 00:00:00 GMT 2013,
					Thu Feb 28 00:00:00 GMT 2013,
					2013-02-28 00:00:00.0,
					Thu Feb 28 00:00:00 GMT 2013,
					Thu Feb 28 00:00:00 GMT 2013"/>
        <testData input="2016,2,28"
                  expectedOutput="Sun Feb 28 00:00:00 GMT 2016,
					2016-02-28 00:00:00.0,
					Sun Feb 28 00:00:00 GMT 2016,
					Sun Feb 28 00:00:00 GMT 2016,
					Sun Feb 28 00:00:00 GMT 2016,
					2016-02-28 00:00:00.0,
					Sun Feb 28 00:00:00 GMT 2016,
					Sun Feb 28 00:00:00 GMT 2016"/>
        <testData input="2016,2,29"
                  expectedOutput="Sun Feb 28 00:00:00 GMT 2016,
					2016-02-28 00:00:00.0,
					Sun Feb 28 00:00:00 GMT 2016,
					Sun Feb 28 00:00:00 GMT 2016,
					Sun Feb 28 00:00:00 GMT 2016,
					2016-02-28 00:00:00.0,
					Sun Feb 28 00:00:00 GMT 2016,
					Sun Feb 28 00:00:00 GMT 2016"/>
        <testData input="2016,2,30"
                  expectedOutput="Sun Feb 28 00:00:00 GMT 2016,
					2016-02-28 00:00:00.0,
					Sun Feb 28 00:00:00 GMT 2016,
					Sun Feb 28 00:00:00 GMT 2016,
					Sun Feb 28 00:00:00 GMT 2016,
					2016-02-28 00:00:00.0,
					Sun Feb 28 00:00:00 GMT 2016,
					Sun Feb 28 00:00:00 GMT 2016"/>
    </testcase>
    <testcase testName="testDateVarConstConst"
              fieldName="testDateVarConstConst"
              dataType="DateOnly"
              formula="DATE(customnumber1__c,11,25)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customnumber3" dataType="Double"/>
        <testData input="2007,2,29"
                  expectedOutput="Sun Nov 25 00:00:00 GMT 2007,
					2007-11-25 00:00:00.0,
					Sun Nov 25 00:00:00 GMT 2007,
					Sun Nov 25 00:00:00 GMT 2007,
					Sun Nov 25 00:00:00 GMT 2007,
					2007-11-25 00:00:00.0,
					Sun Nov 25 00:00:00 GMT 2007,
					Sun Nov 25 00:00:00 GMT 2007"/>
        <testData input="2008,2,29"
                  expectedOutput="Tue Nov 25 00:00:00 GMT 2008,
					2008-11-25 00:00:00.0,
					Tue Nov 25 00:00:00 GMT 2008,
					Tue Nov 25 00:00:00 GMT 2008,
					Tue Nov 25 00:00:00 GMT 2008,
					2008-11-25 00:00:00.0,
					Tue Nov 25 00:00:00 GMT 2008,
					Tue Nov 25 00:00:00 GMT 2008"/>
        <testData input="2007,3,32"
                  expectedOutput="Sun Nov 25 00:00:00 GMT 2007,
					2007-11-25 00:00:00.0,
					Sun Nov 25 00:00:00 GMT 2007,
					Sun Nov 25 00:00:00 GMT 2007,
					Sun Nov 25 00:00:00 GMT 2007,
					2007-11-25 00:00:00.0,
					Sun Nov 25 00:00:00 GMT 2007,
					Sun Nov 25 00:00:00 GMT 2007"/>
        <testData input="10000,3,2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Nov 25 00:00:00 GMT 10000,
					Sat Nov 25 00:00:00 GMT 10000,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Nov 25 00:00:00 GMT 10000,
					Sat Nov 25 00:00:00 GMT 10000"/>
        <testData input="9999,12,31"
                  expectedOutput="Thu Nov 25 00:00:00 GMT 9999,
					9999-11-25 00:00:00.0,
					Thu Nov 25 00:00:00 GMT 9999,
					Thu Nov 25 00:00:00 GMT 9999,
					Thu Nov 25 00:00:00 GMT 9999,
					9999-11-25 00:00:00.0,
					Thu Nov 25 00:00:00 GMT 9999,
					Thu Nov 25 00:00:00 GMT 9999"/>
        <testData input="10000,1,1"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Nov 25 00:00:00 GMT 10000,
					Sat Nov 25 00:00:00 GMT 10000,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Nov 25 00:00:00 GMT 10000,
					Sat Nov 25 00:00:00 GMT 10000"/>
        <testData input="1000,3,2"
                  expectedOutput="Mon Nov 25 00:00:00 GMT 1000,
					1000-11-25 00:00:00.0,
					Tue Nov 19 00:00:00 GMT 1000,
					Tue Nov 19 00:00:00 GMT 1000,
					Mon Nov 25 00:00:00 GMT 1000,
					1000-11-25 00:00:00.0,
					Tue Nov 19 00:00:00 GMT 1000,
					Tue Nov 19 00:00:00 GMT 1000"/>
        <testData input="2010,,29"
                  expectedOutput="Thu Nov 25 00:00:00 GMT 2010,
					2010-11-25 00:00:00.0,
					Thu Nov 25 00:00:00 GMT 2010,
					Thu Nov 25 00:00:00 GMT 2010,
					Thu Nov 25 00:00:00 GMT 2010,
					2010-11-25 00:00:00.0,
					Thu Nov 25 00:00:00 GMT 2010,
					Thu Nov 25 00:00:00 GMT 2010"/>
        <testData input="2010,2,"
                  expectedOutput="Thu Nov 25 00:00:00 GMT 2010,
					2010-11-25 00:00:00.0,
					Thu Nov 25 00:00:00 GMT 2010,
					Thu Nov 25 00:00:00 GMT 2010,
					Thu Nov 25 00:00:00 GMT 2010,
					2010-11-25 00:00:00.0,
					Thu Nov 25 00:00:00 GMT 2010,
					Thu Nov 25 00:00:00 GMT 2010"/>
        <testData input=",2,29"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Nov 25 00:00:00 GMT 1900,
					Sun Nov 25 00:00:00 GMT 1900,
					null,
					null,
					null,
					null"/>
        <testData input="2010,0,2"
                  expectedOutput="Thu Nov 25 00:00:00 GMT 2010,
					2010-11-25 00:00:00.0,
					Thu Nov 25 00:00:00 GMT 2010,
					Thu Nov 25 00:00:00 GMT 2010,
					Thu Nov 25 00:00:00 GMT 2010,
					2010-11-25 00:00:00.0,
					Thu Nov 25 00:00:00 GMT 2010,
					Thu Nov 25 00:00:00 GMT 2010"/>
        <testData input=",,"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Nov 25 00:00:00 GMT 1900,
					Sun Nov 25 00:00:00 GMT 1900,
					null,
					null,
					null,
					null"/>
        <testData input="2010,,"
                  expectedOutput="Thu Nov 25 00:00:00 GMT 2010,
					2010-11-25 00:00:00.0,
					Thu Nov 25 00:00:00 GMT 2010,
					Thu Nov 25 00:00:00 GMT 2010,
					Thu Nov 25 00:00:00 GMT 2010,
					2010-11-25 00:00:00.0,
					Thu Nov 25 00:00:00 GMT 2010,
					Thu Nov 25 00:00:00 GMT 2010"/>
        <testData input=",2,"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Nov 25 00:00:00 GMT 1900,
					Sun Nov 25 00:00:00 GMT 1900,
					null,
					null,
					null,
					null"/>
        <testData input=",,11"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Nov 25 00:00:00 GMT 1900,
					Sun Nov 25 00:00:00 GMT 1900,
					null,
					null,
					null,
					null"/>
        <testData input="2009.5,3,2"
                  expectedOutput="Wed Nov 25 00:00:00 GMT 2009,
					2009-11-25 00:00:00.0,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009,
					2009-11-25 00:00:00.0,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009"/>
        <testData input="2009,3.5,2"
                  expectedOutput="Wed Nov 25 00:00:00 GMT 2009,
					2009-11-25 00:00:00.0,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009,
					2009-11-25 00:00:00.0,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009"/>
        <testData input="2009,3,2.5"
                  expectedOutput="Wed Nov 25 00:00:00 GMT 2009,
					2009-11-25 00:00:00.0,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009,
					2009-11-25 00:00:00.0,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009"/>
        <testData input="2009,12.5,31.5"
                  expectedOutput="Wed Nov 25 00:00:00 GMT 2009,
					2009-11-25 00:00:00.0,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009,
					2009-11-25 00:00:00.0,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009"/>
        <testData input="2009,12,32.1"
                  expectedOutput="Wed Nov 25 00:00:00 GMT 2009,
					2009-11-25 00:00:00.0,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009,
					2009-11-25 00:00:00.0,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009"/>
        <testData input="2009,12,0.9"
                  expectedOutput="Wed Nov 25 00:00:00 GMT 2009,
					2009-11-25 00:00:00.0,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009,
					2009-11-25 00:00:00.0,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009"/>
        <testData input="2009,0.9,26"
                  expectedOutput="Wed Nov 25 00:00:00 GMT 2009,
					2009-11-25 00:00:00.0,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009,
					2009-11-25 00:00:00.0,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009"/>
        <testData input="-2009,2,3"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Mon Dec 12 00:00:00 GMT 2010,
					Mon Dec 12 00:00:00 GMT 2010,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Mon Dec 12 00:00:00 GMT 2010,
					Mon Dec 12 00:00:00 GMT 2010"/>
        <testData input="2009,-3,4"
                  expectedOutput="Wed Nov 25 00:00:00 GMT 2009,
					2009-11-25 00:00:00.0,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009,
					2009-11-25 00:00:00.0,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009"/>
        <testData input="2009,3,-4"
                  expectedOutput="Wed Nov 25 00:00:00 GMT 2009,
					2009-11-25 00:00:00.0,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009,
					2009-11-25 00:00:00.0,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009"/>
        <testData input="-2009.2,3,2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Mon Dec 12 00:00:00 GMT 2010,
					Mon Dec 12 00:00:00 GMT 2010,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Mon Dec 12 00:00:00 GMT 2010,
					Mon Dec 12 00:00:00 GMT 2010"/>
        <testData input="2009,-3.2,4"
                  expectedOutput="Wed Nov 25 00:00:00 GMT 2009,
					2009-11-25 00:00:00.0,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009,
					2009-11-25 00:00:00.0,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009"/>
        <testData input="2009,2,-4.2"
                  expectedOutput="Wed Nov 25 00:00:00 GMT 2009,
					2009-11-25 00:00:00.0,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009,
					2009-11-25 00:00:00.0,
					Wed Nov 25 00:00:00 GMT 2009,
					Wed Nov 25 00:00:00 GMT 2009"/>
        <testData input="0,2,2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Nov 25 00:00:00 GMT 1900,
					Sun Nov 25 00:00:00 GMT 1900,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Nov 25 00:00:00 GMT 1900,
					Sun Nov 25 00:00:00 GMT 1900"/>
        <testData input="2012,0,2"
                  expectedOutput="Sun Nov 25 00:00:00 GMT 2012,
					2012-11-25 00:00:00.0,
					Sun Nov 25 00:00:00 GMT 2012,
					Sun Nov 25 00:00:00 GMT 2012,
					Sun Nov 25 00:00:00 GMT 2012,
					2012-11-25 00:00:00.0,
					Sun Nov 25 00:00:00 GMT 2012,
					Sun Nov 25 00:00:00 GMT 2012"/>
        <testData input="2012,2,0"
                  expectedOutput="Sun Nov 25 00:00:00 GMT 2012,
					2012-11-25 00:00:00.0,
					Sun Nov 25 00:00:00 GMT 2012,
					Sun Nov 25 00:00:00 GMT 2012,
					Sun Nov 25 00:00:00 GMT 2012,
					2012-11-25 00:00:00.0,
					Sun Nov 25 00:00:00 GMT 2012,
					Sun Nov 25 00:00:00 GMT 2012"/>
        <testData input="2013,2,29"
                  expectedOutput="Mon Nov 25 00:00:00 GMT 2013,
					2013-11-25 00:00:00.0,
					Mon Nov 25 00:00:00 GMT 2013,
					Mon Nov 25 00:00:00 GMT 2013,
					Mon Nov 25 00:00:00 GMT 2013,
					2013-11-25 00:00:00.0,
					Mon Nov 25 00:00:00 GMT 2013,
					Mon Nov 25 00:00:00 GMT 2013"/>
        <testData input="2013,2,28"
                  expectedOutput="Mon Nov 25 00:00:00 GMT 2013,
					2013-11-25 00:00:00.0,
					Mon Nov 25 00:00:00 GMT 2013,
					Mon Nov 25 00:00:00 GMT 2013,
					Mon Nov 25 00:00:00 GMT 2013,
					2013-11-25 00:00:00.0,
					Mon Nov 25 00:00:00 GMT 2013,
					Mon Nov 25 00:00:00 GMT 2013"/>
        <testData input="2016,2,28"
                  expectedOutput="Fri Nov 25 00:00:00 GMT 2016,
					2016-11-25 00:00:00.0,
					Fri Nov 25 00:00:00 GMT 2016,
					Fri Nov 25 00:00:00 GMT 2016,
					Fri Nov 25 00:00:00 GMT 2016,
					2016-11-25 00:00:00.0,
					Fri Nov 25 00:00:00 GMT 2016,
					Fri Nov 25 00:00:00 GMT 2016"/>
        <testData input="2016,2,29"
                  expectedOutput="Fri Nov 25 00:00:00 GMT 2016,
					2016-11-25 00:00:00.0,
					Fri Nov 25 00:00:00 GMT 2016,
					Fri Nov 25 00:00:00 GMT 2016,
					Fri Nov 25 00:00:00 GMT 2016,
					2016-11-25 00:00:00.0,
					Fri Nov 25 00:00:00 GMT 2016,
					Fri Nov 25 00:00:00 GMT 2016"/>
        <testData input="2016,2,30"
                  expectedOutput="Fri Nov 25 00:00:00 GMT 2016,
					2016-11-25 00:00:00.0,
					Fri Nov 25 00:00:00 GMT 2016,
					Fri Nov 25 00:00:00 GMT 2016,
					Fri Nov 25 00:00:00 GMT 2016,
					2016-11-25 00:00:00.0,
					Fri Nov 25 00:00:00 GMT 2016,
					Fri Nov 25 00:00:00 GMT 2016"/>
    </testcase>
    <testcase testName="testDateConstVarConst"
              fieldName="testDateConstVarConst"
              dataType="DateOnly"
              formula="DATE(2012,customnumber2__c,28)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customnumber3" dataType="Double"/>
        <testData input="2007,2,29"
                  expectedOutput="Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012"/>
        <testData input="2008,2,29"
                  expectedOutput="Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012"/>
        <testData input="2007,3,32"
                  expectedOutput="Wed Mar 28 00:00:00 GMT 2012,
					2012-03-28 00:00:00.0,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012,
					2012-03-28 00:00:00.0,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012"/>
        <testData input="10000,3,2"
                  expectedOutput="Wed Mar 28 00:00:00 GMT 2012,
					2012-03-28 00:00:00.0,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012,
					2012-03-28 00:00:00.0,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012"/>
        <testData input="9999,12,31"
                  expectedOutput="Fri Dec 28 00:00:00 GMT 2012,
					2012-12-28 00:00:00.0,
					Fri Dec 28 00:00:00 GMT 2012,
					Fri Dec 28 00:00:00 GMT 2012,
					Fri Dec 28 00:00:00 GMT 2012,
					2012-12-28 00:00:00.0,
					Fri Dec 28 00:00:00 GMT 2012,
					Fri Dec 28 00:00:00 GMT 2012"/>
        <testData input="10000,1,1"
                  expectedOutput="Sat Jan 28 00:00:00 GMT 2012,
					2012-01-28 00:00:00.0,
					Sat Jan 28 00:00:00 GMT 2012,
					Sat Jan 28 00:00:00 GMT 2012,
					Sat Jan 28 00:00:00 GMT 2012,
					2012-01-28 00:00:00.0,
					Sat Jan 28 00:00:00 GMT 2012,
					Sat Jan 28 00:00:00 GMT 2012"/>
        <testData input="1000,3,2"
                  expectedOutput="Wed Mar 28 00:00:00 GMT 2012,
					2012-03-28 00:00:00.0,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012,
					2012-03-28 00:00:00.0,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012"/>
        <testData input="2010,,29"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Dec 28 00:00:00 GMT 2011,
					Wed Dec 28 00:00:00 GMT 2011,
					null,
					null,
					null,
					null"/>
        <testData input="2010,2,"
                  expectedOutput="Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012"/>
        <testData input=",2,29"
                  expectedOutput="Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012"/>
        <testData input="2010,0,2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Dec 28 00:00:00 GMT 2011,
					Wed Dec 28 00:00:00 GMT 2011,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Dec 28 00:00:00 GMT 2011,
					Wed Dec 28 00:00:00 GMT 2011"/>
        <testData input=",,"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Dec 28 00:00:00 GMT 2011,
					Wed Dec 28 00:00:00 GMT 2011,
					null,
					null,
					null,
					null"/>
        <testData input="2010,,"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Dec 28 00:00:00 GMT 2011,
					Wed Dec 28 00:00:00 GMT 2011,
					null,
					null,
					null,
					null"/>
        <testData input=",2,"
                  expectedOutput="Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012"/>
        <testData input=",,11"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Dec 28 00:00:00 GMT 2011,
					Wed Dec 28 00:00:00 GMT 2011,
					null,
					null,
					null,
					null"/>
        <testData input="2009.5,3,2"
                  expectedOutput="Wed Mar 28 00:00:00 GMT 2012,
					2012-03-28 00:00:00.0,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012,
					2012-03-28 00:00:00.0,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012"/>
        <testData input="2009,3.5,2"
                  expectedOutput="Wed Mar 28 00:00:00 GMT 2012,
					2012-03-28 00:00:00.0,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012,
					2012-03-28 00:00:00.0,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012"/>
        <testData input="2009,3,2.5"
                  expectedOutput="Wed Mar 28 00:00:00 GMT 2012,
					2012-03-28 00:00:00.0,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012,
					2012-03-28 00:00:00.0,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012"/>
        <testData input="2009,12.5,31.5"
                  expectedOutput="Fri Dec 28 00:00:00 GMT 2012,
					2012-12-28 00:00:00.0,
					Fri Dec 28 00:00:00 GMT 2012,
					Fri Dec 28 00:00:00 GMT 2012,
					Fri Dec 28 00:00:00 GMT 2012,
					2012-12-28 00:00:00.0,
					Fri Dec 28 00:00:00 GMT 2012,
					Fri Dec 28 00:00:00 GMT 2012"/>
        <testData input="2009,12,32.1"
                  expectedOutput="Fri Dec 28 00:00:00 GMT 2012,
					2012-12-28 00:00:00.0,
					Fri Dec 28 00:00:00 GMT 2012,
					Fri Dec 28 00:00:00 GMT 2012,
					Fri Dec 28 00:00:00 GMT 2012,
					2012-12-28 00:00:00.0,
					Fri Dec 28 00:00:00 GMT 2012,
					Fri Dec 28 00:00:00 GMT 2012"/>
        <testData input="2009,12,0.9"
                  expectedOutput="Fri Dec 28 00:00:00 GMT 2012,
					2012-12-28 00:00:00.0,
					Fri Dec 28 00:00:00 GMT 2012,
					Fri Dec 28 00:00:00 GMT 2012,
					Fri Dec 28 00:00:00 GMT 2012,
					2012-12-28 00:00:00.0,
					Fri Dec 28 00:00:00 GMT 2012,
					Fri Dec 28 00:00:00 GMT 2012"/>
        <testData input="2009,0.9,26"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Jan 28 00:00:00 GMT 2012,
					Sat Jan 28 00:00:00 GMT 2012,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Jan 28 00:00:00 GMT 2012,
					Sat Jan 28 00:00:00 GMT 2012"/>
        <testData input="-2009,2,3"
                  expectedOutput="Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012"/>
        <testData input="2009,-3,4"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Sep 28 00:00:00 GMT 2011,
					Wed Sep 28 00:00:00 GMT 2011,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Sep 28 00:00:00 GMT 2011,
					Wed Sep 28 00:00:00 GMT 2011"/>
        <testData input="2009,3,-4"
                  expectedOutput="Wed Mar 28 00:00:00 GMT 2012,
					2012-03-28 00:00:00.0,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012,
					2012-03-28 00:00:00.0,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012"/>
        <testData input="-2009.2,3,2"
                  expectedOutput="Wed Mar 28 00:00:00 GMT 2012,
					2012-03-28 00:00:00.0,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012,
					2012-03-28 00:00:00.0,
					Wed Mar 28 00:00:00 GMT 2012,
					Wed Mar 28 00:00:00 GMT 2012"/>
        <testData input="2009,-3.2,4"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Sep 28 00:00:00 GMT 2011,
					Wed Sep 28 00:00:00 GMT 2011,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Sep 28 00:00:00 GMT 2011,
					Wed Sep 28 00:00:00 GMT 2011"/>
        <testData input="2009,2,-4.2"
                  expectedOutput="Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012"/>
        <testData input="0,2,2"
                  expectedOutput="Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012"/>
        <testData input="2012,0,2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Dec 28 00:00:00 GMT 2011,
					Wed Dec 28 00:00:00 GMT 2011,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Dec 28 00:00:00 GMT 2011,
					Wed Dec 28 00:00:00 GMT 2011"/>
        <testData input="2012,2,0"
                  expectedOutput="Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012"/>
        <testData input="2013,2,29"
                  expectedOutput="Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012"/>
        <testData input="2013,2,28"
                  expectedOutput="Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012"/>
        <testData input="2016,2,28"
                  expectedOutput="Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012"/>
        <testData input="2016,2,29"
                  expectedOutput="Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012"/>
        <testData input="2016,2,30"
                  expectedOutput="Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012"/>
    </testcase>
    <testcase testName="testDateConstConstVar"
              fieldName="testDateConstConstVar"
              dataType="DateOnly"
              formula="DATE(2012,11,customnumber3__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customnumber3" dataType="Double"/>
        <testData input="2007,2,29"
                  expectedOutput="Thu Nov 29 00:00:00 GMT 2012,
					2012-11-29 00:00:00.0,
					Thu Nov 29 00:00:00 GMT 2012,
					Thu Nov 29 00:00:00 GMT 2012,
					Thu Nov 29 00:00:00 GMT 2012,
					2012-11-29 00:00:00.0,
					Thu Nov 29 00:00:00 GMT 2012,
					Thu Nov 29 00:00:00 GMT 2012"/>
        <testData input="2008,2,29"
                  expectedOutput="Thu Nov 29 00:00:00 GMT 2012,
					2012-11-29 00:00:00.0,
					Thu Nov 29 00:00:00 GMT 2012,
					Thu Nov 29 00:00:00 GMT 2012,
					Thu Nov 29 00:00:00 GMT 2012,
					2012-11-29 00:00:00.0,
					Thu Nov 29 00:00:00 GMT 2012,
					Thu Nov 29 00:00:00 GMT 2012"/>
        <testData input="2007,3,32"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Dec 02 00:00:00 GMT 2012,
					Sun Dec 02 00:00:00 GMT 2012,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Dec 02 00:00:00 GMT 2012,
					Sun Dec 02 00:00:00 GMT 2012"/>
        <testData input="10000,3,2"
                  expectedOutput="Fri Nov 02 00:00:00 GMT 2012,
					2012-11-02 00:00:00.0,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012,
					2012-11-02 00:00:00.0,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012"/>
        <testData input="9999,12,31"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Dec 01 00:00:00 GMT 2012,
					Sat Dec 01 00:00:00 GMT 2012,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Dec 01 00:00:00 GMT 2012,
					Sat Dec 01 00:00:00 GMT 2012"/>
        <testData input="10000,1,1"
                  expectedOutput="Thu Nov 01 00:00:00 GMT 2012,
					2012-11-01 00:00:00.0,
					Thu Nov 01 00:00:00 GMT 2012,
					Thu Nov 01 00:00:00 GMT 2012,
					Thu Nov 01 00:00:00 GMT 2012,
					2012-11-01 00:00:00.0,
					Thu Nov 01 00:00:00 GMT 2012,
					Thu Nov 01 00:00:00 GMT 2012"/>
        <testData input="1000,3,2"
                  expectedOutput="Fri Nov 02 00:00:00 GMT 2012,
					2012-11-02 00:00:00.0,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012,
					2012-11-02 00:00:00.0,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012"/>
        <testData input="2010,,29"
                  expectedOutput="Thu Nov 29 00:00:00 GMT 2012,
					2012-11-29 00:00:00.0,
					Thu Nov 29 00:00:00 GMT 2012,
					Thu Nov 29 00:00:00 GMT 2012,
					Thu Nov 29 00:00:00 GMT 2012,
					2012-11-29 00:00:00.0,
					Thu Nov 29 00:00:00 GMT 2012,
					Thu Nov 29 00:00:00 GMT 2012"/>
        <testData input="2010,2,"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Oct 31 00:00:00 GMT 2012,
					Wed Oct 31 00:00:00 GMT 2012,
					null,
					null,
					null,
					null"/>
        <testData input=",2,29"
                  expectedOutput="Thu Nov 29 00:00:00 GMT 2012,
					2012-11-29 00:00:00.0,
					Thu Nov 29 00:00:00 GMT 2012,
					Thu Nov 29 00:00:00 GMT 2012,
					Thu Nov 29 00:00:00 GMT 2012,
					2012-11-29 00:00:00.0,
					Thu Nov 29 00:00:00 GMT 2012,
					Thu Nov 29 00:00:00 GMT 2012"/>
        <testData input="2010,0,2"
                  expectedOutput="Fri Nov 02 00:00:00 GMT 2012,
					2012-11-02 00:00:00.0,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012,
					2012-11-02 00:00:00.0,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012"/>
        <testData input=",,"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Oct 31 00:00:00 GMT 2012,
					Wed Oct 31 00:00:00 GMT 2012,
					null,
					null,
					null,
					null"/>
        <testData input="2010,,"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Oct 31 00:00:00 GMT 2012,
					Wed Oct 31 00:00:00 GMT 2012,
					null,
					null,
					null,
					null"/>
        <testData input=",2,"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Oct 31 00:00:00 GMT 2012,
					Wed Oct 31 00:00:00 GMT 2012,
					null,
					null,
					null,
					null"/>
        <testData input=",,11"
                  expectedOutput="Sun Nov 11 00:00:00 GMT 2012,
					2012-11-11 00:00:00.0,
					Sun Nov 11 00:00:00 GMT 2012,
					Sun Nov 11 00:00:00 GMT 2012,
					Sun Nov 11 00:00:00 GMT 2012,
					2012-11-11 00:00:00.0,
					Sun Nov 11 00:00:00 GMT 2012,
					Sun Nov 11 00:00:00 GMT 2012"/>
        <testData input="2009.5,3,2"
                  expectedOutput="Fri Nov 02 00:00:00 GMT 2012,
					2012-11-02 00:00:00.0,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012,
					2012-11-02 00:00:00.0,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012"/>
        <testData input="2009,3.5,2"
                  expectedOutput="Fri Nov 02 00:00:00 GMT 2012,
					2012-11-02 00:00:00.0,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012,
					2012-11-02 00:00:00.0,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012"/>
        <testData input="2009,3,2.5"
                  expectedOutput="Fri Nov 02 00:00:00 GMT 2012,
					2012-11-02 00:00:00.0,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012,
					2012-11-02 00:00:00.0,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012"/>
        <testData input="2009,12.5,31.5"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Dec 01 00:00:00 GMT 2012,
					Sat Dec 01 00:00:00 GMT 2012,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Dec 01 00:00:00 GMT 2012,
					Sat Dec 01 00:00:00 GMT 2012"/>
        <testData input="2009,12,32.1"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Dec 02 00:00:00 GMT 2012,
					Sun Dec 02 00:00:00 GMT 2012,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Sun Dec 02 00:00:00 GMT 2012,
					Sun Dec 02 00:00:00 GMT 2012"/>
        <testData input="2009,12,0.9"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Oct 31 00:00:00 GMT 2012,
					Wed Oct 31 00:00:00 GMT 2012,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Oct 31 00:00:00 GMT 2012,
					Wed Oct 31 00:00:00 GMT 2012"/>
        <testData input="2009,0.9,26"
                  expectedOutput="Mon Nov 26 00:00:00 GMT 2012,
					2012-11-26 00:00:00.0,
					Mon Nov 26 00:00:00 GMT 2012,
					Mon Nov 26 00:00:00 GMT 2012,
					Mon Nov 26 00:00:00 GMT 2012,
					2012-11-26 00:00:00.0,
					Mon Nov 26 00:00:00 GMT 2012,
					Mon Nov 26 00:00:00 GMT 2012"/>
        <testData input="-2009,2,3"
                  expectedOutput="Sat Nov 03 00:00:00 GMT 2012,
					2012-11-03 00:00:00.0,
					Sat Nov 03 00:00:00 GMT 2012,
					Sat Nov 03 00:00:00 GMT 2012,
					Sat Nov 03 00:00:00 GMT 2012,
					2012-11-03 00:00:00.0,
					Sat Nov 03 00:00:00 GMT 2012,
					Sat Nov 03 00:00:00 GMT 2012"/>
        <testData input="2009,-3,4"
                  expectedOutput="Sun Nov 04 00:00:00 GMT 2012,
					2012-11-04 00:00:00.0,
					Sun Nov 04 00:00:00 GMT 2012,
					Sun Nov 04 00:00:00 GMT 2012,
					Sun Nov 04 00:00:00 GMT 2012,
					2012-11-04 00:00:00.0,
					Sun Nov 04 00:00:00 GMT 2012,
					Sun Nov 04 00:00:00 GMT 2012"/>
        <testData input="2009,3,-4"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Oct 27 00:00:00 GMT 2012,
					Sat Oct 27 00:00:00 GMT 2012,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Oct 27 00:00:00 GMT 2012,
					Sat Oct 27 00:00:00 GMT 2012"/>
        <testData input="-2009.2,3,2"
                  expectedOutput="Fri Nov 02 00:00:00 GMT 2012,
					2012-11-02 00:00:00.0,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012,
					2012-11-02 00:00:00.0,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012"/>
        <testData input="2009,-3.2,4"
                  expectedOutput="Sun Nov 04 00:00:00 GMT 2012,
					2012-11-04 00:00:00.0,
					Sun Nov 04 00:00:00 GMT 2012,
					Sun Nov 04 00:00:00 GMT 2012,
					Sun Nov 04 00:00:00 GMT 2012,
					2012-11-04 00:00:00.0,
					Sun Nov 04 00:00:00 GMT 2012,
					Sun Nov 04 00:00:00 GMT 2012"/>
        <testData input="2009,2,-4.2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Oct 27 00:00:00 GMT 2012,
					Sat Oct 27 00:00:00 GMT 2012,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Oct 27 00:00:00 GMT 2012,
					Sat Oct 27 00:00:00 GMT 2012"/>
        <testData input="0,2,2"
                  expectedOutput="Fri Nov 02 00:00:00 GMT 2012,
					2012-11-02 00:00:00.0,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012,
					2012-11-02 00:00:00.0,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012"/>
        <testData input="2012,0,2"
                  expectedOutput="Fri Nov 02 00:00:00 GMT 2012,
					2012-11-02 00:00:00.0,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012,
					2012-11-02 00:00:00.0,
					Fri Nov 02 00:00:00 GMT 2012,
					Fri Nov 02 00:00:00 GMT 2012"/>
        <testData input="2012,2,0"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Oct 31 00:00:00 GMT 2012,
					Wed Oct 31 00:00:00 GMT 2012,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Oct 31 00:00:00 GMT 2012,
					Wed Oct 31 00:00:00 GMT 2012"/>
        <testData input="2013,2,29"
                  expectedOutput="Thu Nov 29 00:00:00 GMT 2012,
					2012-11-29 00:00:00.0,
					Thu Nov 29 00:00:00 GMT 2012,
					Thu Nov 29 00:00:00 GMT 2012,
					Thu Nov 29 00:00:00 GMT 2012,
					2012-11-29 00:00:00.0,
					Thu Nov 29 00:00:00 GMT 2012,
					Thu Nov 29 00:00:00 GMT 2012"/>
        <testData input="2013,2,28"
                  expectedOutput="Wed Nov 28 00:00:00 GMT 2012,
					2012-11-28 00:00:00.0,
					Wed Nov 28 00:00:00 GMT 2012,
					Wed Nov 28 00:00:00 GMT 2012,
					Wed Nov 28 00:00:00 GMT 2012,
					2012-11-28 00:00:00.0,
					Wed Nov 28 00:00:00 GMT 2012,
					Wed Nov 28 00:00:00 GMT 2012"/>
        <testData input="2016,2,28"
                  expectedOutput="Wed Nov 28 00:00:00 GMT 2012,
					2012-11-28 00:00:00.0,
					Wed Nov 28 00:00:00 GMT 2012,
					Wed Nov 28 00:00:00 GMT 2012,
					Wed Nov 28 00:00:00 GMT 2012,
					2012-11-28 00:00:00.0,
					Wed Nov 28 00:00:00 GMT 2012,
					Wed Nov 28 00:00:00 GMT 2012"/>
        <testData input="2016,2,29"
                  expectedOutput="Thu Nov 29 00:00:00 GMT 2012,
					2012-11-29 00:00:00.0,
					Thu Nov 29 00:00:00 GMT 2012,
					Thu Nov 29 00:00:00 GMT 2012,
					Thu Nov 29 00:00:00 GMT 2012,
					2012-11-29 00:00:00.0,
					Thu Nov 29 00:00:00 GMT 2012,
					Thu Nov 29 00:00:00 GMT 2012"/>
        <testData input="2016,2,30"
                  expectedOutput="Fri Nov 30 00:00:00 GMT 2012,
					2012-11-30 00:00:00.0,
					Fri Nov 30 00:00:00 GMT 2012,
					Fri Nov 30 00:00:00 GMT 2012,
					Fri Nov 30 00:00:00 GMT 2012,
					2012-11-30 00:00:00.0,
					Fri Nov 30 00:00:00 GMT 2012,
					Fri Nov 30 00:00:00 GMT 2012"/>
    </testcase>
    <testcase testName="testDateLeapYear"
              fieldName="testDateLeapYear"
              dataType="DateOnly"
              formula="DATE(2012,2,day__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="day" dataType="Double"/>
        <testData input="1"
                  expectedOutput="Wed Feb 01 00:00:00 GMT 2012,
					2012-02-01 00:00:00.0,
					Wed Feb 01 00:00:00 GMT 2012,
					Wed Feb 01 00:00:00 GMT 2012,
					Wed Feb 01 00:00:00 GMT 2012,
					2012-02-01 00:00:00.0,
					Wed Feb 01 00:00:00 GMT 2012,
					Wed Feb 01 00:00:00 GMT 2012"/>
        <testData input="28"
                  expectedOutput="Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012"/>
        <testData input="29"
                  expectedOutput="Wed Feb 29 00:00:00 GMT 2012,
					2012-02-29 00:00:00.0,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012,
					2012-02-29 00:00:00.0,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012"/>
        <testData input="30"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Mar 01 00:00:00 GMT 2012,
					Thu Mar 01 00:00:00 GMT 2012,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Mar 01 00:00:00 GMT 2012,
					Thu Mar 01 00:00:00 GMT 2012"/>
    </testcase>
    <testcase testName="testDateNonLeapYear"
              fieldName="testDateNonLeapYear"
              dataType="DateOnly"
              formula="DATE(2011,2,day__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="day" dataType="Double"/>
        <testData input="1"
                  expectedOutput="Tue Feb 01 00:00:00 GMT 2011,
					2011-02-01 00:00:00.0,
					Tue Feb 01 00:00:00 GMT 2011,
					Tue Feb 01 00:00:00 GMT 2011,
					Tue Feb 01 00:00:00 GMT 2011,
					2011-02-01 00:00:00.0,
					Tue Feb 01 00:00:00 GMT 2011,
					Tue Feb 01 00:00:00 GMT 2011"/>
        <testData input="28"
                  expectedOutput="Mon Feb 28 00:00:00 GMT 2011,
					2011-02-28 00:00:00.0,
					Mon Feb 28 00:00:00 GMT 2011,
					Mon Feb 28 00:00:00 GMT 2011,
					Mon Feb 28 00:00:00 GMT 2011,
					2011-02-28 00:00:00.0,
					Mon Feb 28 00:00:00 GMT 2011,
					Mon Feb 28 00:00:00 GMT 2011"/>
        <testData input="29"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Mar 01 00:00:00 GMT 2011,
					Tue Mar 01 00:00:00 GMT 2011,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Mar 01 00:00:00 GMT 2011,
					Tue Mar 01 00:00:00 GMT 2011"/>
        <testData input="30"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Mar 02 00:00:00 GMT 2011,
					Wed Mar 02 00:00:00 GMT 2011,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Wed Mar 02 00:00:00 GMT 2011,
					Wed Mar 02 00:00:00 GMT 2011"/>
    </testcase>
    <testcase testName="testDateLeapYear2"
              fieldName="testDateLeapYear2"
              dataType="DateOnly"
              formula="DATE(2012,month__c,29)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="month" dataType="Double"/>
        <testData input="2"
                  expectedOutput="Wed Feb 29 00:00:00 GMT 2012,
					2012-02-29 00:00:00.0,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012,
					2012-02-29 00:00:00.0,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012"/>
        <testData input="1"
                  expectedOutput="Sun Jan 29 00:00:00 GMT 2012,
					2012-01-29 00:00:00.0,
					Sun Jan 29 00:00:00 GMT 2012,
					Sun Jan 29 00:00:00 GMT 2012,
					Sun Jan 29 00:00:00 GMT 2012,
					2012-01-29 00:00:00.0,
					Sun Jan 29 00:00:00 GMT 2012,
					Sun Jan 29 00:00:00 GMT 2012"/>
    </testcase>
    <testcase testName="testDateNonLeapYear2"
              fieldName="testDateNonLeapYear2"
              dataType="DateOnly"
              formula="DATE(2011,month__c,29)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="month" dataType="Double"/>
        <testData input="2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Mar 01 00:00:00 GMT 2011,
					Tue Mar 01 00:00:00 GMT 2011,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Mar 01 00:00:00 GMT 2011,
					Tue Mar 01 00:00:00 GMT 2011"/>
        <testData input="1"
                  expectedOutput="Sat Jan 29 00:00:00 GMT 2011,
					2011-01-29 00:00:00.0,
					Sat Jan 29 00:00:00 GMT 2011,
					Sat Jan 29 00:00:00 GMT 2011,
					Sat Jan 29 00:00:00 GMT 2011,
					2011-01-29 00:00:00.0,
					Sat Jan 29 00:00:00 GMT 2011,
					Sat Jan 29 00:00:00 GMT 2011"/>
    </testcase>
    <testcase testName="testDateLeapConstantMonth"
              fieldName="testDateLeapConstantMonth"
              dataType="DateOnly"
              formula="DATE(year__c,2,day__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="year" dataType="Double"/>
        <referenceField fieldName="day" dataType="Double"/>
        <testData input="2001,29"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Mar 01 00:00:00 GMT 2001,
					Thu Mar 01 00:00:00 GMT 2001,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Mar 01 00:00:00 GMT 2001,
					Thu Mar 01 00:00:00 GMT 2001"/>
        <testData input="2001,28"
                  expectedOutput="Wed Feb 28 00:00:00 GMT 2001,
					2001-02-28 00:00:00.0,
					Wed Feb 28 00:00:00 GMT 2001,
					Wed Feb 28 00:00:00 GMT 2001,
					Wed Feb 28 00:00:00 GMT 2001,
					2001-02-28 00:00:00.0,
					Wed Feb 28 00:00:00 GMT 2001,
					Wed Feb 28 00:00:00 GMT 2001"/>
        <testData input="2012,28"
                  expectedOutput="Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012,
					2012-02-28 00:00:00.0,
					Tue Feb 28 00:00:00 GMT 2012,
					Tue Feb 28 00:00:00 GMT 2012"/>
        <testData input="2012,29"
                  expectedOutput="Wed Feb 29 00:00:00 GMT 2012,
					2012-02-29 00:00:00.0,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012,
					2012-02-29 00:00:00.0,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012"/>
        <testData input="2300,29"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Mar 01 00:00:00 GMT 2300,
					Thu Mar 01 00:00:00 GMT 2300,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Mar 01 00:00:00 GMT 2300,
					Thu Mar 01 00:00:00 GMT 2300"/>
        <testData input="2300,28"
                  expectedOutput="Wed Feb 28 00:00:00 GMT 2300,
					2300-02-28 00:00:00.0,
					Wed Feb 28 00:00:00 GMT 2300,
					Wed Feb 28 00:00:00 GMT 2300,
					Wed Feb 28 00:00:00 GMT 2300,
					2300-02-28 00:00:00.0,
					Wed Feb 28 00:00:00 GMT 2300,
					Wed Feb 28 00:00:00 GMT 2300"/>
    </testcase>
    <testcase testName="testDateLeapConstantDay"
              fieldName="testDateLeapConstantDay"
              dataType="DateOnly"
              formula="DATE(year__c,month__c,29)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="year" dataType="Double"/>
        <referenceField fieldName="month" dataType="Double"/>
        <testData input="2012,1"
                  expectedOutput="Sun Jan 29 00:00:00 GMT 2012,
					2012-01-29 00:00:00.0,
					Sun Jan 29 00:00:00 GMT 2012,
					Sun Jan 29 00:00:00 GMT 2012,
					Sun Jan 29 00:00:00 GMT 2012,
					2012-01-29 00:00:00.0,
					Sun Jan 29 00:00:00 GMT 2012,
					Sun Jan 29 00:00:00 GMT 2012"/>
        <testData input="2012,2"
                  expectedOutput="Wed Feb 29 00:00:00 GMT 2012,
					2012-02-29 00:00:00.0,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012,
					2012-02-29 00:00:00.0,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012"/>
        <testData input="2013,1"
                  expectedOutput="Tue Jan 29 00:00:00 GMT 2013,
					2013-01-29 00:00:00.0,
					Tue Jan 29 00:00:00 GMT 2013,
					Tue Jan 29 00:00:00 GMT 2013,
					Tue Jan 29 00:00:00 GMT 2013,
					2013-01-29 00:00:00.0,
					Tue Jan 29 00:00:00 GMT 2013,
					Tue Jan 29 00:00:00 GMT 2013"/>
        <testData input="2013,2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Mar 01 00:00:00 GMT 2013,
					Fri Mar 01 00:00:00 GMT 2013,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Fri Mar 01 00:00:00 GMT 2013,
					Fri Mar 01 00:00:00 GMT 2013"/>
        <testData input="2100,2"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Mon Mar 01 00:00:00 GMT 2100,
					Mon Mar 01 00:00:00 GMT 2100,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Mon Mar 01 00:00:00 GMT 2100,
					Mon Mar 01 00:00:00 GMT 2100"/>
    </testcase>
    <testcase testName="testDateAllConstants"
              fieldName="testDateAllConstants"
              dataType="DateOnly"
              formula="DATE(2012,2,29)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <testData expectedOutput="Wed Feb 29 00:00:00 GMT 2012,
					2012-02-29 00:00:00.0,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012,
					2012-02-29 00:00:00.0,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012"/>
    </testcase>
    <testcase testName="testDateAllConstantsNonLeap"
              fieldName="testDateAllConstantsNonLeap"
              dataType="DateOnly"
              formula="DATE(2011,2,29)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <testData expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Mar 01 00:00:00 GMT 2011,
					Tue Mar 01 00:00:00 GMT 2011,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Mar 01 00:00:00 GMT 2011,
					Tue Mar 01 00:00:00 GMT 2011"/>
    </testcase>
    <testcase testName="testDateVariableYear"
              fieldName="testDateVariableYear"
              dataType="DateOnly"
              formula="DATE(year__c,2,29)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="year" dataType="Double"/>
        <testData input="2011"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Mar 01 00:00:00 GMT 2011,
					Tue Mar 01 00:00:00 GMT 2011,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Tue Mar 01 00:00:00 GMT 2011,
					Tue Mar 01 00:00:00 GMT 2011"/>
        <testData input="2012"
                  expectedOutput="Wed Feb 29 00:00:00 GMT 2012,
					2012-02-29 00:00:00.0,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012,
					2012-02-29 00:00:00.0,
					Wed Feb 29 00:00:00 GMT 2012,
					Wed Feb 29 00:00:00 GMT 2012"/>
        <testData input="2000"
                  expectedOutput="Tue Feb 29 00:00:00 GMT 2000,
					2000-02-29 00:00:00.0,
					Tue Feb 29 00:00:00 GMT 2000,
					Tue Feb 29 00:00:00 GMT 2000,
					Tue Feb 29 00:00:00 GMT 2000,
					2000-02-29 00:00:00.0,
					Tue Feb 29 00:00:00 GMT 2000,
					Tue Feb 29 00:00:00 GMT 2000"/>
        <testData input="1900"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Mar 01 00:00:00 GMT 1900,
					Thu Mar 01 00:00:00 GMT 1900,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Mar 01 00:00:00 GMT 1900,
					Thu Mar 01 00:00:00 GMT 1900"/>
        <testData input="2300"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Mar 01 00:00:00 GMT 2300,
					Thu Mar 01 00:00:00 GMT 2300,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Thu Mar 01 00:00:00 GMT 2300,
					Thu Mar 01 00:00:00 GMT 2300"/>
        <testData input="2400"
                  expectedOutput="Tue Feb 29 00:00:00 GMT 2400,
					2400-02-29 00:00:00.0,
					Tue Feb 29 00:00:00 GMT 2400,
					Tue Feb 29 00:00:00 GMT 2400,
					Tue Feb 29 00:00:00 GMT 2400,
					2400-02-29 00:00:00.0,
					Tue Feb 29 00:00:00 GMT 2400,
					Tue Feb 29 00:00:00 GMT 2400"/>
        <testData input="2404"
                  expectedOutput="Sun Feb 29 00:00:00 GMT 2404,
					2404-02-29 00:00:00.0,
					Sun Feb 29 00:00:00 GMT 2404,
					Sun Feb 29 00:00:00 GMT 2404,
					Sun Feb 29 00:00:00 GMT 2404,
					2404-02-29 00:00:00.0,
					Sun Feb 29 00:00:00 GMT 2404,
					Sun Feb 29 00:00:00 GMT 2404"/>
    </testcase>
    <testcase testName="testIfANDFunc"
              fieldName="testIfANDFunc"
              dataType="DateOnly"
              formula="IF(AND(customcheckbox1__c,customcheckbox2__c),customformula1__c,DATE(customnumber1__c,customnumber2__c,customnumber3__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customcheckbox1" dataType="Boolean"/>
        <referenceField fieldName="customcheckbox2" dataType="Boolean"/>
        <referenceField fieldName="customformula1"
                        dataType="DateOnly"
                        formula="IF(customcheckbox3__c,customdate1__c,customdate2__c)">
            <referenceField fieldName="customcheckbox3" dataType="Boolean"/>
            <referenceField fieldName="customdate1" dataType="DateOnly"/>
            <referenceField fieldName="customdate2" dataType="DateOnly"/>
        </referenceField>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customnumber3" dataType="Double"/>
        <testData input="true,false,true,2005:12:31,,2004,,20"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Sat Dec 20 00:00:00 GMT 2003,
					Sat Dec 20 00:00:00 GMT 2003,
					null,
					null,
					null,
					null"/>
        <testData input="true,true,true,,2005:11:31,2004,12,01"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="true,true,true,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="true,true,false,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="Thu Dec 01 00:00:00 GMT 2005,
					2005-12-01 00:00:00.0,
					Thu Dec 01 00:00:00 GMT 2005,
					Thu Dec 01 00:00:00 GMT 2005,
					Thu Dec 01 00:00:00 GMT 2005,
					2005-12-01 00:00:00.0,
					Thu Dec 01 00:00:00 GMT 2005,
					Thu Dec 01 00:00:00 GMT 2005"/>
        <testData input="true,true,false,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="Thu Dec 01 00:00:00 GMT 2005,
					2005-12-01 00:00:00.0,
					Thu Dec 01 00:00:00 GMT 2005,
					Thu Dec 01 00:00:00 GMT 2005,
					Thu Dec 01 00:00:00 GMT 2005,
					2005-12-01 00:00:00.0,
					Thu Dec 01 00:00:00 GMT 2005,
					Thu Dec 01 00:00:00 GMT 2005"/>
        <testData input="true,false,true,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="Wed Dec 01 00:00:00 GMT 2004,
					2004-12-01 00:00:00.0,
					Wed Dec 01 00:00:00 GMT 2004,
					Wed Dec 01 00:00:00 GMT 2004,
					Wed Dec 01 00:00:00 GMT 2004,
					2004-12-01 00:00:00.0,
					Wed Dec 01 00:00:00 GMT 2004,
					Wed Dec 01 00:00:00 GMT 2004"/>
        <testData input="true,false,false,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="Wed Dec 01 00:00:00 GMT 2004,
					2004-12-01 00:00:00.0,
					Wed Dec 01 00:00:00 GMT 2004,
					Wed Dec 01 00:00:00 GMT 2004,
					Wed Dec 01 00:00:00 GMT 2004,
					2004-12-01 00:00:00.0,
					Wed Dec 01 00:00:00 GMT 2004,
					Wed Dec 01 00:00:00 GMT 2004"/>
        <testData input="false,false,false,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="Wed Dec 01 00:00:00 GMT 2004,
					2004-12-01 00:00:00.0,
					Wed Dec 01 00:00:00 GMT 2004,
					Wed Dec 01 00:00:00 GMT 2004,
					Wed Dec 01 00:00:00 GMT 2004,
					2004-12-01 00:00:00.0,
					Wed Dec 01 00:00:00 GMT 2004,
					Wed Dec 01 00:00:00 GMT 2004"/>
        <testData input="true,true,false,,2005:11:31,2004,12,01"
                  expectedOutput="Thu Dec 01 00:00:00 GMT 2005,
					2005-12-01 00:00:00.0,
					Thu Dec 01 00:00:00 GMT 2005,
					Thu Dec 01 00:00:00 GMT 2005,
					Thu Dec 01 00:00:00 GMT 2005,
					2005-12-01 00:00:00.0,
					Thu Dec 01 00:00:00 GMT 2005,
					Thu Dec 01 00:00:00 GMT 2005"/>
        <testData input="true,true,true,2005:12:31,,2004,12,01"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="true,false,true,2005:12:31,,2004,12,01"
                  expectedOutput="Wed Dec 01 00:00:00 GMT 2004,
					2004-12-01 00:00:00.0,
					Wed Dec 01 00:00:00 GMT 2004,
					Wed Dec 01 00:00:00 GMT 2004,
					Wed Dec 01 00:00:00 GMT 2004,
					2004-12-01 00:00:00.0,
					Wed Dec 01 00:00:00 GMT 2004,
					Wed Dec 01 00:00:00 GMT 2004"/>
        <testData input="true,false,false,,,2004,12,01"
                  expectedOutput="Wed Dec 01 00:00:00 GMT 2004,
					2004-12-01 00:00:00.0,
					Wed Dec 01 00:00:00 GMT 2004,
					Wed Dec 01 00:00:00 GMT 2004,
					Wed Dec 01 00:00:00 GMT 2004,
					2004-12-01 00:00:00.0,
					Wed Dec 01 00:00:00 GMT 2004,
					Wed Dec 01 00:00:00 GMT 2004"/>
        <testData input="true,false,true,2005:12:31,,1900,12,01"
                  expectedOutput="Sat Dec 01 00:00:00 GMT 1900,
					1900-12-01 00:00:00.0,
					Sat Dec 01 00:00:00 GMT 1900,
					Sat Dec 01 00:00:00 GMT 1900,
					Sat Dec 01 00:00:00 GMT 1900,
					1900-12-01 00:00:00.0,
					Sat Dec 01 00:00:00 GMT 1900,
					Sat Dec 01 00:00:00 GMT 1900"/>
        <testData input="true,false,true,2005:12:31,,2004,01,01"
                  expectedOutput="Thu Jan 01 00:00:00 GMT 2004,
					2004-01-01 00:00:00.0,
					Thu Jan 01 00:00:00 GMT 2004,
					Thu Jan 01 00:00:00 GMT 2004,
					Thu Jan 01 00:00:00 GMT 2004,
					2004-01-01 00:00:00.0,
					Thu Jan 01 00:00:00 GMT 2004,
					Thu Jan 01 00:00:00 GMT 2004"/>
        <testData input="true,false,true,2005:12:31,,2003,02,28"
                  expectedOutput="Fri Feb 28 00:00:00 GMT 2003,
					2003-02-28 00:00:00.0,
					Fri Feb 28 00:00:00 GMT 2003,
					Fri Feb 28 00:00:00 GMT 2003,
					Fri Feb 28 00:00:00 GMT 2003,
					2003-02-28 00:00:00.0,
					Fri Feb 28 00:00:00 GMT 2003,
					Fri Feb 28 00:00:00 GMT 2003"/>
        <testData input="true,false,true,2005:12:31,,1999,12,31"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 1999,
					1999-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 1999,
					Fri Dec 31 00:00:00 GMT 1999,
					Fri Dec 31 00:00:00 GMT 1999,
					1999-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 1999,
					Fri Dec 31 00:00:00 GMT 1999"/>
        <testData input="true,false,true,2005:12:31,,2004,02,29"
                  expectedOutput="Sun Feb 29 00:00:00 GMT 2004,
					2004-02-29 00:00:00.0,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004,
					2004-02-29 00:00:00.0,
					Sun Feb 29 00:00:00 GMT 2004,
					Sun Feb 29 00:00:00 GMT 2004"/>
        <testData input="true,false,true,2005:12:31,,2004,02,20"
                  expectedOutput="Fri Feb 20 00:00:00 GMT 2004,
					2004-02-20 00:00:00.0,
					Fri Feb 20 00:00:00 GMT 2004,
					Fri Feb 20 00:00:00 GMT 2004,
					Fri Feb 20 00:00:00 GMT 2004,
					2004-02-20 00:00:00.0,
					Fri Feb 20 00:00:00 GMT 2004,
					Fri Feb 20 00:00:00 GMT 2004"/>
    </testcase>
    <testcase testName="testIfORFunc"
              fieldName="testIfORFunc"
              dataType="DateOnly"
              formula="IF(OR(customcheckbox1__c,customcheckbox2__c),IF(customcheckbox3__c,customdate1__c,customdate2__c),customformula2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customcheckbox1" dataType="Boolean"/>
        <referenceField fieldName="customcheckbox2" dataType="Boolean"/>
        <referenceField fieldName="customcheckbox3" dataType="Boolean"/>
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <referenceField fieldName="customformula2"
                        dataType="DateOnly"
                        formula="DATE(customnumber1__c,customnumber2__c,customnumber3__c)">
            <referenceField fieldName="customnumber1" dataType="Double"/>
            <referenceField fieldName="customnumber2" dataType="Double"/>
            <referenceField fieldName="customnumber3" dataType="Double"/>
        </referenceField>
        <testData input="true,false,true,2005:12:31,,2004,,20"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="true,true,true,,2005:11:31,2004,12,01"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="true,true,true,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="true,true,false,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="Thu Dec 01 00:00:00 GMT 2005,
					2005-12-01 00:00:00.0,
					Thu Dec 01 00:00:00 GMT 2005,
					Thu Dec 01 00:00:00 GMT 2005,
					Thu Dec 01 00:00:00 GMT 2005,
					2005-12-01 00:00:00.0,
					Thu Dec 01 00:00:00 GMT 2005,
					Thu Dec 01 00:00:00 GMT 2005"/>
        <testData input="true,true,false,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="Thu Dec 01 00:00:00 GMT 2005,
					2005-12-01 00:00:00.0,
					Thu Dec 01 00:00:00 GMT 2005,
					Thu Dec 01 00:00:00 GMT 2005,
					Thu Dec 01 00:00:00 GMT 2005,
					2005-12-01 00:00:00.0,
					Thu Dec 01 00:00:00 GMT 2005,
					Thu Dec 01 00:00:00 GMT 2005"/>
        <testData input="true,false,true,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="true,false,false,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="Thu Dec 01 00:00:00 GMT 2005,
					2005-12-01 00:00:00.0,
					Thu Dec 01 00:00:00 GMT 2005,
					Thu Dec 01 00:00:00 GMT 2005,
					Thu Dec 01 00:00:00 GMT 2005,
					2005-12-01 00:00:00.0,
					Thu Dec 01 00:00:00 GMT 2005,
					Thu Dec 01 00:00:00 GMT 2005"/>
        <testData input="false,false,false,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="Wed Dec 01 00:00:00 GMT 2004,
					2004-12-01 00:00:00.0,
					Wed Dec 01 00:00:00 GMT 2004,
					Wed Dec 01 00:00:00 GMT 2004,
					Wed Dec 01 00:00:00 GMT 2004,
					2004-12-01 00:00:00.0,
					Wed Dec 01 00:00:00 GMT 2004,
					Wed Dec 01 00:00:00 GMT 2004"/>
        <testData input="true,true,false,,2005:11:31,2004,12,01"
                  expectedOutput="Thu Dec 01 00:00:00 GMT 2005,
					2005-12-01 00:00:00.0,
					Thu Dec 01 00:00:00 GMT 2005,
					Thu Dec 01 00:00:00 GMT 2005,
					Thu Dec 01 00:00:00 GMT 2005,
					2005-12-01 00:00:00.0,
					Thu Dec 01 00:00:00 GMT 2005,
					Thu Dec 01 00:00:00 GMT 2005"/>
        <testData input="true,true,true,2005:12:31,,2004,12,01"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="true,false,true,2005:12:31,,2004,12,01"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="true,false,false,,,2004,12,01"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="true,false,true,2005:12:31,,1900,12,01"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="true,false,true,2005:12:31,,2004,01,01"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="true,false,true,2005:12:31,,2003,02,28"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="true,false,true,2005:12:31,,1999,12,31"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="true,false,true,2005:12:31,,2004,02,29"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="true,false,true,2005:12:31,,2004,02,20"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
    </testcase>
    <testcase testName="testBooleanAND"
              fieldName="testBooleanAND"
              dataType="Boolean"
              formula="AND(customformula1__c,OR(customcheckbox1__c,customcheckbox2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customcheckbox1" dataType="Boolean"/>
        <referenceField fieldName="customcheckbox2" dataType="Boolean"/>
        <referenceField fieldName="customcheckbox3" dataType="Boolean"/>
        <referenceField fieldName="customformula1"
                        dataType="Boolean"
                        formula="customdate1__c &gt; customdate2__c">
            <referenceField fieldName="customdate1" dataType="DateOnly"/>
            <referenceField fieldName="customdate2" dataType="DateOnly"/>
        </referenceField>
        <referenceField fieldName="customformula2"
                        dataType="DateOnly"
                        formula="DATE(customnumber1__c,customnumber2__c,customnumber3__c)">
            <referenceField fieldName="customnumber1" dataType="Double"/>
            <referenceField fieldName="customnumber2" dataType="Double"/>
            <referenceField fieldName="customnumber3" dataType="Double"/>
        </referenceField>
        <testData input="true,false,true,2005:12:31,,2004,,20"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,true,true,,2005:11:31,2004,12,01"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,true,true,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="true,true,false,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="true,true,false,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="true,false,true,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="true,false,false,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="false,false,false,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,true,false,,2005:11:31,2004,12,01"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,true,true,2005:12:31,,2004,12,01"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,false,true,2005:12:31,,2004,12,01"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,false,false,,,2004,12,01"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,false,true,2005:12:31,,1900,12,01"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,false,true,2005:12:31,,2004,01,01"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,false,true,2005:12:31,,2003,02,28"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,false,true,2005:12:31,,1999,12,31"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,false,true,2005:12:31,,2004,02,29"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,false,true,2005:12:31,,2004,02,20"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
    </testcase>
    <testcase testName="testBooleanEq"
              fieldName="testBooleanEq"
              dataType="Boolean"
              formula="customformula1__c = OR(customcheckbox1__c,customcheckbox2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customcheckbox1" dataType="Boolean"/>
        <referenceField fieldName="customcheckbox2" dataType="Boolean"/>
        <referenceField fieldName="customcheckbox3" dataType="Boolean"/>
        <referenceField fieldName="customformula1"
                        dataType="Boolean"
                        formula="customdate1__c &gt; customdate2__c">
            <referenceField fieldName="customdate1" dataType="DateOnly"/>
            <referenceField fieldName="customdate2" dataType="DateOnly"/>
        </referenceField>
        <referenceField fieldName="customformula2"
                        dataType="DateOnly"
                        formula="DATE(customnumber1__c,customnumber2__c,customnumber3__c)">
            <referenceField fieldName="customnumber1" dataType="Double"/>
            <referenceField fieldName="customnumber2" dataType="Double"/>
            <referenceField fieldName="customnumber3" dataType="Double"/>
        </referenceField>
        <testData input="true,false,true,2005:12:31,,2004,,20"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,true,true,,2005:11:31,2004,12,01"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,true,true,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="true,true,false,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="true,true,false,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="true,false,true,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="true,false,false,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="false,false,false,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,true,false,,2005:11:31,2004,12,01"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,true,true,2005:12:31,,2004,12,01"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,false,true,2005:12:31,,2004,12,01"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,false,false,,,2004,12,01"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,false,true,2005:12:31,,1900,12,01"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,false,true,2005:12:31,,2004,01,01"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,false,true,2005:12:31,,2003,02,28"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,false,true,2005:12:31,,1999,12,31"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,false,true,2005:12:31,,2004,02,29"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,false,true,2005:12:31,,2004,02,20"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
    </testcase>
    <testcase testName="testBooleanNeq"
              fieldName="testBooleanNeq"
              dataType="Boolean"
              formula="customformula1__c != OR(customcheckbox1__c,customcheckbox2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customcheckbox1" dataType="Boolean"/>
        <referenceField fieldName="customcheckbox2" dataType="Boolean"/>
        <referenceField fieldName="customcheckbox3" dataType="Boolean"/>
        <referenceField fieldName="customformula1"
                        dataType="Boolean"
                        formula="customdate1__c &gt; customdate2__c">
            <referenceField fieldName="customdate1" dataType="DateOnly"/>
            <referenceField fieldName="customdate2" dataType="DateOnly"/>
        </referenceField>
        <referenceField fieldName="customformula2"
                        dataType="DateOnly"
                        formula="DATE(customnumber1__c,customnumber2__c,customnumber3__c)">
            <referenceField fieldName="customnumber1" dataType="Double"/>
            <referenceField fieldName="customnumber2" dataType="Double"/>
            <referenceField fieldName="customnumber3" dataType="Double"/>
        </referenceField>
        <testData input="true,false,true,2005:12:31,,2004,,20"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="true,true,true,,2005:11:31,2004,12,01"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="true,true,true,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,true,false,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,true,false,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,false,true,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="true,false,false,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="false,false,false,2005:12:31,2005:11:31,2004,12,01"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="true,true,false,,2005:11:31,2004,12,01"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="true,true,true,2005:12:31,,2004,12,01"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="true,false,true,2005:12:31,,2004,12,01"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="true,false,false,,,2004,12,01"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="true,false,true,2005:12:31,,1900,12,01"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="true,false,true,2005:12:31,,2004,01,01"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="true,false,true,2005:12:31,,2003,02,28"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="true,false,true,2005:12:31,,1999,12,31"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="true,false,true,2005:12:31,,2004,02,29"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="true,false,true,2005:12:31,,2004,02,20"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
    </testcase>
    <testcase testName="testIfDateCompareGreaterThan"
              fieldName="testIfDateCompareGreaterThan"
              dataType="DateTime"
              formula="IF((customdate1__c&gt;customdate2__c),customdatetime1__c,customdatetime2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customdatetime2" dataType="DateTime"/>
        <testData input=",1999:12:31:23:59:58,2005:12:31:23:04:12,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="1999:12:31:23:59:58,,2005:12:31:23:04:12,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="2004:01:01:00:00:00,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="2004:01:01:12:00:01,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="2004:01:01:12:00:00,2004:01:01:12:00:01, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="2004:01:01:24:00:00,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="2004:01:01:14:00:00,2004:01:01:14:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="2004:01:01:06:00:00,2004:01:01:04:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="2004:02:28:24:00:00,2004:03:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="4000:01:01:00:00:00,1900:01:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="1900:01:01:00:00:00,4000:01:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="2000:02:29:24:00:00,2000:03:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="1999:12:31:23:59:59,1999:12:31:23:59:58, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="1999:12:31:23:59:58,1999:12:31:23:59:59, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="1999:12:31:23:59:59,1999:12:31:23:59:59, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input=",1999:12:31:23:59:58,,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input=",,,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",1999:12:31:23:59:58,2005:12:31:23:04:12,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testIfDateTimeCompareGreaterThan"
              fieldName="testIfDateTimeCompareGreaterThan"
              dataType="DateOnly"
              formula="IF((customdatetime1__c&gt;customdatetime2__c),customdate1__c,customdate2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customdatetime2" dataType="DateTime"/>
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <testData input=",1999:12:31:23:59:58,2005:12:31:23:04:12,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="1999:12:31:23:59:58,,2005:12:31:23:04:12,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2004:01:01:00:00:00,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2004:01:01:12:00:01,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="2004:01:01:12:00:00,2004:01:01:12:00:01, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2004:01:01:24:00:00,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="2004:01:01:14:00:00,2004:01:01:14:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2004:01:01:06:00:00,2004:01:01:04:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="2004:02:28:24:00:00,2004:03:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="4000:01:01:00:00:00,1900:01:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="1900:01:01:00:00:00,4000:01:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2000:02:29:24:00:00,2000:03:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="1999:12:31:23:59:59,1999:12:31:23:59:58, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="1999:12:31:23:59:58,1999:12:31:23:59:59, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="1999:12:31:23:59:59,1999:12:31:23:59:59, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input=",1999:12:31:23:59:58,,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input=",,,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",1999:12:31:23:59:58,2005:12:31:23:04:12,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testIfContainsUsesText"
              fieldName="testIfContainsUsesText"
              dataType="Currency"
              formula="IF(CONTAINS(customtext1__c,customtext2__c),customnumber1__c,custompercent1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customtext2" dataType="Text"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <testData input="Golden File,Gold,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="Golden File,File,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="Golden File,n F,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="Golden File,gold,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
        <testData input="Golden File,n f,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
        <testData input="This is a very long text and works very well with this type of test and works better with more department wise contract and @ this # this $ this % this ^ this &amp; this * this ( this ) this) this,contract,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="This is a very long text and works very well with this type of test and works better with more department wise contract and @ this # this $ this % this ^ this &amp; this * this ( this ) this) this,Works,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
        <testData input="Hello World!,!,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="Works Great and \&#34; and Works Greate Twoo \\,\\,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="510 797 4647,510 797 4647,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="510-797-4647,510 797 4647,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
    </testcase>
    <testcase testName="testIfContainsUsesTextArea"
              fieldName="testIfContainsUsesTextArea"
              dataType="Double"
              formula="IF(CONTAINS(customtextarea1__c,customtext1__c),customcurrency1__c,custompercent1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtextarea1" dataType="textarea"/>
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <testData input="Golden File,Gold,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="Golden File,File,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="Golden File,n F,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="Golden File,gold,200,300"
                  expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
        <testData input="Golden File,n f,200,300"
                  expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
        <testData input="This is a very long text and works very well with this type of test and works better with more department wise contract and @ this # this $ this % this ^ this &amp; this * this ( this ) this) this,contract,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="This is a very long text and works very well with this type of test and works better with more department wise contract and @ this # this $ this % this ^ this &amp; this * this ( this ) this) this,Works,200,300"
                  expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
        <testData input="Hello World!,!,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="Works Great and \&#34; and Works Greate Twoo \\,\\,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="510 797 4647,510 797 4647,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="510-797-4647,510 797 4647,200,300"
                  expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
    </testcase>
    <testcase testName="testIfContainsUsesEmail"
              fieldName="testIfContainsUsesEmail"
              dataType="Percent"
              formula="IF(CONTAINS(customemail1__c,customtext1__c),customnumber1__c,customcurrency1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customemail1" dataType="email"/>
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <testData input="email@aa.com,aa,200,300"
                  expectedOutput="20000,
					20000.000000000000000000000000000000,
					20000,
					20000,
					20000,
					20000.000000000000000000000000000000,
					20000,
					20000"/>
        <testData input="works@bvv.net,works@,200,300"
                  expectedOutput="20000,
					20000.000000000000000000000000000000,
					20000,
					20000,
					20000,
					20000.000000000000000000000000000000,
					20000,
					20000"/>
        <testData input="testing@test.com,testing@,200,300"
                  expectedOutput="20000,
					20000.000000000000000000000000000000,
					20000,
					20000,
					20000,
					20000.000000000000000000000000000000,
					20000,
					20000"/>
        <testData input="a@salesforce.com,salesforce.com,200,300"
                  expectedOutput="20000,
					20000.000000000000000000000000000000,
					20000,
					20000,
					20000,
					20000.000000000000000000000000000000,
					20000,
					20000"/>
        <testData input="a@salesforce.com,Salesforce.com,200,300"
                  expectedOutput="30000,
					30000.000000000000000000000000000000,
					30000,
					30000,
					30000,
					30000.000000000000000000000000000000,
					30000,
					30000"/>
    </testcase>
    <testcase testName="testIfContainsUsesPhone"
              fieldName="testIfContainsUsesPhone"
              dataType="Currency"
              formula="IF(CONTAINS(customphone1__c,customtext1__c),customnumber1__c,custompercent1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customphone1" dataType="phone"/>
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <testData input="Golden File,Gold,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="Golden File,File,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="Golden File,n F,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="Golden File,gold,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
        <testData input="Golden File,n f,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
        <testData input="This is a very long text and works very well with this type of test and works better with more department wise contract and @ this # this $ this % this ^ this &amp; this * this ( this ) this) this,contract,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="This is a very long text and works very well with this type of test and works better with more department wise contract and @ this # this $ this % this ^ this &amp; this * this ( this ) this) this,Works,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
        <testData input="Hello World!,!,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="Works Great and \&#34; and Works Greate Twoo \\,\\,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="510 797 4647,510 797 4647,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="510-797-4647,510 797 4647,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
    </testcase>
    <testcase testName="testIfBeginsUsesText"
              fieldName="testIfBeginsUsesText"
              dataType="Currency"
              formula="IF(BEGINS(customtext1__c,customtext2__c),customnumber1__c,custompercent1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customtext2" dataType="Text"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <testData input="Golden File,File,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
        <testData input="Golden File,n F,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
        <testData input="Golden File,gold,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
        <testData input="This is a very long text and works very well with this type of test and works better with more department wise contract and @ this # this $ this % this ^ this &amp; this * this ( this ) this) this,This is a very long text and works very well with this type of test and works better with more department wise contract and @ this #,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="This is a very long text and works very well with this type of test and works better with more department wise contract and @ this # this $ this % this ^ this &amp; this * this ( this ) this) this,Nonexistant,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
        <testData input="!Hello World,!,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="Hello World!,!,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
        <testData input="\\ Works Great and \&#34; and Works Greate Twoo,\\,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="Works Great and \\ \&#34; and Works Greate Twoo,\\,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
        <testData input="510 797 4647,510 797 4647,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="510-797-4647,510 797 4647,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
    </testcase>
    <testcase testName="testIfBeginsUsesTextArea"
              fieldName="testIfBeginsUsesTextArea"
              dataType="Double"
              formula="IF(BEGINS(customtextarea1__c,customtext1__c),customcurrency1__c,custompercent1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtextarea1" dataType="textarea"/>
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <testData input="Golden File,File,200,300"
                  expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
        <testData input="Golden File,n F,200,300"
                  expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
        <testData input="Golden File,gold,200,300"
                  expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
        <testData input="This is a very long text and works very well with this type of test and works better with more department wise contract and @ this # this $ this % this ^ this &amp; this * this ( this ) this) this,This is a very long text and works very well with this type of test and works better with more department wise contract and @ this #,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="This is a very long text and works very well with this type of test and works better with more department wise contract and @ this # this $ this % this ^ this &amp; this * this ( this ) this) this,Nonexistant,200,300"
                  expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
        <testData input="!Hello World,!,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="Hello World!,!,200,300"
                  expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
        <testData input="\\ Works Great and \&#34; and Works Greate Twoo,\\,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="Works Great and \\ \&#34; and Works Greate Twoo,\\,200,300"
                  expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
        <testData input="510 797 4647,510 797 4647,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="510-797-4647,510 797 4647,200,300"
                  expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
    </testcase>
    <testcase testName="testIfBeginsUsesEmail"
              fieldName="testIfBeginsUsesEmail"
              dataType="Percent"
              formula="IF(BEGINS(customemail1__c,customtext1__c),customnumber1__c,customcurrency1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customemail1" dataType="email"/>
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <testData input="email@aa.com,.com,200,300"
                  expectedOutput="30000,
					30000.000000000000000000000000000000,
					30000,
					30000,
					30000,
					30000.000000000000000000000000000000,
					30000,
					30000"/>
        <testData input="works@bvv.net,works@,200,300"
                  expectedOutput="20000,
					20000.000000000000000000000000000000,
					20000,
					20000,
					20000,
					20000.000000000000000000000000000000,
					20000,
					20000"/>
        <testData input="works@bvv.net,WORKS@,200,300"
                  expectedOutput="30000,
					30000.000000000000000000000000000000,
					30000,
					30000,
					30000,
					30000.000000000000000000000000000000,
					30000,
					30000"/>
        <testData input="a@salesforce.com,salesforce.com,200,300"
                  expectedOutput="30000,
					30000.000000000000000000000000000000,
					30000,
					30000,
					30000,
					30000.000000000000000000000000000000,
					30000,
					30000"/>
    </testcase>
    <testcase testName="testIfBeginsUsesPhone"
              fieldName="testIfBeginsUsesPhone"
              dataType="Currency"
              formula="IF(BEGINS(customphone1__c,customtext1__c),customnumber1__c,custompercent1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customphone1" dataType="phone"/>
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <testData input="Golden File,File,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
        <testData input="Golden File,n F,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
        <testData input="Golden File,gold,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
        <testData input="This is a very long text and works very well with this type of test and works better with more department wise contract and @ this # this $ this % this ^ this &amp; this * this ( this ) this) this,This is a very long text and works very well with this type of test and works better with more department wise contract and @ this #,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="This is a very long text and works very well with this type of test and works better with more department wise contract and @ this # this $ this % this ^ this &amp; this * this ( this ) this) this,Nonexistant,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
        <testData input="!Hello World,!,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="Hello World!,!,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
        <testData input="\\ Works Great and \&#34; and Works Greate Twoo,\\,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="Works Great and \\ \&#34; and Works Greate Twoo,\\,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
        <testData input="510 797 4647,510 797 4647,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="510-797-4647,510 797 4647,200,300"
                  expectedOutput="3,
					3.00000000000000000000000000000000,
					3,
					3,
					3,
					3.00000000000000000000000000000000,
					3,
					3"/>
    </testcase>
    <testcase testName="testSimpleSubstitute"
              fieldName="testSimpleSubstitute"
              dataType="Text"
              formula="SUBSTITUTE(customtext1__c,customtext2__c,customtext3__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customtext2" dataType="Text"/>
        <referenceField fieldName="customtext3" dataType="Text"/>
        <testData input=",,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="Golden File,Golden,Platinum"
                  expectedOutput="Platinum File,
					Platinum File,
					Platinum File,
					Platinum File,
					Platinum File,
					Platinum File,
					Platinum File,
					Platinum File"/>
        <testData input="No match,First,Second"
                  expectedOutput="No match,
					No match,
					No match,
					No match,
					No match,
					No match,
					No match,
					No match"/>
        <testData input="Salesforce,,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",old,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",,new"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",old,new"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="Golden File,, Platinum"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="Replace Space, ,No"
                  expectedOutput="ReplaceNoSpace,
					ReplaceNoSpace,
					ReplaceNoSpace,
					ReplaceNoSpace,
					ReplaceNoSpace,
					ReplaceNoSpace,
					ReplaceNoSpace,
					ReplaceNoSpace"/>
        <testData input="Replace All x x x,x,z"
                  expectedOutput="Replace All z z z,
					Replace All z z z,
					Replace All z z z,
					Replace All z z z,
					Replace All z z z,
					Replace All z z z,
					Replace All z z z,
					Replace All z z z"/>
        <testData input="Replace All xxx,x,z"
                  expectedOutput="Replace All zzz,
					Replace All zzz,
					Replace All zzz,
					Replace All zzz,
					Replace All zzz,
					Replace All zzz,
					Replace All zzz,
					Replace All zzz"/>
    </testcase>
<!--    <testcase testName="testTextNum"
              fieldName="testTextNum"
              dataType="Text"
              formula="Text(customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1234567890.0"
                  expectedOutput="1234567890,
					1234567890.0,
					1234567890,
					1234567890,
					1234567890,
					1234567890.0,
					1234567890,
					1234567890"/>
        <testData input="1234567891.0"
                  expectedOutput="1234567891,
					1234567891.0,
					1234567891,
					1234567891,
					1234567891,
					1234567891.0,
					1234567891,
					1234567891"/>
        <testData input="1234567890"
                  expectedOutput="1234567890,
					1234567890.0,
					1234567890,
					1234567890,
					1234567890,
					1234567890.0,
					1234567890,
					1234567890"/>
        <testData input="1234567891"
                  expectedOutput="1234567891,
					1234567891.0,
					1234567891,
					1234567891,
					1234567891,
					1234567891.0,
					1234567891,
					1234567891"/>
        <testData input="" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testTextNum2"
              fieldName="testTextNum2"
              dataType="Text"
              formula="Text(customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1234567890.0"
                  expectedOutput="1234567890,
					1234567890.0,
					1234567890,
					1234567890,
					1234567890,
					1234567890.0,
					1234567890,
					1234567890"/>
        <testData input="1234567891.0"
                  expectedOutput="1234567891,
					1234567891.0,
					1234567891,
					1234567891,
					1234567891,
					1234567891.0,
					1234567891,
					1234567891"/>
        <testData input="1234567890"
                  expectedOutput="1234567890,
					1234567890.0,
					1234567890,
					1234567890,
					1234567890,
					1234567890.0,
					1234567890,
					1234567890"/>
        <testData input="1234567891"
                  expectedOutput="1234567891,
					1234567891.0,
					1234567891,
					1234567891,
					1234567891,
					1234567891.0,
					1234567891,
					1234567891"/>
        <testData input="" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
    </testcase>-->
    <testcase testName="testLenSimple"
              fieldName="testLenSimple"
              dataType="Double"
              formula="LEN(customtext1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="This is too good to be true"
                  expectedOutput="27,
					27,
					27,
					27,
					27,
					27,
					27,
					27"/>
        <testData input="making a way"
                  expectedOutput="12,
					12,
					12,
					12,
					12,
					12,
					12,
					12"/>
        <testData input="" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="blunder" expectedOutput="7,
					7,
					7,
					7,
					7,
					7,
					7,
					7"/>
        <testData input="makesense" expectedOutput="9,
					9,
					9,
					9,
					9,
					9,
					9,
					9"/>
        <testData input="does not make sense"
                  expectedOutput="19,
					19,
					19,
					19,
					19,
					19,
					19,
					19"/>
        <testData input="working my way"
                  expectedOutput="14,
					14,
					14,
					14,
					14,
					14,
					14,
					14"/>
        <testData input="e" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag"
                  expectedOutput="172,
					172,
					172,
					172,
					172,
					172,
					172,
					172"/>
        <testData input="250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_"
                  expectedOutput="52,
					52,
					52,
					52,
					52,
					52,
					52,
					52"/>
        <testData input="blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r"
                  expectedOutput="57,
					57,
					57,
					57,
					57,
					57,
					57,
					57"/>
    </testcase>
    <!--<testcase testName="testLenUsesText"
              fieldName="testLenUsesText"
              dataType="Double"
              formula="LEN(Text(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1" expectedOutput="1,
					3,
					1,
					1,
					1,
					3,
					1,
					1"/>
        <testData input="0" expectedOutput="1,
					3,
					1,
					1,
					1,
					3,
					1,
					1"/>
        <testData input="2" expectedOutput="1,
					3,
					1,
					1,
					1,
					3,
					1,
					1"/>
        <testData input="3" expectedOutput="1,
					3,
					1,
					1,
					1,
					3,
					1,
					1"/>
        <testData input="4" expectedOutput="1,
					3,
					1,
					1,
					1,
					3,
					1,
					1"/>
        <testData input="7" expectedOutput="1,
					3,
					1,
					1,
					1,
					3,
					1,
					1"/>
        <testData input="12" expectedOutput="2,
					4,
					2,
					2,
					2,
					4,
					2,
					2"/>
        <testData input="16" expectedOutput="2,
					4,
					2,
					2,
					2,
					4,
					2,
					2"/>
        <testData input="256" expectedOutput="3,
					5,
					3,
					3,
					3,
					5,
					3,
					3"/>
        <testData input="65536.00" expectedOutput="5,
					8,
					5,
					5,
					5,
					8,
					5,
					5"/>
        <testData input="65536.16" expectedOutput="8,
					8,
					8,
					8,
					8,
					8,
					8,
					8"/>
        <testData input="65536.64" expectedOutput="8,
					8,
					8,
					8,
					8,
					8,
					8,
					8"/>
        <testData input="65536.4816"
                  expectedOutput="10,
					10,
					10,
					10,
					10,
					10,
					10,
					10"/>
    </testcase>-->
    <testcase testName="testTrim"
              fieldName="testTrim"
              dataType="Text"
              formula="TRIM(customtext1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="This is too good to be true"
                  expectedOutput="This is too good to be true,
					This is too good to be true,
					This is too good to be true,
					This is too good to be true,
					This is too good to be true,
					This is too good to be true,
					This is too good to be true,
					This is too good to be true"/>
        <testData input="making a way"
                  expectedOutput="making a way,
					making a way,
					making a way,
					making a way,
					making a way,
					making a way,
					making a way,
					making a way"/>
        <testData input=""
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="blunder"
                  expectedOutput="blunder,
					blunder,
					blunder,
					blunder,
					blunder,
					blunder,
					blunder,
					blunder"/>
        <testData input="makesense"
                  expectedOutput="makesense,
					makesense,
					makesense,
					makesense,
					makesense,
					makesense,
					makesense,
					makesense"/>
        <testData input="does not make sense"
                  expectedOutput="does not make sense,
					does not make sense,
					does not make sense,
					does not make sense,
					does not make sense,
					does not make sense,
					does not make sense,
					does not make sense"/>
        <testData input="working my way"
                  expectedOutput="working my way,
					working my way,
					working my way,
					working my way,
					working my way,
					working my way,
					working my way,
					working my way"/>
        <testData input="e" expectedOutput="e,
					e,
					e,
					e,
					e,
					e,
					e,
					e"/>
        <testData input="hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag"
                  expectedOutput="hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag,
					hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag,
					hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag,
					hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag,
					hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag,
					hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag,
					hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag,
					hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag"/>
        <testData input="250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_"
                  expectedOutput="250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_,
					250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_,
					250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_,
					250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_,
					250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_,
					250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_,
					250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_,
					250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_"/>
        <testData input="blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r"
                  expectedOutput="blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r,
					blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r,
					blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r,
					blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r,
					blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r,
					blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r,
					blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r,
					blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r"/>
    </testcase>
    <testcase testName="testInitCap"
              fieldName="testInitCap"
              dataType="Text"
              formula="INITCAP(customtext1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="﻿" expectedOutput="﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿"/>
        <testData input="CASES"
                  expectedOutput="Cases,
					Cases,
					Cases,
					Cases,
					Cases,
					Cases,
					Cases,
					Cases"/>
        <testData input="cases"
                  expectedOutput="Cases,
					Cases,
					Cases,
					Cases,
					Cases,
					Cases,
					Cases,
					Cases"/>
        <testData input="CaSeS"
                  expectedOutput="Cases,
					Cases,
					Cases,
					Cases,
					Cases,
					Cases,
					Cases,
					Cases"/>
        <testData input="große"
                  expectedOutput="Große,
					Große,
					Große,
					Große,
					Große,
					Große,
					Große,
					Große"/>
        <testData input="ångstrom"
                  expectedOutput="Ångstrom,
					Ångstrom,
					Ångstrom,
					Ångstrom,
					Ångstrom,
					Ångstrom,
					Ångstrom,
					Ångstrom"/>
        <testData input="ÅNGSTROM"
                  expectedOutput="Ångstrom,
					Ångstrom,
					Ångstrom,
					Ångstrom,
					Ångstrom,
					Ångstrom,
					Ångstrom,
					Ångstrom"/>
        <testData input="idempotent"
                  expectedOutput="Idempotent,
					Idempotent,
					Idempotent,
					Idempotent,
					Idempotent,
					Idempotent,
					Idempotent,
					Idempotent"/>
        <testData input="ıdempotent"
                  expectedOutput="Idempotent,
					Idempotent,
					Idempotent,
					Idempotent,
					Idempotent,
					Idempotent,
					Idempotent,
					Idempotent"/>
        <testData input="IDEMPOTENT"
                  expectedOutput="Idempotent,
					Idempotent,
					Idempotent,
					Idempotent,
					Idempotent,
					Idempotent,
					Idempotent,
					Idempotent"/>
        <testData input="İDEMPOTENT"
                  expectedOutput="İdempotent,
					İdempotent,
					İDempotent,
					İDempotent,
					İdempotent,
					İdempotent,
					İDempotent,
					İDempotent"/>
        <testData input="Mr. CASES"
                  expectedOutput="Mr. Cases,
					Mr. Cases,
					Mr. Cases,
					Mr. Cases,
					Mr. Cases,
					Mr. Cases,
					Mr. Cases,
					Mr. Cases"/>
        <testData input="MR. cases"
                  expectedOutput="Mr. Cases,
					Mr. Cases,
					Mr. Cases,
					Mr. Cases,
					Mr. Cases,
					Mr. Cases,
					Mr. Cases,
					Mr. Cases"/>
        <testData input="Herr.  CaSeS"
                  expectedOutput="Herr.  Cases,
					Herr.  Cases,
					Herr.  Cases,
					Herr.  Cases,
					Herr.  Cases,
					Herr.  Cases,
					Herr.  Cases,
					Herr.  Cases"/>
        <testData input="129 große"
                  expectedOutput="129 Große,
					129 Große,
					129 Große,
					129 Große,
					129 Große,
					129 Große,
					129 Große,
					129 Große"/>
        <testData input="mr. 123smith"
                  expectedOutput="Mr. 123smith,
					Mr. 123smith,
					Mr. 123smith,
					Mr. 123smith,
					Mr. 123smith,
					Mr. 123smith,
					Mr. 123smith,
					Mr. 123smith"/>
        <testData input="mr. _smith"
                  expectedOutput="Mr. _Smith,
					Mr. _Smith,
					Mr. _Smith,
					Mr. _Smith,
					Mr. _Smith,
					Mr. _Smith,
					Mr. _Smith,
					Mr. _Smith"/>
        <testData input="LOWER ångstrom"
                  expectedOutput="Lower Ångstrom,
					Lower Ångstrom,
					Lower Ångstrom,
					Lower Ångstrom,
					Lower Ångstrom,
					Lower Ångstrom,
					Lower Ångstrom,
					Lower Ångstrom"/>
        <testData input="[] ÅNGSTROM"
                  expectedOutput="[] Ångstrom,
					[] Ångstrom,
					[] Ångstrom,
					[] Ångstrom,
					[] Ångstrom,
					[] Ångstrom,
					[] Ångstrom,
					[] Ångstrom"/>
        <testData input="foo idempotent"
                  expectedOutput="Foo Idempotent,
					Foo Idempotent,
					Foo Idempotent,
					Foo Idempotent,
					Foo Idempotent,
					Foo Idempotent,
					Foo Idempotent,
					Foo Idempotent"/>
        <testData input="bar ıdempotent"
                  expectedOutput="Bar Idempotent,
					Bar Idempotent,
					Bar Idempotent,
					Bar Idempotent,
					Bar Idempotent,
					Bar Idempotent,
					Bar Idempotent,
					Bar Idempotent"/>
        <testData input="top IDEMPOTENT"
                  expectedOutput="Top Idempotent,
					Top Idempotent,
					Top Idempotent,
					Top Idempotent,
					Top Idempotent,
					Top Idempotent,
					Top Idempotent,
					Top Idempotent"/>
        <testData input="bottom İDEMPOTENT"
                  expectedOutput="Bottom İdempotent,
					Bottom İdempotent,
					Bottom İDempotent,
					Bottom İDempotent,
					Bottom İdempotent,
					Bottom İdempotent,
					Bottom İDempotent,
					Bottom İDempotent"/>
        <testData input="ijsland"
                  expectedOutput="Ijsland,
					Ijsland,
					Ijsland,
					Ijsland,
					Ijsland,
					Ijsland,
					Ijsland,
					Ijsland"/>
    </testcase>
    <testcase testName="testChr"
              fieldName="testChr"
              dataType="Text"
              formula="CHR(customnumber__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber" dataType="Double"/>
        <testData input=""
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="0"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="9" expectedOutput=" ,
					,   ,
					,   ,
					,   ,
					"/>
        <testData input="13" expectedOutput=" ,
					,   ,
					,   ,
					,   ,
					"/>
        <testData input="32" expectedOutput=" ,
					,   ,
					,   ,
					,   ,
					"/>
        <testData input="95" expectedOutput="_,
					_,
					_,
					_,
					_,
					_,
					_,
					_"/>
        <testData input="8364" expectedOutput="€,
					€,
					€,
					€,
					€,
					€,
					€,
					€"/>
        <testData input="64.5" expectedOutput="@,
					@,
					@,
					@,
					@,
					@,
					@,
					@"/>
        <testData input="11822" expectedOutput="⸮,
					⸮,
					⸮,
					⸮,
					⸮,
					⸮,
					⸮,
					⸮"/>
        <testData input="-32"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testAscii"
              fieldName="testAscii"
              dataType="Double"
              formula="ASCII(customtext1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input=""
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="!" expectedOutput="33,
					33,
					33,
					33,
					33,
					33,
					33,
					33"/>
        <testData input="C" expectedOutput="67,
					67,
					67,
					67,
					67,
					67,
					67,
					67"/>
        <testData input="CaSeS" expectedOutput="67,
					67,
					67,
					67,
					67,
					67,
					67,
					67"/>
        <testData input="ß"
                  expectedOutput="223,
					223,
					223,
					223,
					223,
					223,
					223,
					223"/>
        <testData input="ångstrom"
                  expectedOutput="229,
					229,
					229,
					229,
					229,
					229,
					229,
					229"/>
        <testData input="ÅNGSTROM"
                  expectedOutput="197,
					197,
					197,
					197,
					197,
					197,
					197,
					197"/>
        <testData input="idempotent"
                  expectedOutput="105,
					105,
					105,
					105,
					105,
					105,
					105,
					105"/>
        <testData input="ıdempotent"
                  expectedOutput="305,
					305,
					305,
					305,
					305,
					305,
					305,
					305"/>
        <testData input="IDEMPOTENT"
                  expectedOutput="73,
					73,
					73,
					73,
					73,
					73,
					73,
					73"/>
        <testData input="İDEMPOTENT"
                  expectedOutput="304,
					304,
					304,
					304,
					304,
					304,
					304,
					304"/>
        <testData input="[" expectedOutput="91,
					91,
					91,
					91,
					91,
					91,
					91,
					91"/>
        <testData input="捦"
                  expectedOutput="25446,
					25446,
					25446,
					25446,
					25446,
					25446,
					25446,
					25446"/>
        <testData input="ijsland"
                  expectedOutput="105,
					105,
					105,
					105,
					105,
					105,
					105,
					105"/>
    </testcase>
    <testcase testName="testExpSimple"
              fieldName="testExpSimple"
              dataType="Double"
              formula="EXP(customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="0" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="1"
                  expectedOutput="2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818,
					2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818"/>
        <testData input="2"
                  expectedOutput="7.38905609893065,
					7.38905609893065022723,
					7.38905609893065,
					7.3890561,
					7.38905609893065,
					7.38905609893065022723,
					7.38905609893065,
					7.3890561"/>
        <testData input="-1"
                  expectedOutput="0.36787944117144233,
					0.3678794411714423216,
					0.36787944117144233,
					0.3678794,
					0.36787944117144233,
					0.3678794411714423216,
					0.36787944117144233,
					0.3678794"/>
        <testData input="-10"
                  expectedOutput="0.000045399929762484854,
					0.00004539992976248485,
					0.000045399929762484854,
					0.0000454,
					0.000045399929762484854,
					0.00004539992976248485,
					0.000045399929762484854,
					0.0000454"/>
        <testData input="-100"
                  expectedOutput="0.00000000000000000000000000000000,
					0,
					0E-32,
					0,
					0.00000000000000000000000000000000,
					0,
					0E-32,
					0"/>
        <testData input="56"
                  expectedOutput="2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656,
					2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656"/>
        <testData input="110"
                  expectedOutput="592097202766467000000000000000000000000000000000,
					592097202766467029895522881558803977225493294301.15326061451748110694,
					592097202766467000000000000000000000000000000000,
					592097202766466993617016430120581649425527472128,
					592097202766467000000000000000000000000000000000,
					592097202766467029895522881558803977225493294301.15326061451748110694,
					592097202766467000000000000000000000000000000000,
					592097202766466993617016430120581649425527472128"/>
        <testData input="20"
                  expectedOutput="485165195.4097903,
					485165195.40979027796910683054,
					485165195.4097903,
					485165195.4097903,
					485165195.4097903,
					485165195.40979027796910683054,
					485165195.4097903,
					485165195.4097903"/>
    </testcase>
    <testcase testName="testExpUsesAbs"
              fieldName="testExpUsesAbs"
              dataType="Double"
              formula="EXP(ABS(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="0" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="1"
                  expectedOutput="2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818,
					2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818"/>
        <testData input="2"
                  expectedOutput="7.38905609893065,
					7.38905609893065022723,
					7.38905609893065,
					7.3890561,
					7.38905609893065,
					7.38905609893065022723,
					7.38905609893065,
					7.3890561"/>
        <testData input="-1"
                  expectedOutput="2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818,
					2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818"/>
        <testData input="-10"
                  expectedOutput="22026.465794806718,
					22026.4657948067165169579,
					22026.465794806718,
					22026.4657948,
					22026.465794806718,
					22026.4657948067165169579,
					22026.465794806718,
					22026.4657948"/>
        <testData input="-100"
                  expectedOutput="26881171418161356000000000000000000000000000,
					26881171418161354484126255515800135873611118.77374192241519160862,
					26881171418161356000000000000000000000000000,
					26881171418161356094253400435962903554686976,
					26881171418161356000000000000000000000000000,
					26881171418161354484126255515800135873611118.77374192241519160862,
					26881171418161356000000000000000000000000000,
					26881171418161356094253400435962903554686976"/>
        <testData input="56"
                  expectedOutput="2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656,
					2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656"/>
        <testData input="110"
                  expectedOutput="592097202766467000000000000000000000000000000000,
					592097202766467029895522881558803977225493294301.15326061451748110694,
					592097202766467000000000000000000000000000000000,
					592097202766466993617016430120581649425527472128,
					592097202766467000000000000000000000000000000000,
					592097202766467029895522881558803977225493294301.15326061451748110694,
					592097202766467000000000000000000000000000000000,
					592097202766466993617016430120581649425527472128"/>
        <testData input="20"
                  expectedOutput="485165195.4097903,
					485165195.40979027796910683054,
					485165195.4097903,
					485165195.4097903,
					485165195.4097903,
					485165195.40979027796910683054,
					485165195.4097903,
					485165195.4097903"/>
    </testcase>
    <testcase testName="testExpUsesCeil"
              fieldName="testExpUsesCeil"
              dataType="Double"
              formula="EXP(CEILING(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="0" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="1"
                  expectedOutput="2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818,
					2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818"/>
        <testData input="2"
                  expectedOutput="7.38905609893065,
					7.38905609893065022723,
					7.38905609893065,
					7.3890561,
					7.38905609893065,
					7.38905609893065022723,
					7.38905609893065,
					7.3890561"/>
        <testData input="-1"
                  expectedOutput="0.36787944117144233,
					0.3678794411714423216,
					0.36787944117144233,
					0.3678794,
					0.36787944117144233,
					0.3678794411714423216,
					0.36787944117144233,
					0.3678794"/>
        <testData input="-10"
                  expectedOutput="0.000045399929762484854,
					0.00004539992976248485,
					0.000045399929762484854,
					0.0000454,
					0.000045399929762484854,
					0.00004539992976248485,
					0.000045399929762484854,
					0.0000454"/>
        <testData input="-100"
                  expectedOutput="0.00000000000000000000000000000000,
					0,
					0E-32,
					0,
					0.00000000000000000000000000000000,
					0,
					0E-32,
					0"/>
        <testData input="56"
                  expectedOutput="2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656,
					2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656"/>
        <testData input="110"
                  expectedOutput="592097202766467000000000000000000000000000000000,
					592097202766467029895522881558803977225493294301.15326061451748110694,
					592097202766467000000000000000000000000000000000,
					592097202766466993617016430120581649425527472128,
					592097202766467000000000000000000000000000000000,
					592097202766467029895522881558803977225493294301.15326061451748110694,
					592097202766467000000000000000000000000000000000,
					592097202766466993617016430120581649425527472128"/>
        <testData input="20"
                  expectedOutput="485165195.4097903,
					485165195.40979027796910683054,
					485165195.4097903,
					485165195.4097903,
					485165195.4097903,
					485165195.40979027796910683054,
					485165195.4097903,
					485165195.4097903"/>
    </testcase>
    <testcase testName="testExpUsesFloor"
              fieldName="testExpUsesFloor"
              dataType="Double"
              formula="EXP(FLOOR(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="0" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="1"
                  expectedOutput="2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818,
					2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818"/>
        <testData input="2"
                  expectedOutput="7.38905609893065,
					7.38905609893065022723,
					7.38905609893065,
					7.3890561,
					7.38905609893065,
					7.38905609893065022723,
					7.38905609893065,
					7.3890561"/>
        <testData input="-1"
                  expectedOutput="0.36787944117144233,
					0.3678794411714423216,
					0.36787944117144233,
					0.3678794,
					0.36787944117144233,
					0.3678794411714423216,
					0.36787944117144233,
					0.3678794"/>
        <testData input="-10"
                  expectedOutput="0.000045399929762484854,
					0.00004539992976248485,
					0.000045399929762484854,
					0.0000454,
					0.000045399929762484854,
					0.00004539992976248485,
					0.000045399929762484854,
					0.0000454"/>
        <testData input="-100"
                  expectedOutput="0.00000000000000000000000000000000,
					0,
					0E-32,
					0,
					0.00000000000000000000000000000000,
					0,
					0E-32,
					0"/>
        <testData input="56"
                  expectedOutput="2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656,
					2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656"/>
        <testData input="110"
                  expectedOutput="592097202766467000000000000000000000000000000000,
					592097202766467029895522881558803977225493294301.15326061451748110694,
					592097202766467000000000000000000000000000000000,
					592097202766466993617016430120581649425527472128,
					592097202766467000000000000000000000000000000000,
					592097202766467029895522881558803977225493294301.15326061451748110694,
					592097202766467000000000000000000000000000000000,
					592097202766466993617016430120581649425527472128"/>
        <testData input="20"
                  expectedOutput="485165195.4097903,
					485165195.40979027796910683054,
					485165195.4097903,
					485165195.4097903,
					485165195.4097903,
					485165195.40979027796910683054,
					485165195.4097903,
					485165195.4097903"/>
    </testcase>
    <testcase testName="testExpUsesLog"
              fieldName="testExpUsesLog"
              dataType="Double"
              formula="EXP(LOG(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					0,
					0,
					Error: java.lang.NumberFormatException,
					null,
					0,
					0"/>
        <testData input="1" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="2"
                  expectedOutput="1.351249872567267,
					1.35124987256726717938,
					1.3512498725672673,
					1.3512499,
					1.351249872567267,
					1.35124987256726717938,
					1.3512498725672673,
					1.3512499"/>
        <testData input="-1"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-10"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-100"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="56"
                  expectedOutput="5.744184932551994,
					5.74418493255199289714,
					5.744184932551993,
					5.7441849,
					5.744184932551994,
					5.74418493255199289714,
					5.744184932551993,
					5.7441849"/>
        <testData input="110"
                  expectedOutput="7.70132725787646,
					7.70132725787646035322,
					7.701327257876461,
					7.7013273,
					7.70132725787646,
					7.70132725787646035322,
					7.701327257876461,
					7.7013273"/>
        <testData input="20"
                  expectedOutput="3.673077974307202,
					3.67307797430720289712,
					3.673077974307203,
					3.673078,
					3.673077974307202,
					3.67307797430720289712,
					3.673077974307203,
					3.673078"/>
    </testcase>
    <testcase testName="testExpUsesLn"
              fieldName="testExpUsesLn"
              dataType="Double"
              formula="ROUND(EXP(LN(customnumber1__c)), 0)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="2" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="3" expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
        <testData input="4" expectedOutput="4,
					4,
					4,
					4,
					4,
					4,
					4,
					4"/>
        <testData input="5" expectedOutput="5,
					5,
					5,
					5,
					5,
					5,
					5,
					5"/>
        <testData input="6" expectedOutput="6,
					6,
					6,
					6,
					6,
					6,
					6,
					6"/>
        <testData input="10000"
                  expectedOutput="10000,
					10000,
					10000,
					10000,
					10000,
					10000,
					10000,
					10000"/>
        <testData input="10" expectedOutput="10,
					10,
					10,
					10,
					10,
					10,
					10,
					10"/>
        <testData input="16" expectedOutput="16,
					16,
					16,
					16,
					16,
					16,
					16,
					16"/>
        <testData input="2.56" expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
        <testData input="123456789.123456789"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
    </testcase>
    <testcase testName="testExpUsesSqrt"
              fieldName="testExpUsesSqrt"
              dataType="Double"
              formula="EXP(SQRT(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1"
                  expectedOutput="2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818,
					2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818"/>
        <testData input="0" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="2"
                  expectedOutput="4.1132503787829275,
					4.11325037878292731644,
					4.1132503787829275,
					4.1132504,
					4.1132503787829275,
					4.11325037878292731644,
					4.1132503787829275,
					4.1132504"/>
        <testData input="3"
                  expectedOutput="5.6522336740340915,
					5.65223367403409045778,
					5.652233674034092,
					5.6522337,
					5.6522336740340915,
					5.65223367403409045778,
					5.652233674034092,
					5.6522337"/>
        <testData input="4"
                  expectedOutput="7.38905609893065,
					7.38905609893065022723,
					7.38905609893065,
					7.3890561,
					7.38905609893065,
					7.38905609893065022723,
					7.38905609893065,
					7.3890561"/>
        <testData input="7"
                  expectedOutput="14.094030107067814,
					14.09403010706781782492,
					14.094030107067812,
					14.0940301,
					14.094030107067814,
					14.09403010706781782492,
					14.094030107067812,
					14.0940301"/>
        <testData input="12"
                  expectedOutput="31.947745505884924,
					31.94774550588494469061,
					31.94774550588493,
					31.9477455,
					31.947745505884924,
					31.94774550588494469061,
					31.94774550588493,
					31.9477455"/>
        <testData input="16"
                  expectedOutput="54.598150033144236,
					54.59815003314423907811,
					54.598150033144236,
					54.59815,
					54.598150033144236,
					54.59815003314423907811,
					54.598150033144236,
					54.59815"/>
        <testData input="256"
                  expectedOutput="8886110.520507872,
					8886110.52050787263676302374,
					8886110.520507872,
					8886110.5205079,
					8886110.520507872,
					8886110.52050787263676302374,
					8886110.520507872,
					8886110.5205079"/>
        <testData input="65536.00"
                  expectedOutput="1511427665004103500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
					1511427665004103542520089665707286507506240898287120716316351114226998030298483483320553622520681838755847626210.64072938204663081967,
					1511427665004103500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
					1511427665004103527714100498092829891603482697174374415092350456743517150826614334359230562343706299625849749504,
					1511427665004103500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
					1511427665004103542520089665707286507506240898287120716316351114226998030298483483320553622520681838755847626210.64072938204663081967,
					1511427665004103500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
					1511427665004103527714100498092829891603482697174374415092350456743517150826614334359230562343706299625849749504"/>
        <testData input="65536.16"
                  expectedOutput="1511900059668960800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
					1511900059668965058015364947150657282942332894793425669807060614433373969685365535168610549836675791403484380825.95938619184764639286,
					1511900059668912700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
					1511900059668960792045027473893068560213226306057215816827729866211121182993381225084956274806377093322921476096,
					1511900059668960800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
					1511900059668965058015364947150657282942332894793425669807060614433373969685365535168610549836675791403484380825.95938619184764639286,
					1511900059668912700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
					1511900059668960792045027473893068560213226306057215816827729866211121182993381225084956274806377093322921476096"/>
        <testData input="65536.64"
                  expectedOutput="1513318126262145700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
					1513318126262184005296771679564856039408780003126835696631800241612022742986830078001624993846143706166555049159.626824328097285562,
					1513318126262119000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
					1513318126262145656330586723487546915671496525137778713895458463841735697716188668461932546620580573195779702784,
					1513318126262145700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
					1513318126262184005296771679564856039408780003126835696631800241612022742986830078001624993846143706166555049159.626824328097285562,
					1513318126262119000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
					1513318126262145656330586723487546915671496525137778713895458463841735697716188668461932546620580573195779702784"/>
        <testData input="65536.4816"
                  expectedOutput="1512850017883840400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
					1512850017883838130508175526279824321381859193906093398216089846729731215386428694502777609091047881713067684551.45072637538821411459,
					1512850017883882600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
					1512850017883840406192911472230098831393929802855448056149500764875292189026751722372098175187944330861406584832,
					1512850017883840400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
					1512850017883838130508175526279824321381859193906093398216089846729731215386428694502777609091047881713067684551.45072637538821411459,
					1512850017883882600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
					1512850017883840406192911472230098831393929802855448056149500764875292189026751722372098175187944330861406584832"/>
    </testcase>
    <testcase testName="testExpUsesRound"
              fieldName="testExpUsesRound"
              dataType="Double"
              formula="EXP(ROUND(customnumber1__c,customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,0" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="0,1" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="1,2"
                  expectedOutput="2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818,
					2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818"/>
        <testData input="2,4"
                  expectedOutput="7.38905609893065,
					7.38905609893065022723,
					7.38905609893065,
					7.3890561,
					7.38905609893065,
					7.38905609893065022723,
					7.38905609893065,
					7.3890561"/>
        <testData input="-1,-12" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="-10,2"
                  expectedOutput="0.000045399929762484854,
					0.00004539992976248485,
					0.000045399929762484854,
					0.0000454,
					0.000045399929762484854,
					0.00004539992976248485,
					0.000045399929762484854,
					0.0000454"/>
        <testData input="-100,-1"
                  expectedOutput="0.00000000000000000000000000000000,
					0,
					0E-32,
					0,
					0.00000000000000000000000000000000,
					0,
					0E-32,
					0"/>
        <testData input="56,5"
                  expectedOutput="2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656,
					2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656"/>
        <testData input="56,0"
                  expectedOutput="2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656,
					2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656"/>
        <testData input="56,12"
                  expectedOutput="2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656,
					2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656"/>
        <testData input="," expectedOutput="1.0,
					1,
					1,
					1,
					null,
					null,
					null,
					null"/>
        <testData input=",2" expectedOutput="1.0,
					1,
					1,
					1,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testExpUsesMOD"
              fieldName="testExpUsesMOD"
              dataType="Double"
              formula="EXP(MOD(customnumber1__c,customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,1" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="20,-1" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="20.12345, 2"
                  expectedOutput="1.1313934334561406,
					1.13139343345614055466,
					1.1313934334561406,
					1.1313934,
					1.1313934334561406,
					1.13139343345614055466,
					1.1313934334561406,
					1.1313934"/>
        <testData input="20.123444,13"
                  expectedOutput="1240.7161100372325,
					1240.71611003723235861938,
					1240.7161100372323,
					1240.71611,
					1240.7161100372325,
					1240.71611003723235861938,
					1240.7161100372323,
					1240.71611"/>
        <testData input="20.123445,7"
                  expectedOutput="456.4344056470803,
					456.43440564708020957522,
					456.4344056470802,
					456.4344056,
					456.4344056470803,
					456.43440564708020957522,
					456.4344056470802,
					456.4344056"/>
        <testData input="20.12345,23"
                  expectedOutput="548912716.228101,
					548912716.22810198573593510536,
					548912716.228102,
					548912716.228101,
					548912716.228101,
					548912716.22810198573593510536,
					548912716.228102,
					548912716.228101"/>
        <testData input="20.12,1"
                  expectedOutput="1.1274968515793757,
					1.12749685157937567148,
					1.1274968515793757,
					1.1274969,
					1.1274968515793757,
					1.12749685157937567148,
					1.1274968515793757,
					1.1274969"/>
        <testData input="-1,2"
                  expectedOutput="0.36787944117144233,
					0.3678794411714423216,
					0.36787944117144233,
					0.3678794,
					0.36787944117144233,
					0.3678794411714423216,
					0.36787944117144233,
					0.3678794"/>
        <testData input="-1,2654"
                  expectedOutput="0.36787944117144233,
					0.3678794411714423216,
					0.36787944117144233,
					0.3678794,
					0.36787944117144233,
					0.3678794411714423216,
					0.36787944117144233,
					0.3678794"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="0.3251538613960456,
					0.32515386139604560031,
					0.3251538610708917,
					0.3251539,
					0.3251538613960456,
					0.32515386139604560031,
					0.3251538610708917,
					0.3251539"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="3.075467090276916,
					3.0754670902769159798,
					3.075467093352383,
					3.0754671,
					3.075467090276916,
					3.0754670902769159798,
					3.075467093352383,
					3.0754671"/>
        <testData input="46,-456"
                  expectedOutput="94961194206024480000,
					94961194206024488745.13364911711832310182,
					94961194206024480000,
					94961194206024482816,
					94961194206024480000,
					94961194206024488745.13364911711832310182,
					94961194206024480000,
					94961194206024482816"/>
        <testData input="-0,-1" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="-0.00034,3"
                  expectedOutput="0.9996600577934499,
					0.9996600577934498901,
					0.9996600577934499,
					0.9996601,
					0.9996600577934499,
					0.9996600577934498901,
					0.9996600577934499,
					0.9996601"/>
        <testData input="-.244,2"
                  expectedOutput="0.7834876342628625,
					0.7834876342628625324,
					0.7834876342628625,
					0.7834876,
					0.7834876342628625,
					0.7834876342628625324,
					0.7834876342628625,
					0.7834876"/>
        <testData input="-0.244,2"
                  expectedOutput="0.7834876342628625,
					0.7834876342628625324,
					0.7834876342628625,
					0.7834876,
					0.7834876342628625,
					0.7834876342628625324,
					0.7834876342628625,
					0.7834876"/>
        <testData input="-0.245,23223244"
                  expectedOutput="0.7827045382418681,
					0.78270453824186816771,
					0.7827045382418681,
					0.7827045,
					0.7827045382418681,
					0.78270453824186816771,
					0.7827045382418681,
					0.7827045"/>
        <testData input=".24456,123456789"
                  expectedOutput="1.2770592834826828,
					1.27705928348268275823,
					1.2770592834826828,
					1.2770593,
					1.2770592834826828,
					1.27705928348268275823,
					1.2770592834826828,
					1.2770593"/>
        <testData input="0.24456,0.000045"
                  expectedOutput="1.0000300004500045,
					1.00003000045000450003,
					1.0000300004500045,
					1.00003,
					1.0000300004500045,
					1.00003000045000450003,
					1.0000300004500045,
					1.00003"/>
        <testData input=",16"
                  expectedOutput="1.0,
					1,
					1,
					1,
					null,
					null,
					null,
					null"/>
        <testData input=",2" expectedOutput="1.0,
					1,
					1,
					1,
					null,
					null,
					null,
					null"/>
        <testData input="-256,16" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
    </testcase>
    <testcase testName="testExpUsesIf"
              fieldName="testExpUsesIf"
              dataType="Double"
              formula="EXP(IF(true,customnumber1__c,customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,0" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="0,1" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="1,2"
                  expectedOutput="2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818,
					2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818"/>
        <testData input="2,4"
                  expectedOutput="7.38905609893065,
					7.38905609893065022723,
					7.38905609893065,
					7.3890561,
					7.38905609893065,
					7.38905609893065022723,
					7.38905609893065,
					7.3890561"/>
        <testData input="-1,-12"
                  expectedOutput="0.36787944117144233,
					0.3678794411714423216,
					0.36787944117144233,
					0.3678794,
					0.36787944117144233,
					0.3678794411714423216,
					0.36787944117144233,
					0.3678794"/>
        <testData input="-10,2"
                  expectedOutput="0.000045399929762484854,
					0.00004539992976248485,
					0.000045399929762484854,
					0.0000454,
					0.000045399929762484854,
					0.00004539992976248485,
					0.000045399929762484854,
					0.0000454"/>
        <testData input="-100,-1"
                  expectedOutput="0.00000000000000000000000000000000,
					0,
					0E-32,
					0,
					0.00000000000000000000000000000000,
					0,
					0E-32,
					0"/>
        <testData input="56,5"
                  expectedOutput="2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656,
					2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656"/>
        <testData input="56,0"
                  expectedOutput="2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656,
					2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656"/>
        <testData input="56,12"
                  expectedOutput="2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656,
					2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656"/>
        <testData input="," expectedOutput="1.0,
					1,
					1,
					1,
					null,
					null,
					null,
					null"/>
        <testData input=",2" expectedOutput="1.0,
					1,
					1,
					1,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testExpUsesLen"
              fieldName="testExpUsesLen"
              dataType="Double"
              formula="EXP(LEN(customtext1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="This is too good to be true"
                  expectedOutput="532048240601.79865,
					532048240601.79861668374730434118,
					532048240601.79865,
					532048240601.798645,
					532048240601.79865,
					532048240601.79861668374730434118,
					532048240601.79865,
					532048240601.798645"/>
        <testData input="making a way"
                  expectedOutput="162754.79141900392,
					162754.7914190039208080052,
					162754.79141900392,
					162754.791419,
					162754.79141900392,
					162754.7914190039208080052,
					162754.79141900392,
					162754.791419"/>
        <testData input="" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="blunder"
                  expectedOutput="1096.6331584284585,
					1096.63315842845859926372,
					1096.6331584284585,
					1096.6331584,
					1096.6331584284585,
					1096.63315842845859926372,
					1096.6331584284585,
					1096.6331584"/>
        <testData input="makesense"
                  expectedOutput="8103.083927575384,
					8103.08392757538400771,
					8103.083927575384,
					8103.0839276,
					8103.083927575384,
					8103.08392757538400771,
					8103.083927575384,
					8103.0839276"/>
        <testData input="does not make sense"
                  expectedOutput="178482300.96318725,
					178482300.96318726084491003379,
					178482300.96318725,
					178482300.9631872,
					178482300.96318725,
					178482300.96318726084491003379,
					178482300.96318725,
					178482300.9631872"/>
        <testData input="working my way"
                  expectedOutput="1202604.2841647768,
					1202604.28416477677774923677,
					1202604.2841647768,
					1202604.2841648,
					1202604.2841647768,
					1202604.28416477677774923677,
					1202604.2841647768,
					1202604.2841648"/>
        <testData input="e"
                  expectedOutput="2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818,
					2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818"/>
        <testData input="hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag"
                  expectedOutput="499632737950757800000000000000000000000000000000000000000000000000000000000,
					499632737950757823747999922914408210606474359768980825054696547811875368826.51377096244996338986,
					499632737950757800000000000000000000000000000000000000000000000000000000000,
					499632737950757811725684056750952295722658193682706168468995267143252574208,
					499632737950757800000000000000000000000000000000000000000000000000000000000,
					499632737950757823747999922914408210606474359768980825054696547811875368826.51377096244996338986,
					499632737950757800000000000000000000000000000000000000000000000000000000000,
					499632737950757811725684056750952295722658193682706168468995267143252574208"/>
        <testData input="250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_"
                  expectedOutput="38310080007165770000000,
					38310080007165768493035.6954878619938987056,
					38310080007165770000000,
					38310080007165769154560,
					38310080007165770000000,
					38310080007165768493035.6954878619938987056,
					38310080007165770000000,
					38310080007165769154560"/>
        <testData input="blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r"
                  expectedOutput="5685719999335932000000000,
					5685719999335932222640348.82063325330337215833,
					5685719999335932000000000,
					5685719999335932014624768,
					5685719999335932000000000,
					5685719999335932222640348.82063325330337215833,
					5685719999335932000000000,
					5685719999335932014624768"/>
    </testcase>
    <testcase testName="testExpUsesValue"
              fieldName="testExpUsesValue"
              dataType="Double"
              formula="EXP(VALUE(customtext1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="0" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="1"
                  expectedOutput="2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818,
					2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818"/>
        <testData input="2"
                  expectedOutput="7.38905609893065,
					7.38905609893065022723,
					7.38905609893065,
					7.3890561,
					7.38905609893065,
					7.38905609893065022723,
					7.38905609893065,
					7.3890561"/>
        <testData input="-1"
                  expectedOutput="0.36787944117144233,
					0.3678794411714423216,
					0.36787944117144233,
					0.3678794,
					0.36787944117144233,
					0.3678794411714423216,
					0.36787944117144233,
					0.3678794"/>
        <testData input="-10"
                  expectedOutput="0.000045399929762484854,
					0.00004539992976248485,
					0.000045399929762484854,
					0.0000454,
					0.000045399929762484854,
					0.00004539992976248485,
					0.000045399929762484854,
					0.0000454"/>
        <testData input="-100"
                  expectedOutput="0.00000000000000000000000000000000,
					0,
					0E-32,
					0,
					0.00000000000000000000000000000000,
					0,
					0E-32,
					0"/>
        <testData input="56"
                  expectedOutput="2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656,
					2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656"/>
        <testData input="110"
                  expectedOutput="592097202766467000000000000000000000000000000000,
					592097202766467029895522881558803977225493294301.15326061451748110694,
					592097202766467000000000000000000000000000000000,
					592097202766466993617016430120581649425527472128,
					592097202766467000000000000000000000000000000000,
					592097202766467029895522881558803977225493294301.15326061451748110694,
					592097202766467000000000000000000000000000000000,
					592097202766466993617016430120581649425527472128"/>
        <testData input="20"
                  expectedOutput="485165195.4097903,
					485165195.40979027796910683054,
					485165195.4097903,
					485165195.4097903,
					485165195.4097903,
					485165195.40979027796910683054,
					485165195.4097903,
					485165195.4097903"/>
    </testcase>
    <testcase testName="testExpUsesMinus"
              fieldName="testExpUsesMinus"
              dataType="Double"
              formula="EXP((custompercent1__c-customcurrency1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <testData input="0,0" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="0,1"
                  expectedOutput="0.36787944117144233,
					0.3678794411714423216,
					0.36787944117144233,
					0.3678794,
					0.36787944117144233,
					0.3678794411714423216,
					0.36787944117144233,
					0.3678794"/>
        <testData input="1,2"
                  expectedOutput="0.13669542544552385,
					0.13669542544552385787,
					0.13669542544552385,
					0.1366954,
					0.13669542544552385,
					0.13669542544552385787,
					0.13669542544552385,
					0.1366954"/>
        <testData input="2,4"
                  expectedOutput="0.018685639337732773,
					0.0186856393377327714,
					0.018685639337732773,
					0.0186856,
					0.018685639337732773,
					0.0186856393377327714,
					0.018685639337732773,
					0.0186856"/>
        <testData input="-1,-12"
                  expectedOutput="161135.35418626538,
					161135.354186265355119513,
					161135.35418626535,
					161135.3541863,
					161135.35418626538,
					161135.354186265355119513,
					161135.35418626535,
					161135.3541863"/>
        <testData input="-10,2"
                  expectedOutput="0.1224564282529819,
					0.12245642825298191022,
					0.1224564282529819,
					0.1224564,
					0.1224564282529819,
					0.12245642825298191022,
					0.1224564282529819,
					0.1224564"/>
        <testData input="-100,-1" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="56,5"
                  expectedOutput="0.011795938519751562,
					0.0117959385197515658,
					0.011795938519751565,
					0.0117959,
					0.011795938519751562,
					0.0117959385197515658,
					0.011795938519751565,
					0.0117959"/>
        <testData input="56,0"
                  expectedOutput="1.7506725002961012,
					1.75067250029610108255,
					1.750672500296101,
					1.7506725,
					1.7506725002961012,
					1.75067250029610108255,
					1.750672500296101,
					1.7506725"/>
        <testData input="56,12"
                  expectedOutput="0.000010756503602951294,
					0.00001075650360295129,
					0.000010756503602951289,
					0.0000108,
					0.000010756503602951294,
					0.00001075650360295129,
					0.000010756503602951289,
					0.0000108"/>
        <testData input="," expectedOutput="1.0,
					1,
					1,
					1,
					null,
					null,
					null,
					null"/>
        <testData input=",2"
                  expectedOutput="0.1353352832366127,
					0.13533528323661269189,
					0.1353352832366127,
					0.1353353,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testExpUsesPlus"
              fieldName="testExpUsesPlus"
              dataType="Double"
              formula="EXP(customformula0__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customformula0"
                        dataType="Double"
                        formula="(custompercent1__c+customnumber1__c)">
            <referenceField fieldName="custompercent1" dataType="Percent"/>
            <referenceField fieldName="customnumber1" dataType="Double"/>
        </referenceField>
        <testData input="0,0" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="0,1"
                  expectedOutput="2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818,
					2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818"/>
        <testData input="1,2"
                  expectedOutput="7.463317347319193,
					7.46331734731919428235,
					7.463317347319195,
					7.4633173,
					7.463317347319193,
					7.46331734731919428235,
					7.463317347319195,
					7.4633173"/>
        <testData input="2,4"
                  expectedOutput="55.70110582679559,
					55.70110582679561485815,
					55.70110582679561,
					55.7011058,
					55.70110582679559,
					55.70110582679561485815,
					55.70110582679561,
					55.7011058"/>
        <testData input="-1,-12"
                  expectedOutput="0.00000608307641893218,
					0.000006083076418932179,
					0.0000060830764189321784,
					0.0000061,
					0.00000608307641893218,
					0.000006083076418932179,
					0.0000060830764189321784,
					0.0000061"/>
        <testData input="-10,2"
                  expectedOutput="6.6858944422792685,
					6.68589444227926941607,
					6.685894442279269,
					6.6858944,
					6.6858944422792685,
					6.68589444227926941607,
					6.685894442279269,
					6.6858944"/>
        <testData input="-100,-1"
                  expectedOutput="0.1353352832366127,
					0.13533528323661269189,
					0.1353352832366127,
					0.1353353,
					0.1353352832366127,
					0.13533528323661269189,
					0.1353352832366127,
					0.1353353"/>
        <testData input="56,5"
                  expectedOutput="259.8228363229507,
					259.82283632295083582769,
					259.8228363229508,
					259.8228363,
					259.8228363229507,
					259.82283632295083582769,
					259.8228363229508,
					259.8228363"/>
        <testData input="56,0"
                  expectedOutput="1.7506725002961012,
					1.75067250029610108255,
					1.750672500296101,
					1.7506725,
					1.7506725002961012,
					1.75067250029610108255,
					1.750672500296101,
					1.7506725"/>
        <testData input="56,12"
                  expectedOutput="284930.3376286781,
					284930.33762867801148011517,
					284930.337628678,
					284930.3376287,
					284930.3376286781,
					284930.33762867801148011517,
					284930.337628678,
					284930.3376287"/>
        <testData input="," expectedOutput="1.0,
					1,
					1,
					1,
					null,
					null,
					null,
					null"/>
        <testData input=",2"
                  expectedOutput="7.38905609893065,
					7.38905609893065022723,
					7.38905609893065,
					7.3890561,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testNVLWithNum"
              fieldName="testNVLWithNum"
              dataType="Currency"
              formula="NULLVALUE(customnumber1__c,customcurrency1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <testData input="10,10"
                  expectedOutput="10,
					10.00000000000000000000000000000000,
					10,
					10,
					10,
					10.00000000000000000000000000000000,
					10,
					10"/>
        <testData input=",10"
                  expectedOutput="0,
					0E-32,
					0,
					0,
					10,
					10.00000000000000000000000000000000,
					10,
					10"/>
        <testData input="10,"
                  expectedOutput="10,
					10.00000000000000000000000000000000,
					10,
					10,
					10,
					10.00000000000000000000000000000000,
					10,
					10"/>
        <testData input=","
                  expectedOutput="0,
					0E-32,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.0000009,10"
                  expectedOutput="0.0000009,
					9.0000000000000000000000000E-7,
					9E-7,
					9E-7,
					0.0000009,
					9.0000000000000000000000000E-7,
					9E-7,
					9E-7"/>
        <testData input="-1,10"
                  expectedOutput="-1,
					-1.00000000000000000000000000000000,
					-1,
					-1,
					-1,
					-1.00000000000000000000000000000000,
					-1,
					-1"/>
        <testData input=",0.0009"
                  expectedOutput="0,
					0E-32,
					0,
					0,
					0.0009,
					0.00090000000000000000000000000000,
					0.0009,
					0.0009"/>
        <testData input="0,10" expectedOutput="0,
					0E-32,
					0,
					0,
					0,
					0E-32,
					0,
					0"/>
        <testData input="0.0,4"
                  expectedOutput="0.0,
					0E-32,
					0,
					0,
					0.0,
					0E-32,
					0,
					0"/>
        <testData input=",0" expectedOutput="0,
					0E-32,
					0,
					0,
					0,
					0E-32,
					0,
					0"/>
        <testData input=",0.0" expectedOutput="0,
					0E-32,
					0,
					0,
					0.0,
					0E-32,
					0,
					0"/>
        <testData input=",0.0000000"
                  expectedOutput="0,
					0E-32,
					0,
					0,
					0.0000000,
					0E-32,
					0,
					0"/>
        <testData input="1,10.1234"
                  expectedOutput="1,
					1.00000000000000000000000000000000,
					1,
					1,
					1,
					1.00000000000000000000000000000000,
					1,
					1"/>
        <testData input="10.1234,1"
                  expectedOutput="10.1234,
					10.12340000000000000000000000000000,
					10.1234,
					10.1234,
					10.1234,
					10.12340000000000000000000000000000,
					10.1234,
					10.1234"/>
    </testcase>
    <testcase testName="testNVLWithCur"
              fieldName="testNVLWithCur"
              dataType="Percent"
              formula="NULLVALUE(customcurrency1__c,custompercent1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <testData input="10,10"
                  expectedOutput="1000,
					1000.000000000000000000000000000000,
					1000,
					1000,
					1000,
					1000.000000000000000000000000000000,
					1000,
					1000"/>
        <testData input=",10"
                  expectedOutput="0,
					0E-30,
					0,
					0,
					10,
					10.000000000000000000000000000000,
					10,
					10"/>
        <testData input="10,"
                  expectedOutput="1000,
					1000.000000000000000000000000000000,
					1000,
					1000,
					1000,
					1000.000000000000000000000000000000,
					1000,
					1000"/>
        <testData input=","
                  expectedOutput="0,
					0E-30,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.0000009,10"
                  expectedOutput="0.00009,
					0.000090000000000000000000000000,
					0.00009,
					0.00009,
					0.00009,
					0.000090000000000000000000000000,
					0.00009,
					0.00009"/>
        <testData input="-1,10"
                  expectedOutput="-100,
					-100.000000000000000000000000000000,
					-100,
					-100,
					-100,
					-100.000000000000000000000000000000,
					-100,
					-100"/>
        <testData input=",0.0009"
                  expectedOutput="0,
					0E-30,
					0,
					0,
					0.0009,
					0.000900000000000000000000000000,
					0.0009,
					0.0009"/>
        <testData input="0,10" expectedOutput="0,
					0E-30,
					0,
					0,
					0,
					0E-30,
					0,
					0"/>
        <testData input="0.0,4" expectedOutput="0,
					0E-30,
					0,
					0,
					0,
					0E-30,
					0,
					0"/>
        <testData input=",0" expectedOutput="0,
					0E-30,
					0,
					0,
					0,
					0E-30,
					0,
					0"/>
        <testData input=",0.0" expectedOutput="0,
					0E-30,
					0,
					0,
					0,
					0E-30,
					0,
					0"/>
        <testData input=",0.0000000"
                  expectedOutput="0,
					0E-30,
					0,
					0,
					0,
					0E-30,
					0,
					0"/>
        <testData input="1,10.1234"
                  expectedOutput="100,
					100.000000000000000000000000000000,
					100,
					100,
					100,
					100.000000000000000000000000000000,
					100,
					100"/>
        <testData input="10.1234,1"
                  expectedOutput="1012.34,
					1012.340000000000000000000000000000,
					1012.34,
					1012.34,
					1012.34,
					1012.340000000000000000000000000000,
					1012.34,
					1012.34"/>
    </testcase>
    <testcase testName="testNVLWithPer"
              fieldName="testNVLWithPer"
              dataType="Double"
              formula="NULLVALUE(custompercent1__c,customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="10,10"
                  expectedOutput="0.1,
					0.1,
					0.1,
					0.1,
					0.1,
					0.1,
					0.1,
					0.1"/>
        <testData input=",10" expectedOutput="0,
					0,
					0,
					0,
					10,
					10,
					10,
					10"/>
        <testData input="10,"
                  expectedOutput="0.1,
					0.1,
					0.1,
					0.1,
					0.1,
					0.1,
					0.1,
					0.1"/>
        <testData input="," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.0000009,10"
                  expectedOutput="0.000000009,
					0.000000009,
					9E-9,
					0,
					0.000000009,
					0.000000009,
					9E-9,
					0"/>
        <testData input="-1,10"
                  expectedOutput="-0.01,
					-0.01,
					-0.01,
					-0.01,
					-0.01,
					-0.01,
					-0.01,
					-0.01"/>
        <testData input=",0.0009"
                  expectedOutput="0,
					0,
					0,
					0,
					0.0009,
					0.0009,
					0.0009,
					0.0009"/>
        <testData input="0,10" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.0,4" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=",0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=",0.0" expectedOutput="0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input=",0.0000000"
                  expectedOutput="0,
					0,
					0,
					0,
					0.0000000,
					0,
					0,
					0"/>
        <testData input="1,10.1234"
                  expectedOutput="0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01"/>
        <testData input="10.1234,1"
                  expectedOutput="0.101234,
					0.101234,
					0.101234,
					0.101234,
					0.101234,
					0.101234,
					0.101234,
					0.101234"/>
    </testcase>
    <testcase testName="testNVLWithText"
              fieldName="testNVLWithText"
              dataType="Text"
              formula="NULLVALUE(customtext1__c,customtextarea1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customtextarea1" dataType="textarea"/>
        <testData input="Has it, Not Null"
                  expectedOutput="Has it,
					Has it,
					Has it,
					Has it,
					Has it,
					Has it,
					Has it,
					Has it"/>
        <testData input=", Is Null"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="Has It,"
                  expectedOutput="Has It,
					Has It,
					Has It,
					Has It,
					Has It,
					Has It,
					Has It,
					Has It"/>
        <testData input="I,Not Null" expectedOutput="I,
					I,
					I,
					I,
					I,
					I,
					I,
					I"/>
    </testcase>
    <testcase testName="testNVLWithTextArea"
              fieldName="testNVLWithTextArea"
              dataType="Text"
              formula="NULLVALUE(customtextarea1__c,customtext1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtextarea1" dataType="textarea"/>
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="Has it, Not Null"
                  expectedOutput="Has it,
					Has it,
					Has it,
					Has it,
					Has it,
					Has it,
					Has it,
					Has it"/>
        <testData input=", Is Null"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="Has It,"
                  expectedOutput="Has It,
					Has It,
					Has It,
					Has It,
					Has It,
					Has It,
					Has It,
					Has It"/>
        <testData input="I,Not Null" expectedOutput="I,
					I,
					I,
					I,
					I,
					I,
					I,
					I"/>
    </testcase>
    <testcase testName="testNVLWithPhone"
              fieldName="testNVLWithPhone"
              dataType="Text"
              formula="NULLVALUE(customphone1__c,customtextarea1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customphone1" dataType="phone"/>
        <referenceField fieldName="customtextarea1" dataType="textarea"/>
        <testData input="510-595-4547,Not Null"
                  expectedOutput="510-595-4547,
					510-595-4547,
					510-595-4547,
					510-595-4547,
					510-595-4547,
					510-595-4547,
					510-595-4547,
					510-595-4547"/>
        <testData input="1234567892,Not Null"
                  expectedOutput="1234567892,
					1234567892,
					1234567892,
					1234567892,
					1234567892,
					1234567892,
					1234567892,
					1234567892"/>
        <testData input="011-91-40-23750513,Not Null"
                  expectedOutput="011-91-40-23750513,
					011-91-40-23750513,
					011-91-40-23750513,
					011-91-40-23750513,
					011-91-40-23750513,
					011-91-40-23750513,
					011-91-40-23750513,
					011-91-40-23750513"/>
        <testData input=",Is Null"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="email@email.com,Not Null"
                  expectedOutput="email@email.com,
					email@email.com,
					email@email.com,
					email@email.com,
					email@email.com,
					email@email.com,
					email@email.com,
					email@email.com"/>
        <testData input="23457699 x233, Not Null"
                  expectedOutput="23457699 x233,
					23457699 x233,
					23457699 x233,
					23457699 x233,
					23457699 x233,
					23457699 x233,
					23457699 x233,
					23457699 x233"/>
    </testcase>
    <testcase testName="testNVLWithEmail"
              fieldName="testNVLWithEmail"
              dataType="Text"
              formula="NULLVALUE(customemail1__c,customtextarea1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customemail1" dataType="email"/>
        <referenceField fieldName="customtextarea1" dataType="textarea"/>
        <testData input="syendluri@yahoo.com,Not Null"
                  expectedOutput="syendluri@yahoo.com,
					syendluri@yahoo.com,
					syendluri@yahoo.com,
					syendluri@yahoo.com,
					syendluri@yahoo.com,
					syendluri@yahoo.com,
					syendluri@yahoo.com,
					syendluri@yahoo.com"/>
        <testData input="aa@ss.com, Not Null"
                  expectedOutput="aa@ss.com,
					aa@ss.com,
					aa@ss.com,
					aa@ss.com,
					aa@ss.com,
					aa@ss.com,
					aa@ss.com,
					aa@ss.com"/>
        <testData input=",Is Null"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=","
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testNVLWithUrl"
              fieldName="testNVLWithUrl"
              dataType="Text"
              formula="NULLVALUE(customurl1__c,customtextarea1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customurl1" dataType="url"/>
        <referenceField fieldName="customtextarea1" dataType="textarea"/>
        <testData input="http://salesforce.com,Not Null"
                  expectedOutput="http://salesforce.com,
					http://salesforce.com,
					http://salesforce.com,
					http://salesforce.com,
					http://salesforce.com,
					http://salesforce.com,
					http://salesforce.com,
					http://salesforce.com"/>
        <testData input="https://blitzna1.eng.salesforce.com/setup/ui/layoutfieldlist.jsp?type=Account&amp;setupid=AccountFields,Not Null"
                  expectedOutput="https://blitzna1.eng.salesforce.com/setup/ui/layoutfieldlist.jsp?type=Account&amp;setupid=AccountFields,
					https://blitzna1.eng.salesforce.com/setup/ui/layoutfieldlist.jsp?type=Account&amp;setupid=AccountFields,
					https://blitzna1.eng.salesforce.com/setup/ui/layoutfieldlist.jsp?type=Account&amp;setupid=AccountFields,
					https://blitzna1.eng.salesforce.com/setup/ui/layoutfieldlist.jsp?type=Account&amp;setupid=AccountFields,
					https://blitzna1.eng.salesforce.com/setup/ui/layoutfieldlist.jsp?type=Account&amp;setupid=AccountFields,
					https://blitzna1.eng.salesforce.com/setup/ui/layoutfieldlist.jsp?type=Account&amp;setupid=AccountFields,
					https://blitzna1.eng.salesforce.com/setup/ui/layoutfieldlist.jsp?type=Account&amp;setupid=AccountFields,
					https://blitzna1.eng.salesforce.com/setup/ui/layoutfieldlist.jsp?type=Account&amp;setupid=AccountFields"/>
        <testData input=",Is Null"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="email@email.com,Not Null"
                  expectedOutput="email@email.com,
					email@email.com,
					email@email.com,
					email@email.com,
					email@email.com,
					email@email.com,
					email@email.com,
					email@email.com"/>
        <testData input="mailto:syendluri@salesforce.com,Not Null"
                  expectedOutput="mailto:syendluri@salesforce.com,
					mailto:syendluri@salesforce.com,
					mailto:syendluri@salesforce.com,
					mailto:syendluri@salesforce.com,
					mailto:syendluri@salesforce.com,
					mailto:syendluri@salesforce.com,
					mailto:syendluri@salesforce.com,
					mailto:syendluri@salesforce.com"/>
        <testData input="ui/layoutfieldlist.jsp,Not Null"
                  expectedOutput="ui/layoutfieldlist.jsp,
					ui/layoutfieldlist.jsp,
					ui/layoutfieldlist.jsp,
					ui/layoutfieldlist.jsp,
					ui/layoutfieldlist.jsp,
					ui/layoutfieldlist.jsp,
					ui/layoutfieldlist.jsp,
					ui/layoutfieldlist.jsp"/>
        <testData input=","
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testNVLWithDate"
              fieldName="testNVLWithDate"
              dataType="DateOnly"
              formula="NULLVALUE(customdate1__c,customdate2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <testData input="2004:12:31:11:32:00,2004:12:31:11:30:00"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,2008:02:28:10:34:00"
                  expectedOutput="Sat Feb 28 00:00:00 GMT 2004,
					2004-02-28 00:00:00.0,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004,
					2004-02-28 00:00:00.0,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004"/>
        <testData input="2004:12:31:11:30:00,2004:12:31:11:32:00"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,2004:03:01:00:00:00"
                  expectedOutput="Sat Feb 28 00:00:00 GMT 2004,
					2004-02-28 00:00:00.0,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004,
					2004-02-28 00:00:00.0,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004"/>
        <testData input=",2004:12:31:11:32:00"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,"
                  expectedOutput="Sat Feb 28 00:00:00 GMT 2004,
					2004-02-28 00:00:00.0,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004,
					2004-02-28 00:00:00.0,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004"/>
        <testData input=","
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="3999:02:28:10:34:00,1780:02:28:10:34:00"
                  expectedOutput="Sun Feb 28 00:00:00 GMT 3999,
					3999-02-28 00:00:00.0,
					Sun Feb 28 00:00:00 GMT 3999,
					Sun Feb 28 00:00:00 GMT 3999,
					Sun Feb 28 00:00:00 GMT 3999,
					3999-02-28 00:00:00.0,
					Sun Feb 28 00:00:00 GMT 3999,
					Sun Feb 28 00:00:00 GMT 3999"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:00:00"
                  expectedOutput="Sun Aug 21 00:00:00 GMT 2022,
					2022-08-21 00:00:00.0,
					Sun Aug 21 00:00:00 GMT 2022,
					Sun Aug 21 00:00:00 GMT 2022,
					Sun Aug 21 00:00:00 GMT 2022,
					2022-08-21 00:00:00.0,
					Sun Aug 21 00:00:00 GMT 2022,
					Sun Aug 21 00:00:00 GMT 2022"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:15:00"
                  expectedOutput="Sun Aug 21 00:00:00 GMT 2022,
					2022-08-21 00:00:00.0,
					Sun Aug 21 00:00:00 GMT 2022,
					Sun Aug 21 00:00:00 GMT 2022,
					Sun Aug 21 00:00:00 GMT 2022,
					2022-08-21 00:00:00.0,
					Sun Aug 21 00:00:00 GMT 2022,
					Sun Aug 21 00:00:00 GMT 2022"/>
        <testData input="2022:08:21:08:29:00,2022:08:21:08:00:00"
                  expectedOutput="Sun Aug 21 00:00:00 GMT 2022,
					2022-08-21 00:00:00.0,
					Sun Aug 21 00:00:00 GMT 2022,
					Sun Aug 21 00:00:00 GMT 2022,
					Sun Aug 21 00:00:00 GMT 2022,
					2022-08-21 00:00:00.0,
					Sun Aug 21 00:00:00 GMT 2022,
					Sun Aug 21 00:00:00 GMT 2022"/>
    </testcase>
    <testcase testName="testNVLWithDateTime"
              fieldName="testNVLWithDateTime"
              dataType="DateTime"
              formula="NULLVALUE(customdatetime1__c,customdatetime2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customdatetime2" dataType="DateTime"/>
        <testData input="2004:12:31:11:32:00,2004:12:31:11:30:00"
                  expectedOutput="Fri Dec 31 11:32:00 GMT 2004,
					2004-12-31 11:32:00.0,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004,
					2004-12-31 11:32:00.0,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,2008:02:28:10:34:00"
                  expectedOutput="Sat Feb 28 10:34:00 GMT 2004,
					2004-02-28 10:34:00.0,
					Sat Feb 28 10:34:00 GMT 2004,
					Sat Feb 28 10:34:00 GMT 2004,
					Sat Feb 28 10:34:00 GMT 2004,
					2004-02-28 10:34:00.0,
					Sat Feb 28 10:34:00 GMT 2004,
					Sat Feb 28 10:34:00 GMT 2004"/>
        <testData input="2004:12:31:11:30:00,2004:12:31:11:32:00"
                  expectedOutput="Fri Dec 31 11:30:00 GMT 2004,
					2004-12-31 11:30:00.0,
					Fri Dec 31 11:30:00 GMT 2004,
					Fri Dec 31 11:30:00 GMT 2004,
					Fri Dec 31 11:30:00 GMT 2004,
					2004-12-31 11:30:00.0,
					Fri Dec 31 11:30:00 GMT 2004,
					Fri Dec 31 11:30:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,2004:03:01:00:00:00"
                  expectedOutput="Sat Feb 28 10:34:00 GMT 2004,
					2004-02-28 10:34:00.0,
					Sat Feb 28 10:34:00 GMT 2004,
					Sat Feb 28 10:34:00 GMT 2004,
					Sat Feb 28 10:34:00 GMT 2004,
					2004-02-28 10:34:00.0,
					Sat Feb 28 10:34:00 GMT 2004,
					Sat Feb 28 10:34:00 GMT 2004"/>
        <testData input=",2004:12:31:11:32:00"
                  expectedOutput="Fri Dec 31 11:32:00 GMT 2004,
					2004-12-31 11:32:00.0,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004,
					2004-12-31 11:32:00.0,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,"
                  expectedOutput="Sat Feb 28 10:34:00 GMT 2004,
					2004-02-28 10:34:00.0,
					Sat Feb 28 10:34:00 GMT 2004,
					Sat Feb 28 10:34:00 GMT 2004,
					Sat Feb 28 10:34:00 GMT 2004,
					2004-02-28 10:34:00.0,
					Sat Feb 28 10:34:00 GMT 2004,
					Sat Feb 28 10:34:00 GMT 2004"/>
        <testData input=","
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="3999:02:28:10:34:00,1780:02:28:10:34:00"
                  expectedOutput="Sun Feb 28 10:34:00 GMT 3999,
					3999-02-28 10:34:00.0,
					Sun Feb 28 10:34:00 GMT 3999,
					Sun Feb 28 10:34:00 GMT 3999,
					Sun Feb 28 10:34:00 GMT 3999,
					3999-02-28 10:34:00.0,
					Sun Feb 28 10:34:00 GMT 3999,
					Sun Feb 28 10:34:00 GMT 3999"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:00:00"
                  expectedOutput="Sun Aug 21 08:30:00 GMT 2022,
					2022-08-21 08:30:00.0,
					Sun Aug 21 08:30:00 GMT 2022,
					Sun Aug 21 08:30:00 GMT 2022,
					Sun Aug 21 08:30:00 GMT 2022,
					2022-08-21 08:30:00.0,
					Sun Aug 21 08:30:00 GMT 2022,
					Sun Aug 21 08:30:00 GMT 2022"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:15:00"
                  expectedOutput="Sun Aug 21 08:30:00 GMT 2022,
					2022-08-21 08:30:00.0,
					Sun Aug 21 08:30:00 GMT 2022,
					Sun Aug 21 08:30:00 GMT 2022,
					Sun Aug 21 08:30:00 GMT 2022,
					2022-08-21 08:30:00.0,
					Sun Aug 21 08:30:00 GMT 2022,
					Sun Aug 21 08:30:00 GMT 2022"/>
        <testData input="2022:08:21:08:29:00,2022:08:21:08:00:00"
                  expectedOutput="Sun Aug 21 08:29:00 GMT 2022,
					2022-08-21 08:29:00.0,
					Sun Aug 21 08:29:00 GMT 2022,
					Sun Aug 21 08:29:00 GMT 2022,
					Sun Aug 21 08:29:00 GMT 2022,
					2022-08-21 08:29:00.0,
					Sun Aug 21 08:29:00 GMT 2022,
					Sun Aug 21 08:29:00 GMT 2022"/>
    </testcase>
    <testcase testName="testNVLWithError"
              fieldName="testNVLWithError"
              dataType="Double"
              formula="NULLVALUE(customnumber1__c/customnumber2__c,customcurrency1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <testData input="1,1,1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="0,0,0"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.ArithmeticException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="10,10,10" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input=",10,10" expectedOutput="0,
					0,
					0,
					0,
					10,
					10,
					10,
					10"/>
        <testData input="10,,10"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					10,
					10,
					10,
					10"/>
        <testData input="10,10," expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input=",,10"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					10,
					10,
					10,
					10"/>
        <testData input="10,,"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",10," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",,"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="1.1,1.1,1.1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="1,49,1.49"
                  expectedOutput="0.02040816326530612244897959183673,
					0.02040816326530612245,
					0.02040816326530612,
					0.0204082,
					0.02040816326530612244897959183673,
					0.02040816326530612245,
					0.02040816326530612,
					0.0204082"/>
        <testData input="1.5,1.5,1.5" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="1,99,1.99"
                  expectedOutput="0.01010101010101010101010101010101,
					0.01010101010101010101,
					0.010101010101010102,
					0.010101,
					0.01010101010101010101010101010101,
					0.01010101010101010101,
					0.010101010101010102,
					0.010101"/>
        <testData input="0.01,0.01,0.01" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
    </testcase>
    <testcase testName="testBVLWithNum"
              fieldName="testBVLWithNum"
              dataType="Currency"
              formula="BLANKVALUE(customnumber1__c,customcurrency1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <testData input="10,10"
                  expectedOutput="10,
					10.00000000000000000000000000000000,
					10,
					10,
					10,
					10.00000000000000000000000000000000,
					10,
					10"/>
        <testData input=",10"
                  expectedOutput="0,
					0E-32,
					0,
					0,
					10,
					10.00000000000000000000000000000000,
					10,
					10"/>
        <testData input="10,"
                  expectedOutput="10,
					10.00000000000000000000000000000000,
					10,
					10,
					10,
					10.00000000000000000000000000000000,
					10,
					10"/>
        <testData input=","
                  expectedOutput="0,
					0E-32,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.0000009,10"
                  expectedOutput="0.0000009,
					9.0000000000000000000000000E-7,
					9E-7,
					9E-7,
					0.0000009,
					9.0000000000000000000000000E-7,
					9E-7,
					9E-7"/>
        <testData input="-1,10"
                  expectedOutput="-1,
					-1.00000000000000000000000000000000,
					-1,
					-1,
					-1,
					-1.00000000000000000000000000000000,
					-1,
					-1"/>
        <testData input=",0.0009"
                  expectedOutput="0,
					0E-32,
					0,
					0,
					0.0009,
					0.00090000000000000000000000000000,
					0.0009,
					0.0009"/>
        <testData input="0,10" expectedOutput="0,
					0E-32,
					0,
					0,
					0,
					0E-32,
					0,
					0"/>
        <testData input="0.0,4"
                  expectedOutput="0.0,
					0E-32,
					0,
					0,
					0.0,
					0E-32,
					0,
					0"/>
        <testData input=",0" expectedOutput="0,
					0E-32,
					0,
					0,
					0,
					0E-32,
					0,
					0"/>
        <testData input=",0.0" expectedOutput="0,
					0E-32,
					0,
					0,
					0.0,
					0E-32,
					0,
					0"/>
        <testData input=",0.0000000"
                  expectedOutput="0,
					0E-32,
					0,
					0,
					0.0000000,
					0E-32,
					0,
					0"/>
        <testData input="1,10.1234"
                  expectedOutput="1,
					1.00000000000000000000000000000000,
					1,
					1,
					1,
					1.00000000000000000000000000000000,
					1,
					1"/>
        <testData input="10.1234,1"
                  expectedOutput="10.1234,
					10.12340000000000000000000000000000,
					10.1234,
					10.1234,
					10.1234,
					10.12340000000000000000000000000000,
					10.1234,
					10.1234"/>
    </testcase>
    <testcase testName="testBVLWithCur"
              fieldName="testBVLWithCur"
              dataType="Percent"
              formula="BLANKVALUE(customcurrency1__c,custompercent1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <testData input="10,10"
                  expectedOutput="1000,
					1000.000000000000000000000000000000,
					1000,
					1000,
					1000,
					1000.000000000000000000000000000000,
					1000,
					1000"/>
        <testData input=",10"
                  expectedOutput="0,
					0E-30,
					0,
					0,
					10,
					10.000000000000000000000000000000,
					10,
					10"/>
        <testData input="10,"
                  expectedOutput="1000,
					1000.000000000000000000000000000000,
					1000,
					1000,
					1000,
					1000.000000000000000000000000000000,
					1000,
					1000"/>
        <testData input=","
                  expectedOutput="0,
					0E-30,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.0000009,10"
                  expectedOutput="0.00009,
					0.000090000000000000000000000000,
					0.00009,
					0.00009,
					0.00009,
					0.000090000000000000000000000000,
					0.00009,
					0.00009"/>
        <testData input="-1,10"
                  expectedOutput="-100,
					-100.000000000000000000000000000000,
					-100,
					-100,
					-100,
					-100.000000000000000000000000000000,
					-100,
					-100"/>
        <testData input=",0.0009"
                  expectedOutput="0,
					0E-30,
					0,
					0,
					0.0009,
					0.000900000000000000000000000000,
					0.0009,
					0.0009"/>
        <testData input="0,10" expectedOutput="0,
					0E-30,
					0,
					0,
					0,
					0E-30,
					0,
					0"/>
        <testData input="0.0,4" expectedOutput="0,
					0E-30,
					0,
					0,
					0,
					0E-30,
					0,
					0"/>
        <testData input=",0" expectedOutput="0,
					0E-30,
					0,
					0,
					0,
					0E-30,
					0,
					0"/>
        <testData input=",0.0" expectedOutput="0,
					0E-30,
					0,
					0,
					0,
					0E-30,
					0,
					0"/>
        <testData input=",0.0000000"
                  expectedOutput="0,
					0E-30,
					0,
					0,
					0,
					0E-30,
					0,
					0"/>
        <testData input="1,10.1234"
                  expectedOutput="100,
					100.000000000000000000000000000000,
					100,
					100,
					100,
					100.000000000000000000000000000000,
					100,
					100"/>
        <testData input="10.1234,1"
                  expectedOutput="1012.34,
					1012.340000000000000000000000000000,
					1012.34,
					1012.34,
					1012.34,
					1012.340000000000000000000000000000,
					1012.34,
					1012.34"/>
    </testcase>
    <testcase testName="testBVLWithPer"
              fieldName="testBVLWithPer"
              dataType="Double"
              formula="BLANKVALUE(custompercent1__c,customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="10,10"
                  expectedOutput="0.1,
					0.1,
					0.1,
					0.1,
					0.1,
					0.1,
					0.1,
					0.1"/>
        <testData input=",10" expectedOutput="0,
					0,
					0,
					0,
					10,
					10,
					10,
					10"/>
        <testData input="10,"
                  expectedOutput="0.1,
					0.1,
					0.1,
					0.1,
					0.1,
					0.1,
					0.1,
					0.1"/>
        <testData input="," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.0000009,10"
                  expectedOutput="0.000000009,
					0.000000009,
					9E-9,
					0,
					0.000000009,
					0.000000009,
					9E-9,
					0"/>
        <testData input="-1,10"
                  expectedOutput="-0.01,
					-0.01,
					-0.01,
					-0.01,
					-0.01,
					-0.01,
					-0.01,
					-0.01"/>
        <testData input=",0.0009"
                  expectedOutput="0,
					0,
					0,
					0,
					0.0009,
					0.0009,
					0.0009,
					0.0009"/>
        <testData input="0,10" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.0,4" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=",0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=",0.0" expectedOutput="0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input=",0.0000000"
                  expectedOutput="0,
					0,
					0,
					0,
					0.0000000,
					0,
					0,
					0"/>
        <testData input="1,10.1234"
                  expectedOutput="0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01"/>
        <testData input="10.1234,1"
                  expectedOutput="0.101234,
					0.101234,
					0.101234,
					0.101234,
					0.101234,
					0.101234,
					0.101234,
					0.101234"/>
    </testcase>
    <testcase testName="testBVLWithText"
              fieldName="testBVLWithText"
              dataType="Text"
              formula="BLANKVALUE(customtext1__c,customtextarea1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customtextarea1" dataType="textarea"/>
        <testData input="Has it, Not Null"
                  expectedOutput="Has it,
					Has it,
					Has it,
					Has it,
					Has it,
					Has it,
					Has it,
					Has it"/>
        <testData input=", Is Null"
                  expectedOutput=" Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null"/>
        <testData input="Has It,"
                  expectedOutput="Has It,
					Has It,
					Has It,
					Has It,
					Has It,
					Has It,
					Has It,
					Has It"/>
        <testData input="I,Not Null" expectedOutput="I,
					I,
					I,
					I,
					I,
					I,
					I,
					I"/>
    </testcase>
    <testcase testName="testBVLWithTextArea"
              fieldName="testBVLWithTextArea"
              dataType="Text"
              formula="BLANKVALUE(customtextarea1__c,customtext1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtextarea1" dataType="textarea"/>
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="Has it, Not Null"
                  expectedOutput="Has it,
					Has it,
					Has it,
					Has it,
					Has it,
					Has it,
					Has it,
					Has it"/>
        <testData input=", Is Null"
                  expectedOutput=" Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null"/>
        <testData input="Has It,"
                  expectedOutput="Has It,
					Has It,
					Has It,
					Has It,
					Has It,
					Has It,
					Has It,
					Has It"/>
        <testData input="I,Not Null" expectedOutput="I,
					I,
					I,
					I,
					I,
					I,
					I,
					I"/>
    </testcase>
    <testcase testName="testBVLWithPhone"
              fieldName="testBVLWithPhone"
              dataType="Text"
              formula="BLANKVALUE(customphone1__c,customtextarea1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customphone1" dataType="phone"/>
        <referenceField fieldName="customtextarea1" dataType="textarea"/>
        <testData input="510-595-4547,Not Null"
                  expectedOutput="510-595-4547,
					510-595-4547,
					510-595-4547,
					510-595-4547,
					510-595-4547,
					510-595-4547,
					510-595-4547,
					510-595-4547"/>
        <testData input="1234567892,Not Null"
                  expectedOutput="1234567892,
					1234567892,
					1234567892,
					1234567892,
					1234567892,
					1234567892,
					1234567892,
					1234567892"/>
        <testData input="011-91-40-23750513,Not Null"
                  expectedOutput="011-91-40-23750513,
					011-91-40-23750513,
					011-91-40-23750513,
					011-91-40-23750513,
					011-91-40-23750513,
					011-91-40-23750513,
					011-91-40-23750513,
					011-91-40-23750513"/>
        <testData input=",Is Null"
                  expectedOutput="Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null"/>
        <testData input="email@email.com,Not Null"
                  expectedOutput="email@email.com,
					email@email.com,
					email@email.com,
					email@email.com,
					email@email.com,
					email@email.com,
					email@email.com,
					email@email.com"/>
        <testData input="23457699 x233, Not Null"
                  expectedOutput="23457699 x233,
					23457699 x233,
					23457699 x233,
					23457699 x233,
					23457699 x233,
					23457699 x233,
					23457699 x233,
					23457699 x233"/>
    </testcase>
    <testcase testName="testBVLWithEmail"
              fieldName="testBVLWithEmail"
              dataType="Text"
              formula="BLANKVALUE(customemail1__c,customtextarea1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customemail1" dataType="email"/>
        <referenceField fieldName="customtextarea1" dataType="textarea"/>
        <testData input="syendluri@yahoo.com,Not Null"
                  expectedOutput="syendluri@yahoo.com,
					syendluri@yahoo.com,
					syendluri@yahoo.com,
					syendluri@yahoo.com,
					syendluri@yahoo.com,
					syendluri@yahoo.com,
					syendluri@yahoo.com,
					syendluri@yahoo.com"/>
        <testData input="aa@ss.com, Not Null"
                  expectedOutput="aa@ss.com,
					aa@ss.com,
					aa@ss.com,
					aa@ss.com,
					aa@ss.com,
					aa@ss.com,
					aa@ss.com,
					aa@ss.com"/>
        <testData input=",Is Null"
                  expectedOutput="Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null"/>
        <testData input=","
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testBVLWithUrl"
              fieldName="testBVLWithUrl"
              dataType="Text"
              formula="BLANKVALUE(customurl1__c,customtextarea1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customurl1" dataType="url"/>
        <referenceField fieldName="customtextarea1" dataType="textarea"/>
        <testData input="http://salesforce.com,Not Null"
                  expectedOutput="http://salesforce.com,
					http://salesforce.com,
					http://salesforce.com,
					http://salesforce.com,
					http://salesforce.com,
					http://salesforce.com,
					http://salesforce.com,
					http://salesforce.com"/>
        <testData input="https://blitzna1.eng.salesforce.com/setup/ui/layoutfieldlist.jsp?type=Account&amp;setupid=AccountFields,Not Null"
                  expectedOutput="https://blitzna1.eng.salesforce.com/setup/ui/layoutfieldlist.jsp?type=Account&amp;setupid=AccountFields,
					https://blitzna1.eng.salesforce.com/setup/ui/layoutfieldlist.jsp?type=Account&amp;setupid=AccountFields,
					https://blitzna1.eng.salesforce.com/setup/ui/layoutfieldlist.jsp?type=Account&amp;setupid=AccountFields,
					https://blitzna1.eng.salesforce.com/setup/ui/layoutfieldlist.jsp?type=Account&amp;setupid=AccountFields,
					https://blitzna1.eng.salesforce.com/setup/ui/layoutfieldlist.jsp?type=Account&amp;setupid=AccountFields,
					https://blitzna1.eng.salesforce.com/setup/ui/layoutfieldlist.jsp?type=Account&amp;setupid=AccountFields,
					https://blitzna1.eng.salesforce.com/setup/ui/layoutfieldlist.jsp?type=Account&amp;setupid=AccountFields,
					https://blitzna1.eng.salesforce.com/setup/ui/layoutfieldlist.jsp?type=Account&amp;setupid=AccountFields"/>
        <testData input=",Is Null"
                  expectedOutput="Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null"/>
        <testData input="email@email.com,Not Null"
                  expectedOutput="email@email.com,
					email@email.com,
					email@email.com,
					email@email.com,
					email@email.com,
					email@email.com,
					email@email.com,
					email@email.com"/>
        <testData input="mailto:syendluri@salesforce.com,Not Null"
                  expectedOutput="mailto:syendluri@salesforce.com,
					mailto:syendluri@salesforce.com,
					mailto:syendluri@salesforce.com,
					mailto:syendluri@salesforce.com,
					mailto:syendluri@salesforce.com,
					mailto:syendluri@salesforce.com,
					mailto:syendluri@salesforce.com,
					mailto:syendluri@salesforce.com"/>
        <testData input="ui/layoutfieldlist.jsp,Not Null"
                  expectedOutput="ui/layoutfieldlist.jsp,
					ui/layoutfieldlist.jsp,
					ui/layoutfieldlist.jsp,
					ui/layoutfieldlist.jsp,
					ui/layoutfieldlist.jsp,
					ui/layoutfieldlist.jsp,
					ui/layoutfieldlist.jsp,
					ui/layoutfieldlist.jsp"/>
        <testData input=","
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testBVLWithDate"
              fieldName="testBVLWithDate"
              dataType="DateOnly"
              formula="BLANKVALUE(customdate1__c,customdate2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <testData input="2004:12:31:11:32:00,2004:12:31:11:30:00"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,2008:02:28:10:34:00"
                  expectedOutput="Sat Feb 28 00:00:00 GMT 2004,
					2004-02-28 00:00:00.0,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004,
					2004-02-28 00:00:00.0,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004"/>
        <testData input="2004:12:31:11:30:00,2004:12:31:11:32:00"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,2004:03:01:00:00:00"
                  expectedOutput="Sat Feb 28 00:00:00 GMT 2004,
					2004-02-28 00:00:00.0,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004,
					2004-02-28 00:00:00.0,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004"/>
        <testData input=",2004:12:31:11:32:00"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,"
                  expectedOutput="Sat Feb 28 00:00:00 GMT 2004,
					2004-02-28 00:00:00.0,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004,
					2004-02-28 00:00:00.0,
					Sat Feb 28 00:00:00 GMT 2004,
					Sat Feb 28 00:00:00 GMT 2004"/>
        <testData input=","
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="3999:02:28:10:34:00,1780:02:28:10:34:00"
                  expectedOutput="Sun Feb 28 00:00:00 GMT 3999,
					3999-02-28 00:00:00.0,
					Sun Feb 28 00:00:00 GMT 3999,
					Sun Feb 28 00:00:00 GMT 3999,
					Sun Feb 28 00:00:00 GMT 3999,
					3999-02-28 00:00:00.0,
					Sun Feb 28 00:00:00 GMT 3999,
					Sun Feb 28 00:00:00 GMT 3999"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:00:00"
                  expectedOutput="Sun Aug 21 00:00:00 GMT 2022,
					2022-08-21 00:00:00.0,
					Sun Aug 21 00:00:00 GMT 2022,
					Sun Aug 21 00:00:00 GMT 2022,
					Sun Aug 21 00:00:00 GMT 2022,
					2022-08-21 00:00:00.0,
					Sun Aug 21 00:00:00 GMT 2022,
					Sun Aug 21 00:00:00 GMT 2022"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:15:00"
                  expectedOutput="Sun Aug 21 00:00:00 GMT 2022,
					2022-08-21 00:00:00.0,
					Sun Aug 21 00:00:00 GMT 2022,
					Sun Aug 21 00:00:00 GMT 2022,
					Sun Aug 21 00:00:00 GMT 2022,
					2022-08-21 00:00:00.0,
					Sun Aug 21 00:00:00 GMT 2022,
					Sun Aug 21 00:00:00 GMT 2022"/>
        <testData input="2022:08:21:08:29:00,2022:08:21:08:00:00"
                  expectedOutput="Sun Aug 21 00:00:00 GMT 2022,
					2022-08-21 00:00:00.0,
					Sun Aug 21 00:00:00 GMT 2022,
					Sun Aug 21 00:00:00 GMT 2022,
					Sun Aug 21 00:00:00 GMT 2022,
					2022-08-21 00:00:00.0,
					Sun Aug 21 00:00:00 GMT 2022,
					Sun Aug 21 00:00:00 GMT 2022"/>
    </testcase>
    <testcase testName="testBVLWithDateFormulaNull"
              fieldName="testBVLWithDate"
              dataType="DateOnly"
              formula="BLANKVALUE(customformula0__c,date(2000,1,1))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customformula0" dataType="DateOnly" formula="NULL"/>
        <testData input="No data"
                  expectedOutput="Sat Jan 01 00:00:00 GMT 2000,
					2000-01-01 00:00:00.0,
					Sat Jan 01 00:00:00 GMT 2000,
					Sat Jan 01 00:00:00 GMT 2000,
					Sat Jan 01 00:00:00 GMT 2000,
					2000-01-01 00:00:00.0,
					Sat Jan 01 00:00:00 GMT 2000,
					Sat Jan 01 00:00:00 GMT 2000"/>
    </testcase>
    <testcase testName="testBVLWithDateTime"
              fieldName="testBVLWithDateTime"
              dataType="DateTime"
              formula="BLANKVALUE(customdatetime1__c,customdatetime2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customdatetime2" dataType="DateTime"/>
        <testData input="2004:12:31:11:32:00,2004:12:31:11:30:00"
                  expectedOutput="Fri Dec 31 11:32:00 GMT 2004,
					2004-12-31 11:32:00.0,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004,
					2004-12-31 11:32:00.0,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,2008:02:28:10:34:00"
                  expectedOutput="Sat Feb 28 10:34:00 GMT 2004,
					2004-02-28 10:34:00.0,
					Sat Feb 28 10:34:00 GMT 2004,
					Sat Feb 28 10:34:00 GMT 2004,
					Sat Feb 28 10:34:00 GMT 2004,
					2004-02-28 10:34:00.0,
					Sat Feb 28 10:34:00 GMT 2004,
					Sat Feb 28 10:34:00 GMT 2004"/>
        <testData input="2004:12:31:11:30:00,2004:12:31:11:32:00"
                  expectedOutput="Fri Dec 31 11:30:00 GMT 2004,
					2004-12-31 11:30:00.0,
					Fri Dec 31 11:30:00 GMT 2004,
					Fri Dec 31 11:30:00 GMT 2004,
					Fri Dec 31 11:30:00 GMT 2004,
					2004-12-31 11:30:00.0,
					Fri Dec 31 11:30:00 GMT 2004,
					Fri Dec 31 11:30:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,2004:03:01:00:00:00"
                  expectedOutput="Sat Feb 28 10:34:00 GMT 2004,
					2004-02-28 10:34:00.0,
					Sat Feb 28 10:34:00 GMT 2004,
					Sat Feb 28 10:34:00 GMT 2004,
					Sat Feb 28 10:34:00 GMT 2004,
					2004-02-28 10:34:00.0,
					Sat Feb 28 10:34:00 GMT 2004,
					Sat Feb 28 10:34:00 GMT 2004"/>
        <testData input=",2004:12:31:11:32:00"
                  expectedOutput="Fri Dec 31 11:32:00 GMT 2004,
					2004-12-31 11:32:00.0,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004,
					2004-12-31 11:32:00.0,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,"
                  expectedOutput="Sat Feb 28 10:34:00 GMT 2004,
					2004-02-28 10:34:00.0,
					Sat Feb 28 10:34:00 GMT 2004,
					Sat Feb 28 10:34:00 GMT 2004,
					Sat Feb 28 10:34:00 GMT 2004,
					2004-02-28 10:34:00.0,
					Sat Feb 28 10:34:00 GMT 2004,
					Sat Feb 28 10:34:00 GMT 2004"/>
        <testData input=","
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="3999:02:28:10:34:00,1780:02:28:10:34:00"
                  expectedOutput="Sun Feb 28 10:34:00 GMT 3999,
					3999-02-28 10:34:00.0,
					Sun Feb 28 10:34:00 GMT 3999,
					Sun Feb 28 10:34:00 GMT 3999,
					Sun Feb 28 10:34:00 GMT 3999,
					3999-02-28 10:34:00.0,
					Sun Feb 28 10:34:00 GMT 3999,
					Sun Feb 28 10:34:00 GMT 3999"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:00:00"
                  expectedOutput="Sun Aug 21 08:30:00 GMT 2022,
					2022-08-21 08:30:00.0,
					Sun Aug 21 08:30:00 GMT 2022,
					Sun Aug 21 08:30:00 GMT 2022,
					Sun Aug 21 08:30:00 GMT 2022,
					2022-08-21 08:30:00.0,
					Sun Aug 21 08:30:00 GMT 2022,
					Sun Aug 21 08:30:00 GMT 2022"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:15:00"
                  expectedOutput="Sun Aug 21 08:30:00 GMT 2022,
					2022-08-21 08:30:00.0,
					Sun Aug 21 08:30:00 GMT 2022,
					Sun Aug 21 08:30:00 GMT 2022,
					Sun Aug 21 08:30:00 GMT 2022,
					2022-08-21 08:30:00.0,
					Sun Aug 21 08:30:00 GMT 2022,
					Sun Aug 21 08:30:00 GMT 2022"/>
        <testData input="2022:08:21:08:29:00,2022:08:21:08:00:00"
                  expectedOutput="Sun Aug 21 08:29:00 GMT 2022,
					2022-08-21 08:29:00.0,
					Sun Aug 21 08:29:00 GMT 2022,
					Sun Aug 21 08:29:00 GMT 2022,
					Sun Aug 21 08:29:00 GMT 2022,
					2022-08-21 08:29:00.0,
					Sun Aug 21 08:29:00 GMT 2022,
					Sun Aug 21 08:29:00 GMT 2022"/>
    </testcase>
    <testcase testName="testBVLWithError"
              fieldName="testBVLWithError"
              dataType="Double"
              formula="BLANKVALUE(customnumber1__c/customnumber2__c,customcurrency1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <testData input="1,1,1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="0,0,0"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.ArithmeticException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="10,10,10" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input=",10,10" expectedOutput="0,
					0,
					0,
					0,
					10,
					10,
					10,
					10"/>
        <testData input="10,,10"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					10,
					10,
					10,
					10"/>
        <testData input="10,10," expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input=",,10"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					10,
					10,
					10,
					10"/>
        <testData input="10,,"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",10," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",,"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="1.1,1.1,1.1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="1,49,1.49"
                  expectedOutput="0.02040816326530612244897959183673,
					0.02040816326530612245,
					0.02040816326530612,
					0.0204082,
					0.02040816326530612244897959183673,
					0.02040816326530612245,
					0.02040816326530612,
					0.0204082"/>
        <testData input="1.5,1.5,1.5" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="1,99,1.99"
                  expectedOutput="0.01010101010101010101010101010101,
					0.01010101010101010101,
					0.010101010101010102,
					0.010101,
					0.01010101010101010101010101010101,
					0.01010101010101010101,
					0.010101010101010102,
					0.010101"/>
        <testData input="0.01,0.01,0.01" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
    </testcase>
    <testcase testName="testIfDateTimeCompareEqual"
              fieldName="testIfDateTimeCompareEqual"
              dataType="DateOnly"
              formula="IF((customdatetime1__c=customdatetime2__c),customdate1__c,customdate2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customdatetime2" dataType="DateTime"/>
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <testData input=",1999:12:31:23:59:58,2005:12:31:23:04:12,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="1999:12:31:23:59:58,,2005:12:31:23:04:12,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2004:01:01:00:00:00,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2004:01:01:12:00:01,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2004:01:01:12:00:00,2004:01:01:12:00:01, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2004:01:01:24:00:00,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2004:01:01:14:00:00,2004:01:01:14:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="2004:01:01:06:00:00,2004:01:01:04:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2004:02:28:24:00:00,2004:03:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="4000:01:01:00:00:00,1900:01:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="1900:01:01:00:00:00,4000:01:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2000:02:29:24:00:00,2000:03:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="1999:12:31:23:59:59,1999:12:31:23:59:58, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="1999:12:31:23:59:58,1999:12:31:23:59:59, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="1999:12:31:23:59:59,1999:12:31:23:59:59, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input=",1999:12:31:23:59:58,,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input=",,,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",1999:12:31:23:59:58,2005:12:31:23:04:12,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testIfDateCompareEqual"
              fieldName="testIfDateCompareEqual"
              dataType="DateTime"
              formula="IF((customdate1__c=customdate2__c),customdatetime1__c,customdatetime2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customdatetime2" dataType="DateTime"/>
        <testData input=",1999:12:31:23:59:58,2005:12:31:23:04:12,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="1999:12:31:23:59:58,,2005:12:31:23:04:12,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="2004:01:01:00:00:00,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="2004:01:01:12:00:01,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="2004:01:01:12:00:00,2004:01:01:12:00:01, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="2004:01:01:24:00:00,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="2004:01:01:14:00:00,2004:01:01:14:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="2004:01:01:06:00:00,2004:01:01:04:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="2004:02:28:24:00:00,2004:03:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="4000:01:01:00:00:00,1900:01:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="1900:01:01:00:00:00,4000:01:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="2000:02:29:24:00:00,2000:03:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="1999:12:31:23:59:59,1999:12:31:23:59:58, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="1999:12:31:23:59:58,1999:12:31:23:59:59, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="1999:12:31:23:59:59,1999:12:31:23:59:59, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input=",1999:12:31:23:59:58,,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input=",,,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",1999:12:31:23:59:58,2005:12:31:23:04:12,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testIfDateTimeCompareLessThan"
              fieldName="testIfDateTimeCompareLessThan"
              dataType="DateOnly"
              formula="IF((customdatetime1__c &lt;customdatetime2__c),customdate1__c,customdate2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customdatetime2" dataType="DateTime"/>
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <testData input=",1999:12:31:23:59:58,2005:12:31:23:04:12,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="1999:12:31:23:59:58,,2005:12:31:23:04:12,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2004:01:01:00:00:00,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="2004:01:01:12:00:01,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2004:01:01:12:00:00,2004:01:01:12:00:01, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="2004:01:01:24:00:00,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2004:01:01:14:00:00,2004:01:01:14:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2004:01:01:06:00:00,2004:01:01:04:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2004:02:28:24:00:00,2004:03:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="4000:01:01:00:00:00,1900:01:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="1900:01:01:00:00:00,4000:01:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="2000:02:29:24:00:00,2000:03:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="1999:12:31:23:59:59,1999:12:31:23:59:58, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="1999:12:31:23:59:58,1999:12:31:23:59:59, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="1999:12:31:23:59:59,1999:12:31:23:59:59, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input=",1999:12:31:23:59:58,,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input=",,,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",1999:12:31:23:59:58,2005:12:31:23:04:12,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testIfDateCompareLessThan"
              fieldName="testIfDateCompareLessThan"
              dataType="DateTime"
              formula="IF((customdate1__c&lt;customdate2__c),customdatetime1__c,customdatetime2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customdatetime2" dataType="DateTime"/>
        <testData input=",1999:12:31:23:59:58,2005:12:31:23:04:12,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="1999:12:31:23:59:58,,2005:12:31:23:04:12,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="2004:01:01:00:00:00,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="2004:01:01:12:00:01,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="2004:01:01:12:00:00,2004:01:01:12:00:01, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="2004:01:01:24:00:00,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="2004:01:01:14:00:00,2004:01:01:14:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="2004:01:01:06:00:00,2004:01:01:04:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="2004:02:28:24:00:00,2004:03:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="4000:01:01:00:00:00,1900:01:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="1900:01:01:00:00:00,4000:01:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="2000:02:29:24:00:00,2000:03:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="1999:12:31:23:59:59,1999:12:31:23:59:58, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="1999:12:31:23:59:58,1999:12:31:23:59:59, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="1999:12:31:23:59:59,1999:12:31:23:59:59, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input=",1999:12:31:23:59:58,,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input=",,,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",1999:12:31:23:59:58,2005:12:31:23:04:12,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testIfDateTimeCompareLessThanOrEqual"
              fieldName="testIfDateTimeCompareLessThanOrEqual"
              dataType="DateOnly"
              formula="IF((customdatetime1__c &lt;=customdatetime2__c),customdate1__c,customdate2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customdatetime2" dataType="DateTime"/>
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <testData input=",1999:12:31:23:59:58,2005:12:31:23:04:12,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="1999:12:31:23:59:58,,2005:12:31:23:04:12,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2004:01:01:00:00:00,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="2004:01:01:12:00:01,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2004:01:01:12:00:00,2004:01:01:12:00:01, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="2004:01:01:24:00:00,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2004:01:01:14:00:00,2004:01:01:14:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="2004:01:01:06:00:00,2004:01:01:04:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2004:02:28:24:00:00,2004:03:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="4000:01:01:00:00:00,1900:01:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="1900:01:01:00:00:00,4000:01:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="2000:02:29:24:00:00,2000:03:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="1999:12:31:23:59:59,1999:12:31:23:59:58, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="1999:12:31:23:59:58,1999:12:31:23:59:59, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="1999:12:31:23:59:59,1999:12:31:23:59:59, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input=",1999:12:31:23:59:58,,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input=",,,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",1999:12:31:23:59:58,2005:12:31:23:04:12,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testIfDateCompareLessThanOrEqual"
              fieldName="testIfDateCompareLessThanOrEqual"
              dataType="DateTime"
              formula="IF((customdate1__c&lt;=customdate2__c),customdatetime1__c,customdatetime2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customdatetime2" dataType="DateTime"/>
        <testData input=",1999:12:31:23:59:58,2005:12:31:23:04:12,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="1999:12:31:23:59:58,,2005:12:31:23:04:12,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="2004:01:01:00:00:00,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="2004:01:01:12:00:01,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="2004:01:01:12:00:00,2004:01:01:12:00:01, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="2004:01:01:24:00:00,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="2004:01:01:14:00:00,2004:01:01:14:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="2004:01:01:06:00:00,2004:01:01:04:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="2004:02:28:24:00:00,2004:03:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="4000:01:01:00:00:00,1900:01:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="1900:01:01:00:00:00,4000:01:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="2000:02:29:24:00:00,2000:03:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="1999:12:31:23:59:59,1999:12:31:23:59:58, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="1999:12:31:23:59:58,1999:12:31:23:59:59, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="1999:12:31:23:59:59,1999:12:31:23:59:59, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input=",1999:12:31:23:59:58,,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input=",,,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",1999:12:31:23:59:58,2005:12:31:23:04:12,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testIfDateTimeCompareGtThanOrEqual"
              fieldName="testIfDateTimeCompareGtThanOrEqual"
              dataType="DateOnly"
              formula="IF((customdatetime1__c &gt;=customdatetime2__c),customdate1__c,customdate2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customdatetime2" dataType="DateTime"/>
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <testData input=",1999:12:31:23:59:58,2005:12:31:23:04:12,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="1999:12:31:23:59:58,,2005:12:31:23:04:12,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2004:01:01:00:00:00,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2004:01:01:12:00:01,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="2004:01:01:12:00:00,2004:01:01:12:00:01, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2004:01:01:24:00:00,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="2004:01:01:14:00:00,2004:01:01:14:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="2004:01:01:06:00:00,2004:01:01:04:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="2004:02:28:24:00:00,2004:03:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="4000:01:01:00:00:00,1900:01:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="1900:01:01:00:00:00,4000:01:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="2000:02:29:24:00:00,2000:03:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="1999:12:31:23:59:59,1999:12:31:23:59:58, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input="1999:12:31:23:59:58,1999:12:31:23:59:59, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input="1999:12:31:23:59:59,1999:12:31:23:59:59, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005,
					2005-12-31 00:00:00.0,
					Sat Dec 31 00:00:00 GMT 2005,
					Sat Dec 31 00:00:00 GMT 2005"/>
        <testData input=",1999:12:31:23:59:58,,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006,
					2006-12-31 00:00:00.0,
					Sun Dec 31 00:00:00 GMT 2006,
					Sun Dec 31 00:00:00 GMT 2006"/>
        <testData input=",,,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",1999:12:31:23:59:58,2005:12:31:23:04:12,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testIfDateCompareGreaterThanOrEqual"
              fieldName="testIfDateCompareGreaterThanOrEqual"
              dataType="DateTime"
              formula="IF((customdate1__c&gt;=customdate2__c),customdatetime1__c,customdatetime2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customdatetime2" dataType="DateTime"/>
        <testData input=",1999:12:31:23:59:58,2005:12:31:23:04:12,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="1999:12:31:23:59:58,,2005:12:31:23:04:12,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="2004:01:01:00:00:00,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="2004:01:01:12:00:01,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="2004:01:01:12:00:00,2004:01:01:12:00:01, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="2004:01:01:24:00:00,2004:01:01:12:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="2004:01:01:14:00:00,2004:01:01:14:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="2004:01:01:06:00:00,2004:01:01:04:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="2004:02:28:24:00:00,2004:03:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="4000:01:01:00:00:00,1900:01:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="1900:01:01:00:00:00,4000:01:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="2000:02:29:24:00:00,2000:03:01:00:00:00, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input="1999:12:31:23:59:59,1999:12:31:23:59:58, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="1999:12:31:23:59:58,1999:12:31:23:59:59, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input="1999:12:31:23:59:59,1999:12:31:23:59:59, 2005:12:31:23:04:12, 2006:12:31:23:04:12"
                  expectedOutput="Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005,
					2005-12-31 23:04:12.0,
					Sat Dec 31 23:04:12 GMT 2005,
					Sat Dec 31 23:04:12 GMT 2005"/>
        <testData input=",1999:12:31:23:59:58,,2006:12:31:23:04:12"
                  expectedOutput="Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006,
					2006-12-31 23:04:12.0,
					Sun Dec 31 23:04:12 GMT 2006,
					Sun Dec 31 23:04:12 GMT 2006"/>
        <testData input=",,,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",1999:12:31:23:59:58,2005:12:31:23:04:12,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testCommentsInsideFormula"
              fieldName="testCommentsInsideFormula"
              dataType="Double"
              formula="/* comment */ IF /* comment */(YEAR(TODAY()) = 2009 /* comment */, 0,0) /** comment **/"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <testData expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
    </testcase>
    <testcase testName="testISNULLWithNum"
              fieldName="testISNULLWithNum"
              dataType="Currency"
              formula="if(isnull(customnumber1__c), 0,customcurrency1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <testData input="10,10"
                  expectedOutput="10,
					10.00000000000000000000000000000000,
					10,
					10,
					10,
					10.00000000000000000000000000000000,
					10,
					10"/>
        <testData input=",10"
                  expectedOutput="10,
					10.00000000000000000000000000000000,
					10,
					10,
					0,
					0E-32,
					0,
					0"/>
        <testData input="10,"
                  expectedOutput="0,
					0E-32,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="," expectedOutput="0,
					0E-32,
					0,
					0,
					0,
					0E-32,
					0,
					0"/>
        <testData input="0.0000009,10"
                  expectedOutput="10,
					10.00000000000000000000000000000000,
					10,
					10,
					10,
					10.00000000000000000000000000000000,
					10,
					10"/>
        <testData input="-1,10"
                  expectedOutput="10,
					10.00000000000000000000000000000000,
					10,
					10,
					10,
					10.00000000000000000000000000000000,
					10,
					10"/>
        <testData input=",0.0009"
                  expectedOutput="0.0009,
					0.00090000000000000000000000000000,
					0.0009,
					0.0009,
					0,
					0E-32,
					0,
					0"/>
        <testData input="0,10"
                  expectedOutput="10,
					10.00000000000000000000000000000000,
					10,
					10,
					10,
					10.00000000000000000000000000000000,
					10,
					10"/>
        <testData input="0.0,4"
                  expectedOutput="4,
					4.00000000000000000000000000000000,
					4,
					4,
					4,
					4.00000000000000000000000000000000,
					4,
					4"/>
        <testData input=",0" expectedOutput="0,
					0E-32,
					0,
					0,
					0,
					0E-32,
					0,
					0"/>
        <testData input=",0.0" expectedOutput="0.0,
					0E-32,
					0,
					0,
					0,
					0E-32,
					0,
					0"/>
        <testData input=",0.0000000"
                  expectedOutput="0.0000000,
					0E-32,
					0,
					0,
					0,
					0E-32,
					0,
					0"/>
        <testData input="1,10.1234"
                  expectedOutput="10.1234,
					10.12340000000000000000000000000000,
					10.1234,
					10.1234,
					10.1234,
					10.12340000000000000000000000000000,
					10.1234,
					10.1234"/>
        <testData input="10.1234,1"
                  expectedOutput="1,
					1.00000000000000000000000000000000,
					1,
					1,
					1,
					1.00000000000000000000000000000000,
					1,
					1"/>
    </testcase>
    <testcase testName="testISNULLWithCur"
              fieldName="testISNULLWithCur"
              dataType="Percent"
              formula="if(isnull(customcurrency1__c),0,custompercent1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <testData input="10,10"
                  expectedOutput="10,
					10.000000000000000000000000000000,
					10,
					10,
					10,
					10.000000000000000000000000000000,
					10,
					10"/>
        <testData input=",10"
                  expectedOutput="10,
					10.000000000000000000000000000000,
					10,
					10,
					0,
					0E-30,
					0,
					0"/>
        <testData input="10,"
                  expectedOutput="0,
					0E-30,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="," expectedOutput="0,
					0E-30,
					0,
					0,
					0,
					0E-30,
					0,
					0"/>
        <testData input="0.0000009,10"
                  expectedOutput="10,
					10.000000000000000000000000000000,
					10,
					10,
					10,
					10.000000000000000000000000000000,
					10,
					10"/>
        <testData input="-1,10"
                  expectedOutput="10,
					10.000000000000000000000000000000,
					10,
					10,
					10,
					10.000000000000000000000000000000,
					10,
					10"/>
        <testData input=",0.0009"
                  expectedOutput="0.0009,
					0.000900000000000000000000000000,
					0.0009,
					0.0009,
					0,
					0E-30,
					0,
					0"/>
        <testData input="0,10"
                  expectedOutput="10,
					10.000000000000000000000000000000,
					10,
					10,
					10,
					10.000000000000000000000000000000,
					10,
					10"/>
        <testData input="0.0,4"
                  expectedOutput="4,
					4.000000000000000000000000000000,
					4,
					4,
					4,
					4.000000000000000000000000000000,
					4,
					4"/>
        <testData input=",0" expectedOutput="0,
					0E-30,
					0,
					0,
					0,
					0E-30,
					0,
					0"/>
        <testData input=",0.0" expectedOutput="0,
					0E-30,
					0,
					0,
					0,
					0E-30,
					0,
					0"/>
        <testData input=",0.0000000"
                  expectedOutput="0,
					0E-30,
					0,
					0,
					0,
					0E-30,
					0,
					0"/>
        <testData input="1,10.1234"
                  expectedOutput="10.1234,
					10.123400000000000000000000000000,
					10.1234,
					10.1234,
					10.1234,
					10.123400000000000000000000000000,
					10.1234,
					10.1234"/>
        <testData input="10.1234,1"
                  expectedOutput="1,
					1.000000000000000000000000000000,
					1,
					1,
					1,
					1.000000000000000000000000000000,
					1,
					1"/>
    </testcase>
    <testcase testName="testISNULLWithPer"
              fieldName="testISNULLWithPer"
              dataType="Double"
              formula="if(isnull(custompercent1__c), 0,customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="10,10" expectedOutput="10,
					10,
					10,
					10,
					10,
					10,
					10,
					10"/>
        <testData input=",10" expectedOutput="10,
					10,
					10,
					10,
					0,
					0,
					0,
					0"/>
        <testData input="10," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="," expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.0000009,10"
                  expectedOutput="10,
					10,
					10,
					10,
					10,
					10,
					10,
					10"/>
        <testData input="-1,10" expectedOutput="10,
					10,
					10,
					10,
					10,
					10,
					10,
					10"/>
        <testData input=",0.0009"
                  expectedOutput="0.0009,
					0.0009,
					0.0009,
					0.0009,
					0,
					0,
					0,
					0"/>
        <testData input="0,10" expectedOutput="10,
					10,
					10,
					10,
					10,
					10,
					10,
					10"/>
        <testData input="0.0,4" expectedOutput="4,
					4,
					4,
					4,
					4,
					4,
					4,
					4"/>
        <testData input=",0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=",0.0" expectedOutput="0.0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=",0.0000000"
                  expectedOutput="0.0000000,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="1,10.1234"
                  expectedOutput="10.1234,
					10.1234,
					10.1234,
					10.1234,
					10.1234,
					10.1234,
					10.1234,
					10.1234"/>
        <testData input="10.1234,1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
    </testcase>
    <testcase testName="testISNULLWithText"
              fieldName="testISNULLWithText"
              dataType="Text"
              formula="if(isnull(customtext1__c),&#34;NULL&#34;,customtextarea1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customtextarea1" dataType="textarea"/>
        <testData input="Has it, Not Null"
                  expectedOutput=" Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input=", Is Null"
                  expectedOutput=" Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null"/>
        <testData input="Has It,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="I,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
    </testcase>
    <testcase testName="testISNULLWithTextArea"
              fieldName="testISNULLWithTextArea"
              dataType="Text"
              formula="if(isnull(customtextarea1__c),null,customtext1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtextarea1" dataType="textarea"/>
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="Has it, Not Null"
                  expectedOutput=" Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input=", Is Null"
                  expectedOutput=" Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null"/>
        <testData input="Has It,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="I,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
    </testcase>
    <testcase testName="testISNULLWithPhone"
              fieldName="testISNULLWithPhone"
              dataType="Text"
              formula="if(isnull(customphone1__c),null,customtextarea1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customphone1" dataType="phone"/>
        <referenceField fieldName="customtextarea1" dataType="textarea"/>
        <testData input="510-595-4547,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input="1234567892,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input="011-91-40-23750513,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input=",Is Null"
                  expectedOutput="Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null"/>
        <testData input="email@email.com,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input="23457699 x233, Not Null"
                  expectedOutput=" Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
    </testcase>
    <testcase testName="testISNULLWithEmail"
              fieldName="testISNULLWithEmail"
              dataType="Text"
              formula="if(isnull(customemail1__c),null,customtextarea1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customemail1" dataType="email"/>
        <referenceField fieldName="customtextarea1" dataType="textarea"/>
        <testData input="syendluri@yahoo.com,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input="aa@ss.com, Not Null"
                  expectedOutput=" Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input=",Is Null"
                  expectedOutput="Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null"/>
        <testData input=","
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testISNULLWithUrl"
              fieldName="testISNULLWithUrl"
              dataType="Text"
              formula="if(isnull(customurl1__c),null,customtextarea1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customurl1" dataType="url"/>
        <referenceField fieldName="customtextarea1" dataType="textarea"/>
        <testData input="http://salesforce.com,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input="https://blitzna1.eng.salesforce.com/setup/ui/layoutfieldlist.jsp?type=Account&amp;setupid=AccountFields,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input=",Is Null"
                  expectedOutput="Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null,
					Is Null"/>
        <testData input="email@email.com,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input="mailto:syendluri@salesforce.com,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input="ui/layoutfieldlist.jsp,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input=","
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testISNULLWithDate"
              fieldName="testISNULLWithDate"
              dataType="DateOnly"
              formula="if(isnull(customdate1__c),customdate2__c,null)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <testData input="2004:12:31:11:32:00,2004:12:31:11:30:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2004:02:28:10:34:00,2008:02:28:10:34:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:31:11:30:00,2004:12:31:11:32:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2004:02:28:10:34:00,2004:03:01:00:00:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",2004:12:31:11:32:00"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=","
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="3999:02:28:10:34:00,1780:02:28:10:34:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:00:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:15:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2022:08:21:08:29:00,2022:08:21:08:00:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testISNULLWithDateTime"
              fieldName="testISNULLWithDateTime"
              dataType="DateTime"
              formula="if(isnull(customdatetime1__c),customdatetime2__c,null)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customdatetime2" dataType="DateTime"/>
        <testData input="2004:12:31:11:32:00,2004:12:31:11:30:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2004:02:28:10:34:00,2008:02:28:10:34:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:31:11:30:00,2004:12:31:11:32:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2004:02:28:10:34:00,2004:03:01:00:00:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",2004:12:31:11:32:00"
                  expectedOutput="Fri Dec 31 11:32:00 GMT 2004,
					2004-12-31 11:32:00.0,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004,
					2004-12-31 11:32:00.0,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=","
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="3999:02:28:10:34:00,1780:02:28:10:34:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:00:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:15:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2022:08:21:08:29:00,2022:08:21:08:00:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testISNULLWithError"
              fieldName="testISNULLWithError"
              dataType="Double"
              formula="if(isnull(customnumber1__c/customnumber2__c),null,customcurrency1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <testData input="1,1,1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="0,0,0"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					0,
					0,
					Error: java.lang.ArithmeticException,
					null,
					0,
					0"/>
        <testData input="10,10,10" expectedOutput="10,
					10,
					10,
					10,
					10,
					10,
					10,
					10"/>
        <testData input=",10,10"
                  expectedOutput="10,
					10,
					10,
					10,
					null,
					null,
					null,
					null"/>
        <testData input="10,,10"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					10,
					10,
					null,
					null,
					null,
					null"/>
        <testData input="10,10,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",,10"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					10,
					10,
					null,
					null,
					null,
					null"/>
        <testData input="10,,"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",10," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",,"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1.1,1.1,1.1"
                  expectedOutput="1.1,
					1.1,
					1.1,
					1.1,
					1.1,
					1.1,
					1.1,
					1.1"/>
        <testData input="1,49,1.49"
                  expectedOutput="1.49,
					1.49,
					1.49,
					1.49,
					1.49,
					1.49,
					1.49,
					1.49"/>
        <testData input="1.5,1.5,1.5"
                  expectedOutput="1.5,
					1.5,
					1.5,
					1.5,
					1.5,
					1.5,
					1.5,
					1.5"/>
        <testData input="1,99,1.99"
                  expectedOutput="1.99,
					1.99,
					1.99,
					1.99,
					1.99,
					1.99,
					1.99,
					1.99"/>
        <testData input="0.01,0.01,0.01"
                  expectedOutput="0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01"/>
    </testcase>
    <testcase testName="testISBLANKWithNum"
              fieldName="testISBLANKWithNum"
              dataType="Currency"
              formula="if(isblank(customnumber1__c), 0,customcurrency1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <testData input="10,10"
                  expectedOutput="10,
					10.00000000000000000000000000000000,
					10,
					10,
					10,
					10.00000000000000000000000000000000,
					10,
					10"/>
        <testData input=",10"
                  expectedOutput="10,
					10.00000000000000000000000000000000,
					10,
					10,
					0,
					0E-32,
					0,
					0"/>
        <testData input="10,"
                  expectedOutput="0,
					0E-32,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="," expectedOutput="0,
					0E-32,
					0,
					0,
					0,
					0E-32,
					0,
					0"/>
        <testData input="0.0000009,10"
                  expectedOutput="10,
					10.00000000000000000000000000000000,
					10,
					10,
					10,
					10.00000000000000000000000000000000,
					10,
					10"/>
        <testData input="-1,10"
                  expectedOutput="10,
					10.00000000000000000000000000000000,
					10,
					10,
					10,
					10.00000000000000000000000000000000,
					10,
					10"/>
        <testData input=",0.0009"
                  expectedOutput="0.0009,
					0.00090000000000000000000000000000,
					0.0009,
					0.0009,
					0,
					0E-32,
					0,
					0"/>
        <testData input="0,10"
                  expectedOutput="10,
					10.00000000000000000000000000000000,
					10,
					10,
					10,
					10.00000000000000000000000000000000,
					10,
					10"/>
        <testData input="0.0,4"
                  expectedOutput="4,
					4.00000000000000000000000000000000,
					4,
					4,
					4,
					4.00000000000000000000000000000000,
					4,
					4"/>
        <testData input=",0" expectedOutput="0,
					0E-32,
					0,
					0,
					0,
					0E-32,
					0,
					0"/>
        <testData input=",0.0" expectedOutput="0.0,
					0E-32,
					0,
					0,
					0,
					0E-32,
					0,
					0"/>
        <testData input=",0.0000000"
                  expectedOutput="0.0000000,
					0E-32,
					0,
					0,
					0,
					0E-32,
					0,
					0"/>
        <testData input="1,10.1234"
                  expectedOutput="10.1234,
					10.12340000000000000000000000000000,
					10.1234,
					10.1234,
					10.1234,
					10.12340000000000000000000000000000,
					10.1234,
					10.1234"/>
        <testData input="10.1234,1"
                  expectedOutput="1,
					1.00000000000000000000000000000000,
					1,
					1,
					1,
					1.00000000000000000000000000000000,
					1,
					1"/>
    </testcase>
    <testcase testName="testISBLANKWithCur"
              fieldName="testISBLANKWithCur"
              dataType="Percent"
              formula="if(isblank(customcurrency1__c),0,custompercent1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <testData input="10,10"
                  expectedOutput="10,
					10.000000000000000000000000000000,
					10,
					10,
					10,
					10.000000000000000000000000000000,
					10,
					10"/>
        <testData input=",10"
                  expectedOutput="10,
					10.000000000000000000000000000000,
					10,
					10,
					0,
					0E-30,
					0,
					0"/>
        <testData input="10,"
                  expectedOutput="0,
					0E-30,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="," expectedOutput="0,
					0E-30,
					0,
					0,
					0,
					0E-30,
					0,
					0"/>
        <testData input="0.0000009,10"
                  expectedOutput="10,
					10.000000000000000000000000000000,
					10,
					10,
					10,
					10.000000000000000000000000000000,
					10,
					10"/>
        <testData input="-1,10"
                  expectedOutput="10,
					10.000000000000000000000000000000,
					10,
					10,
					10,
					10.000000000000000000000000000000,
					10,
					10"/>
        <testData input=",0.0009"
                  expectedOutput="0.0009,
					0.000900000000000000000000000000,
					0.0009,
					0.0009,
					0,
					0E-30,
					0,
					0"/>
        <testData input="0,10"
                  expectedOutput="10,
					10.000000000000000000000000000000,
					10,
					10,
					10,
					10.000000000000000000000000000000,
					10,
					10"/>
        <testData input="0.0,4"
                  expectedOutput="4,
					4.000000000000000000000000000000,
					4,
					4,
					4,
					4.000000000000000000000000000000,
					4,
					4"/>
        <testData input=",0" expectedOutput="0,
					0E-30,
					0,
					0,
					0,
					0E-30,
					0,
					0"/>
        <testData input=",0.0" expectedOutput="0,
					0E-30,
					0,
					0,
					0,
					0E-30,
					0,
					0"/>
        <testData input=",0.0000000"
                  expectedOutput="0,
					0E-30,
					0,
					0,
					0,
					0E-30,
					0,
					0"/>
        <testData input="1,10.1234"
                  expectedOutput="10.1234,
					10.123400000000000000000000000000,
					10.1234,
					10.1234,
					10.1234,
					10.123400000000000000000000000000,
					10.1234,
					10.1234"/>
        <testData input="10.1234,1"
                  expectedOutput="1,
					1.000000000000000000000000000000,
					1,
					1,
					1,
					1.000000000000000000000000000000,
					1,
					1"/>
    </testcase>
    <testcase testName="testISBLANKWithPer"
              fieldName="testISBLANKWithPer"
              dataType="Double"
              formula="if(isblank(custompercent1__c), 0,customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="10,10" expectedOutput="10,
					10,
					10,
					10,
					10,
					10,
					10,
					10"/>
        <testData input=",10" expectedOutput="10,
					10,
					10,
					10,
					0,
					0,
					0,
					0"/>
        <testData input="10," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="," expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.0000009,10"
                  expectedOutput="10,
					10,
					10,
					10,
					10,
					10,
					10,
					10"/>
        <testData input="-1,10" expectedOutput="10,
					10,
					10,
					10,
					10,
					10,
					10,
					10"/>
        <testData input=",0.0009"
                  expectedOutput="0.0009,
					0.0009,
					0.0009,
					0.0009,
					0,
					0,
					0,
					0"/>
        <testData input="0,10" expectedOutput="10,
					10,
					10,
					10,
					10,
					10,
					10,
					10"/>
        <testData input="0.0,4" expectedOutput="4,
					4,
					4,
					4,
					4,
					4,
					4,
					4"/>
        <testData input=",0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=",0.0" expectedOutput="0.0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=",0.0000000"
                  expectedOutput="0.0000000,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="1,10.1234"
                  expectedOutput="10.1234,
					10.1234,
					10.1234,
					10.1234,
					10.1234,
					10.1234,
					10.1234,
					10.1234"/>
        <testData input="10.1234,1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
    </testcase>
    <testcase testName="testISBLANKWithText"
              fieldName="testISBLANKWithText"
              dataType="Text"
              formula="if(isblank(customtext1__c),&#34;NULL&#34;,customtextarea1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <referenceField fieldName="customtextarea1" dataType="textarea"/>
        <testData input="Has it, Not Null"
                  expectedOutput=" Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input=", Is Null"
                  expectedOutput="NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL"/>
        <testData input="Has It,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="I,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
    </testcase>
    <testcase testName="testISBLANKWithTextArea"
              fieldName="testISBLANKWithTextArea"
              dataType="Text"
              formula="if(isblank(customtextarea1__c),null,customtext1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtextarea1" dataType="textarea"/>
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="Has it, Not Null"
                  expectedOutput=" Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input=", Is Null"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="Has It,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="I,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
    </testcase>
    <testcase testName="testISBLANKWithPhone"
              fieldName="testISBLANKWithPhone"
              dataType="Text"
              formula="if(isblank(customphone1__c),null,customtextarea1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customphone1" dataType="phone"/>
        <referenceField fieldName="customtextarea1" dataType="textarea"/>
        <testData input="510-595-4547,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input="1234567892,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input="011-91-40-23750513,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input=",Is Null"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="email@email.com,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input="23457699 x233, Not Null"
                  expectedOutput=" Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
    </testcase>
    <testcase testName="testISBLANKWithEmail"
              fieldName="testISBLANKWithEmail"
              dataType="Text"
              formula="if(isblank(customemail1__c),null,customtextarea1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customemail1" dataType="email"/>
        <referenceField fieldName="customtextarea1" dataType="textarea"/>
        <testData input="syendluri@yahoo.com,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input="aa@ss.com, Not Null"
                  expectedOutput=" Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input=",Is Null"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=","
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testISBLANKWithUrl"
              fieldName="testISBLANKWithUrl"
              dataType="Text"
              formula="if(isblank(customurl1__c),null,customtextarea1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customurl1" dataType="url"/>
        <referenceField fieldName="customtextarea1" dataType="textarea"/>
        <testData input="http://salesforce.com,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input="https://blitzna1.eng.salesforce.com/setup/ui/layoutfieldlist.jsp?type=Account&amp;setupid=AccountFields,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input=",Is Null"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="email@email.com,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input="mailto:syendluri@salesforce.com,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input="ui/layoutfieldlist.jsp,Not Null"
                  expectedOutput="Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null,
					Not Null"/>
        <testData input=","
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testISBLANKWithDate"
              fieldName="testISBLANKWithDate"
              dataType="DateOnly"
              formula="if(isblank(customdate1__c),customdate2__c,null)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <testData input="2004:12:31:11:32:00,2004:12:31:11:30:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2004:02:28:10:34:00,2008:02:28:10:34:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:31:11:30:00,2004:12:31:11:32:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2004:02:28:10:34:00,2004:03:01:00:00:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",2004:12:31:11:32:00"
                  expectedOutput="Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004,
					2004-12-31 00:00:00.0,
					Fri Dec 31 00:00:00 GMT 2004,
					Fri Dec 31 00:00:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=","
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="3999:02:28:10:34:00,1780:02:28:10:34:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:00:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:15:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2022:08:21:08:29:00,2022:08:21:08:00:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testISBLANKWithDateTime"
              fieldName="testISBLANKWithDateTime"
              dataType="DateTime"
              formula="if(isblank(customdatetime1__c),customdatetime2__c,null)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customdatetime2" dataType="DateTime"/>
        <testData input="2004:12:31:11:32:00,2004:12:31:11:30:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2004:02:28:10:34:00,2008:02:28:10:34:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:31:11:30:00,2004:12:31:11:32:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2004:02:28:10:34:00,2004:03:01:00:00:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",2004:12:31:11:32:00"
                  expectedOutput="Fri Dec 31 11:32:00 GMT 2004,
					2004-12-31 11:32:00.0,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004,
					2004-12-31 11:32:00.0,
					Fri Dec 31 11:32:00 GMT 2004,
					Fri Dec 31 11:32:00 GMT 2004"/>
        <testData input="2004:02:28:10:34:00,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=","
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="3999:02:28:10:34:00,1780:02:28:10:34:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:00:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:15:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2022:08:21:08:29:00,2022:08:21:08:00:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testISBLANKWithError"
              fieldName="testISBLANKWithError"
              dataType="Double"
              formula="if(isblank(customnumber1__c/customnumber2__c),null,customcurrency1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <testData input="1,1,1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="0,0,0"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					0,
					0,
					Error: java.lang.ArithmeticException,
					null,
					0,
					0"/>
        <testData input="10,10,10" expectedOutput="10,
					10,
					10,
					10,
					10,
					10,
					10,
					10"/>
        <testData input=",10,10"
                  expectedOutput="10,
					10,
					10,
					10,
					null,
					null,
					null,
					null"/>
        <testData input="10,,10"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					10,
					10,
					null,
					null,
					null,
					null"/>
        <testData input="10,10,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",,10"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					10,
					10,
					null,
					null,
					null,
					null"/>
        <testData input="10,,"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",10," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",,"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1.1,1.1,1.1"
                  expectedOutput="1.1,
					1.1,
					1.1,
					1.1,
					1.1,
					1.1,
					1.1,
					1.1"/>
        <testData input="1,49,1.49"
                  expectedOutput="1.49,
					1.49,
					1.49,
					1.49,
					1.49,
					1.49,
					1.49,
					1.49"/>
        <testData input="1.5,1.5,1.5"
                  expectedOutput="1.5,
					1.5,
					1.5,
					1.5,
					1.5,
					1.5,
					1.5,
					1.5"/>
        <testData input="1,99,1.99"
                  expectedOutput="1.99,
					1.99,
					1.99,
					1.99,
					1.99,
					1.99,
					1.99,
					1.99"/>
        <testData input="0.01,0.01,0.01"
                  expectedOutput="0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01"/>
    </testcase>
    <testcase testName="testDATEVALUEWithString"
              fieldName="testDATEVALUEWithString"
              dataType="DateOnly"
              formula="datevalue(customtext1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="2005-01-02"
                  expectedOutput="Sun Jan 02 00:00:00 GMT 2005,
					2005-01-02 00:00:00.0,
					Sun Jan 02 00:00:00 GMT 2005,
					Sun Jan 02 00:00:00 GMT 2005,
					Sun Jan 02 00:00:00 GMT 2005,
					2005-01-02 00:00:00.0,
					Sun Jan 02 00:00:00 GMT 2005,
					Sun Jan 02 00:00:00 GMT 2005"/>
        <testData input="2005-1-2"
                  expectedOutput="Sun Jan 02 00:00:00 GMT 2005,
					2005-01-02 00:00:00.0,
					Sun Jan 02 00:00:00 GMT 2005,
					Sun Jan 02 00:00:00 GMT 2005,
					Sun Jan 02 00:00:00 GMT 2005,
					2005-01-02 00:00:00.0,
					Sun Jan 02 00:00:00 GMT 2005,
					Sun Jan 02 00:00:00 GMT 2005"/>
        <testData input="9999-01-15"
                  expectedOutput="Fri Jan 15 00:00:00 GMT 9999,
					9999-01-15 00:00:00.0,
					Fri Jan 15 00:00:00 GMT 9999,
					Fri Jan 15 00:00:00 GMT 9999,
					Fri Jan 15 00:00:00 GMT 9999,
					9999-01-15 00:00:00.0,
					Fri Jan 15 00:00:00 GMT 9999,
					Fri Jan 15 00:00:00 GMT 9999"/>
        <testData input="0001-01-15"
                  expectedOutput="Sat Jan 15 00:00:00 GMT 1,
					0001-01-15 00:00:00.0,
					Mon Jan 17 00:00:00 GMT 1,
					Mon Jan 17 00:00:00 GMT 1,
					Sat Jan 15 00:00:00 GMT 1,
					0001-01-15 00:00:00.0,
					Mon Jan 17 00:00:00 GMT 1,
					Mon Jan 17 00:00:00 GMT 1"/>
        <testData input="200-01-03"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Fri Jan 04 00:00:00 GMT 200,
					Fri Jan 04 00:00:00 GMT 200,
					Error: com.force.formula.FormulaDateException,
					null,
					Fri Jan 04 00:00:00 GMT 200,
					Fri Jan 04 00:00:00 GMT 200"/>
        <testData input="200-1-3"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Fri Jan 04 00:00:00 GMT 200,
					Fri Jan 04 00:00:00 GMT 200,
					Error: com.force.formula.FormulaDateException,
					null,
					Fri Jan 04 00:00:00 GMT 200,
					Fri Jan 04 00:00:00 GMT 200"/>
        <testData input="2-1-3"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Sat Feb 01 00:00:00 GMT 2003,
					Sat Feb 01 00:00:00 GMT 2003,
					Error: com.force.formula.FormulaDateException,
					null,
					Sat Feb 01 00:00:00 GMT 2003,
					Sat Feb 01 00:00:00 GMT 2003"/>
        <testData input="2005-13-02"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Javascript cannot parse time,
					Error: Javascript cannot parse time,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Javascript cannot parse time,
					Error: Javascript cannot parse time"/>
        <testData input="2005-02-31"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					Error: ERROR: date/time field value out of range: &#34;2005-02-31&#34;,
					Thu Mar 03 00:00:00 GMT 2005,
					Thu Mar 03 00:00:00 GMT 2005,
					Error: com.force.formula.FormulaDateException,
					Error: ERROR: date/time field value out of range: &#34;2005-02-31&#34;,
					Thu Mar 03 00:00:00 GMT 2005,
					Thu Mar 03 00:00:00 GMT 2005"/>
        <testData input="2005-03-32"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Javascript cannot parse time,
					Error: Javascript cannot parse time,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Javascript cannot parse time,
					Error: Javascript cannot parse time"/>
        <testData input=""
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="crapola"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Javascript cannot parse time,
					Error: Javascript cannot parse time,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Javascript cannot parse time,
					Error: Javascript cannot parse time"/>
        <testData input="2000-0-2"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Javascript cannot parse time,
					Error: Javascript cannot parse time,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Javascript cannot parse time,
					Error: Javascript cannot parse time"/>
        <testData input="0000-12-12"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					0001-12-12 00:00:00.0,
					Tue Dec 14 00:00:00 GMT 1,
					Tue Dec 14 00:00:00 GMT 1,
					Error: com.force.formula.FormulaDateException,
					0001-12-12 00:00:00.0,
					Tue Dec 14 00:00:00 GMT 1,
					Tue Dec 14 00:00:00 GMT 1"/>
        <testData input="0-12-12"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Tue Dec 12 00:00:00 GMT 2000,
					Tue Dec 12 00:00:00 GMT 2000,
					Error: com.force.formula.FormulaDateException,
					null,
					Tue Dec 12 00:00:00 GMT 2000,
					Tue Dec 12 00:00:00 GMT 2000"/>
        <testData input="2020-11-00"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					Error: Javascript cannot parse time,
					Error: Javascript cannot parse time,
					Error: com.force.formula.FormulaDateException,
					null,
					Error: Javascript cannot parse time,
					Error: Javascript cannot parse time"/>
    </testcase>
    <testcase testName="testIfReturningNullForDateType"
              fieldName="testIfReturningNullForDateType"
              dataType="DateOnly"
              formula="if(true, if(false, null, null), TODAY())"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <testData expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testIfReturningNullForDateTimeType"
              fieldName="testIfReturningNullForDateTimeType"
              dataType="DateTime"
              formula="if(true, if(false, null, null), NOW())"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <testData expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testIfReturningNullForNumericType"
              fieldName="testIfReturningNullForNumericType"
              dataType="Double"
              formula="if(true, if(false, null, null), 999)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <testData expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testShortCircuitingWithNullTerms"
              fieldName="testShortCircuitingWithNullTerms"
              dataType="Text"
              formula="if(and(customdate1__c &gt;date(2000,1,1), value(customtext1__c )&gt;0),'True','False')"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="2005:12:31,4"
                  expectedOutput="True,
					True,
					True,
					True,
					True,
					True,
					True,
					True"/>
        <testData input="2005:12:31,0"
                  expectedOutput="False,
					False,
					False,
					False,
					False,
					False,
					False,
					False"/>
        <testData input="2005:12:31,abc"
                  expectedOutput="Error: com.force.formula.impl.InvalidNumericValueException,
					null,
					Error: Error: [DecimalError] Invalid argument: abc,
					False,
					Error: com.force.formula.impl.InvalidNumericValueException,
					null,
					Error: Error: [DecimalError] Invalid argument: abc,
					False"/>
        <testData input=",4"
                  expectedOutput="False,
					False,
					False,
					False,
					False,
					False,
					False,
					False"/>
    </testcase>
    <testcase testName="testSimpleRef"
              fieldName="testSimpleRef"
              dataType="Double"
              formula="customNumber1__c"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customNumber1" dataType="Double"/>
        <testData input="1234567890.0"
                  expectedOutput="1234567890.0,
					1234567890,
					1234567890,
					1234567890,
					1234567890.0,
					1234567890,
					1234567890,
					1234567890"/>
        <testData input="1234567891.0"
                  expectedOutput="1234567891.0,
					1234567891,
					1234567891,
					1234567891,
					1234567891.0,
					1234567891,
					1234567891,
					1234567891"/>
        <testData input="1234567890"
                  expectedOutput="1234567890,
					1234567890,
					1234567890,
					1234567890,
					1234567890,
					1234567890,
					1234567890,
					1234567890"/>
        <testData input="1234567891"
                  expectedOutput="1234567891,
					1234567891,
					1234567891,
					1234567891,
					1234567891,
					1234567891,
					1234567891,
					1234567891"/>
        <testData input="" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testSimpleRefText"
              fieldName="testSimpleRefText"
              dataType="Text"
              formula="customText1__c"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customText1" dataType="Text"/>
        <testData input="This is too good to be true"
                  expectedOutput="This is too good to be true,
					This is too good to be true,
					This is too good to be true,
					This is too good to be true,
					This is too good to be true,
					This is too good to be true,
					This is too good to be true,
					This is too good to be true"/>
        <testData input="making a way"
                  expectedOutput="making a way,
					making a way,
					making a way,
					making a way,
					making a way,
					making a way,
					making a way,
					making a way"/>
        <testData input=""
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="blunder"
                  expectedOutput="blunder,
					blunder,
					blunder,
					blunder,
					blunder,
					blunder,
					blunder,
					blunder"/>
        <testData input="makesense"
                  expectedOutput="makesense,
					makesense,
					makesense,
					makesense,
					makesense,
					makesense,
					makesense,
					makesense"/>
        <testData input="does not make sense"
                  expectedOutput="does not make sense,
					does not make sense,
					does not make sense,
					does not make sense,
					does not make sense,
					does not make sense,
					does not make sense,
					does not make sense"/>
        <testData input="working my way"
                  expectedOutput="working my way,
					working my way,
					working my way,
					working my way,
					working my way,
					working my way,
					working my way,
					working my way"/>
        <testData input="e" expectedOutput="e,
					e,
					e,
					e,
					e,
					e,
					e,
					e"/>
        <testData input="hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag"
                  expectedOutput="hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag,
					hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag,
					hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag,
					hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag,
					hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag,
					hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag,
					hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag,
					hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag"/>
        <testData input="250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_"
                  expectedOutput="250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_,
					250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_,
					250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_,
					250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_,
					250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_,
					250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_,
					250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_,
					250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_"/>
        <testData input="blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r"
                  expectedOutput="blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r,
					blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r,
					blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r,
					blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r,
					blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r,
					blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r,
					blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r,
					blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r"/>
    </testcase>
    <testcase testName="testLpad"
              fieldName="testLpad"
              dataType="Text"
              formula="lpad(customText1__c,customNumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customText1" dataType="Text"/>
        <referenceField fieldName="customNumber1" dataType="Double"/>
        <testData input=",0"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",5"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="string,-1"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="string,0"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="string,1" expectedOutput="s,
					s,
					s,
					s,
					s,
					s,
					s,
					s"/>
        <testData input="string,5"
                  expectedOutput="strin,
					strin,
					strin,
					strin,
					strin,
					strin,
					strin,
					strin"/>
        <testData input="string,6"
                  expectedOutput="string,
					string,
					string,
					string,
					string,
					string,
					string,
					string"/>
        <testData input="string,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testRpad"
              fieldName="testRpad"
              dataType="Text"
              formula="rpad(customText1__c,customNumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customText1" dataType="Text"/>
        <referenceField fieldName="customNumber1" dataType="Double"/>
        <testData input=",0"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",5"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="string,-1"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="string,0"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="string,1" expectedOutput="s,
					s,
					s,
					s,
					s,
					s,
					s,
					s"/>
        <testData input="string,5"
                  expectedOutput="strin,
					strin,
					strin,
					strin,
					strin,
					strin,
					strin,
					strin"/>
        <testData input="string,6"
                  expectedOutput="string,
					string,
					string,
					string,
					string,
					string,
					string,
					string"/>
        <testData input="string,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testLpad2"
              fieldName="testLpad2"
              dataType="Text"
              formula="lpad(customText1__c,customNumber1__c,customText2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customText1" dataType="Text"/>
        <referenceField fieldName="customNumber1" dataType="Double"/>
        <referenceField fieldName="customText2" dataType="Text"/>
        <testData input="string,0,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",0,x"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="string,0,x"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="string,1,x" expectedOutput="s,
					s,
					s,
					s,
					s,
					s,
					s,
					s"/>
        <testData input="string,5,x"
                  expectedOutput="strin,
					strin,
					strin,
					strin,
					strin,
					strin,
					strin,
					strin"/>
        <testData input="string,6,x"
                  expectedOutput="string,
					string,
					string,
					string,
					string,
					string,
					string,
					string"/>
        <testData input="string,7,x"
                  expectedOutput="xstring,
					xstring,
					xstring,
					xstring,
					xstring,
					xstring,
					xstring,
					xstring"/>
        <testData input="string,11,x"
                  expectedOutput="xxxxxstring,
					xxxxxstring,
					xxxxxstring,
					xxxxxstring,
					xxxxxstring,
					xxxxxstring,
					xxxxxstring,
					xxxxxstring"/>
        <testData input="string,0,abc"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="string,1,abc" expectedOutput="s,
					s,
					s,
					s,
					s,
					s,
					s,
					s"/>
        <testData input="string,5,abc"
                  expectedOutput="strin,
					strin,
					strin,
					strin,
					strin,
					strin,
					strin,
					strin"/>
        <testData input="string,6,abc"
                  expectedOutput="string,
					string,
					string,
					string,
					string,
					string,
					string,
					string"/>
        <testData input="string,7,abc"
                  expectedOutput="astring,
					astring,
					astring,
					astring,
					astring,
					astring,
					astring,
					astring"/>
        <testData input="string,11,abc"
                  expectedOutput="abcabstring,
					abcabstring,
					abcabstring,
					abcabstring,
					abcabstring,
					abcabstring,
					abcabstring,
					abcabstring"/>
    </testcase>
    <testcase testName="testRpad2"
              fieldName="testRpad2"
              dataType="Text"
              formula="rpad(customText1__c,customNumber1__c,customText2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customText1" dataType="Text"/>
        <referenceField fieldName="customNumber1" dataType="Double"/>
        <referenceField fieldName="customText2" dataType="Text"/>
        <testData input="string,0,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",0,x"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="string,0,x"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="string,1,x" expectedOutput="s,
					s,
					s,
					s,
					s,
					s,
					s,
					s"/>
        <testData input="string,5,x"
                  expectedOutput="strin,
					strin,
					strin,
					strin,
					strin,
					strin,
					strin,
					strin"/>
        <testData input="string,6,x"
                  expectedOutput="string,
					string,
					string,
					string,
					string,
					string,
					string,
					string"/>
        <testData input="string,7,x"
                  expectedOutput="stringx,
					stringx,
					stringx,
					stringx,
					stringx,
					stringx,
					stringx,
					stringx"/>
        <testData input="string,11,x"
                  expectedOutput="stringxxxxx,
					stringxxxxx,
					stringxxxxx,
					stringxxxxx,
					stringxxxxx,
					stringxxxxx,
					stringxxxxx,
					stringxxxxx"/>
        <testData input="string,0,abc"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="string,1,abc" expectedOutput="s,
					s,
					s,
					s,
					s,
					s,
					s,
					s"/>
        <testData input="string,5,abc"
                  expectedOutput="strin,
					strin,
					strin,
					strin,
					strin,
					strin,
					strin,
					strin"/>
        <testData input="string,6,abc"
                  expectedOutput="string,
					string,
					string,
					string,
					string,
					string,
					string,
					string"/>
        <testData input="string,7,abc"
                  expectedOutput="stringa,
					stringa,
					stringa,
					stringa,
					stringa,
					stringa,
					stringa,
					stringa"/>
        <testData input="string,11,abc"
                  expectedOutput="stringabcab,
					stringabcab,
					stringabcab,
					stringabcab,
					stringabcab,
					stringabcab,
					stringabcab,
					stringabcab"/>
    </testcase>
    <testcase testName="testUpper"
              fieldName="testUpper"
              dataType="Text"
              formula="upper(customText1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customText1" dataType="Text"/>
        <testData input="﻿" expectedOutput="﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿"/>
        <testData input="CASES"
                  expectedOutput="CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES"/>
        <testData input="cases"
                  expectedOutput="CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES"/>
        <testData input="CaSeS"
                  expectedOutput="CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES"/>
        <testData input="große"
                  expectedOutput="GROSSE,
					GROßE,
					GROSSE,
					GROSSE,
					GROSSE,
					GROßE,
					GROSSE,
					GROSSE"/>
        <testData input="ångstrom"
                  expectedOutput="ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM"/>
        <testData input="ÅNGSTROM"
                  expectedOutput="ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM"/>
        <testData input="idempotent"
                  expectedOutput="IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT"/>
        <testData input="ıdempotent"
                  expectedOutput="IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT"/>
        <testData input="IDEMPOTENT"
                  expectedOutput="IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT"/>
        <testData input="İDEMPOTENT"
                  expectedOutput="İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT"/>
    </testcase>
    <testcase testName="testLower"
              fieldName="testLower"
              dataType="Text"
              formula="lower(customText1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customText1" dataType="Text"/>
        <testData input="﻿" expectedOutput="﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿"/>
        <testData input="CASES"
                  expectedOutput="cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases"/>
        <testData input="cases"
                  expectedOutput="cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases"/>
        <testData input="CaSeS"
                  expectedOutput="cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases"/>
        <testData input="große"
                  expectedOutput="große,
					große,
					große,
					große,
					große,
					große,
					große,
					große"/>
        <testData input="ångstrom"
                  expectedOutput="ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom"/>
        <testData input="ÅNGSTROM"
                  expectedOutput="ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom"/>
        <testData input="idempotent"
                  expectedOutput="idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent"/>
        <testData input="ıdempotent"
                  expectedOutput="ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent"/>
        <testData input="IDEMPOTENT"
                  expectedOutput="idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent"/>
        <testData input="İDEMPOTENT"
                  expectedOutput="i̇dempotent,
					idempotent,
					i̇dempotent,
					i̇dempotent,
					i̇dempotent,
					idempotent,
					i̇dempotent,
					i̇dempotent"/>
    </testcase>
    <testcase testName="testUpperLocale"
              fieldName="testUpperLocale"
              dataType="Text"
              formula="upper(customText1__c,customText2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customText1" dataType="Text"/>
        <referenceField fieldName="customText2" dataType="Text"/>
        <testData input="﻿," expectedOutput="﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿"/>
        <testData input="CASES,"
                  expectedOutput="CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES"/>
        <testData input="cases,"
                  expectedOutput="CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES"/>
        <testData input="CaSeS,"
                  expectedOutput="CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES"/>
        <testData input="große,"
                  expectedOutput="GROSSE,
					GROßE,
					GROSSE,
					GROSSE,
					GROSSE,
					GROßE,
					GROSSE,
					GROSSE"/>
        <testData input="ångstrom,"
                  expectedOutput="ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM"/>
        <testData input="ÅNGSTROM,"
                  expectedOutput="ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM"/>
        <testData input="idempotent,"
                  expectedOutput="IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT"/>
        <testData input="ıdempotent,"
                  expectedOutput="IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT"/>
        <testData input="IDEMPOTENT,"
                  expectedOutput="IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT"/>
        <testData input="İDEMPOTENT,"
                  expectedOutput="İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT"/>
        <testData input="﻿,en_US" expectedOutput="﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿"/>
        <testData input="CASES,en_US"
                  expectedOutput="CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES"/>
        <testData input="cases,en_US"
                  expectedOutput="CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES"/>
        <testData input="CaSeS,en_US"
                  expectedOutput="CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES"/>
        <testData input="große,en_US"
                  expectedOutput="GROSSE,
					GROßE,
					GROSSE,
					GROSSE,
					GROSSE,
					GROßE,
					GROSSE,
					GROSSE"/>
        <testData input="ångstrom,en_US"
                  expectedOutput="ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM"/>
        <testData input="ÅNGSTROM,en_US"
                  expectedOutput="ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM"/>
        <testData input="idempotent,en_US"
                  expectedOutput="IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT"/>
        <testData input="ıdempotent,en_US"
                  expectedOutput="IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT"/>
        <testData input="IDEMPOTENT,en_US"
                  expectedOutput="IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT"/>
        <testData input="İDEMPOTENT,en_US"
                  expectedOutput="İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT"/>
        <testData input="﻿,tr_TR" expectedOutput="﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿"/>
        <testData input="CASES,tr_TR"
                  expectedOutput="CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES"/>
        <testData input="cases,tr_TR"
                  expectedOutput="CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES"/>
        <testData input="CaSeS,tr_TR"
                  expectedOutput="CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES"/>
        <testData input="große,tr_TR"
                  expectedOutput="GROSSE,
					GROßE,
					GROSSE,
					GROSSE,
					GROSSE,
					GROßE,
					GROSSE,
					GROSSE"/>
        <testData input="ångstrom,tr_TR"
                  expectedOutput="ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM"/>
        <testData input="ÅNGSTROM,tr_TR"
                  expectedOutput="ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM"/>
        <testData input="idempotent,tr_TR"
                  expectedOutput="İDEMPOTENT,
					IDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					IDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT"/>
        <testData input="ıdempotent,tr_TR"
                  expectedOutput="IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT"/>
        <testData input="IDEMPOTENT,tr_TR"
                  expectedOutput="IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT"/>
        <testData input="İDEMPOTENT,tr_TR"
                  expectedOutput="İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT"/>
        <testData input="CASES,tr"
                  expectedOutput="CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES"/>
        <testData input="cases,tr"
                  expectedOutput="CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES"/>
        <testData input="CaSeS,tr"
                  expectedOutput="CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES,
					CASES"/>
        <testData input="große,tr"
                  expectedOutput="GROSSE,
					GROßE,
					GROSSE,
					GROSSE,
					GROSSE,
					GROßE,
					GROSSE,
					GROSSE"/>
        <testData input="ångstrom,tr"
                  expectedOutput="ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM"/>
        <testData input="ÅNGSTROM,tr"
                  expectedOutput="ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM,
					ÅNGSTROM"/>
        <testData input="idempotent,tr"
                  expectedOutput="İDEMPOTENT,
					IDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					IDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT"/>
        <testData input="ıdempotent,tr"
                  expectedOutput="IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT"/>
        <testData input="IDEMPOTENT,tr"
                  expectedOutput="IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT,
					IDEMPOTENT"/>
        <testData input="İDEMPOTENT,tr"
                  expectedOutput="İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT,
					İDEMPOTENT"/>
    </testcase>
    <testcase testName="testLowerLocale"
              fieldName="testLowerLocale"
              dataType="Text"
              formula="lower(customText1__c,customText2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customText1" dataType="Text"/>
        <referenceField fieldName="customText2" dataType="Text"/>
        <testData input="﻿," expectedOutput="﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿"/>
        <testData input="CASES,"
                  expectedOutput="cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases"/>
        <testData input="cases,"
                  expectedOutput="cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases"/>
        <testData input="CaSeS,"
                  expectedOutput="cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases"/>
        <testData input="große,"
                  expectedOutput="große,
					große,
					große,
					große,
					große,
					große,
					große,
					große"/>
        <testData input="ångstrom,"
                  expectedOutput="ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom"/>
        <testData input="ÅNGSTROM,"
                  expectedOutput="ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom"/>
        <testData input="idempotent,"
                  expectedOutput="idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent"/>
        <testData input="ıdempotent,"
                  expectedOutput="ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent"/>
        <testData input="IDEMPOTENT,"
                  expectedOutput="idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent"/>
        <testData input="İDEMPOTENT,"
                  expectedOutput="i̇dempotent,
					idempotent,
					i̇dempotent,
					i̇dempotent,
					i̇dempotent,
					idempotent,
					i̇dempotent,
					i̇dempotent"/>
        <testData input="﻿,en_US" expectedOutput="﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿"/>
        <testData input="CASES,en_US"
                  expectedOutput="cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases"/>
        <testData input="cases,en_US"
                  expectedOutput="cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases"/>
        <testData input="CaSeS,en_US"
                  expectedOutput="cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases"/>
        <testData input="große,en_US"
                  expectedOutput="große,
					große,
					große,
					große,
					große,
					große,
					große,
					große"/>
        <testData input="ångstrom,en_US"
                  expectedOutput="ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom"/>
        <testData input="ÅNGSTROM,en_US"
                  expectedOutput="ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom"/>
        <testData input="idempotent,en_US"
                  expectedOutput="idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent"/>
        <testData input="ıdempotent,en_US"
                  expectedOutput="ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent"/>
        <testData input="IDEMPOTENT,en_US"
                  expectedOutput="idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent"/>
        <testData input="İDEMPOTENT,en_US"
                  expectedOutput="i̇dempotent,
					idempotent,
					i̇dempotent,
					i̇dempotent,
					i̇dempotent,
					idempotent,
					i̇dempotent,
					i̇dempotent"/>
        <testData input="﻿,tr_TR" expectedOutput="﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿,
					﻿"/>
        <testData input="CASES,tr_TR"
                  expectedOutput="cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases"/>
        <testData input="cases,tr_TR"
                  expectedOutput="cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases"/>
        <testData input="CaSeS,tr_TR"
                  expectedOutput="cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases"/>
        <testData input="große,tr_TR"
                  expectedOutput="große,
					große,
					große,
					große,
					große,
					große,
					große,
					große"/>
        <testData input="ångstrom,tr_TR"
                  expectedOutput="ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom"/>
        <testData input="ÅNGSTROM,tr_TR"
                  expectedOutput="ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom"/>
        <testData input="idempotent,tr_TR"
                  expectedOutput="idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent"/>
        <testData input="ıdempotent,tr_TR"
                  expectedOutput="ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent"/>
        <testData input="IDEMPOTENT,tr_TR"
                  expectedOutput="ıdempotent,
					idempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent,
					idempotent,
					ıdempotent,
					ıdempotent"/>
        <testData input="İDEMPOTENT,tr_TR"
                  expectedOutput="idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent"/>
        <testData input="CASES,tr"
                  expectedOutput="cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases"/>
        <testData input="cases,tr"
                  expectedOutput="cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases"/>
        <testData input="CaSeS,tr"
                  expectedOutput="cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases,
					cases"/>
        <testData input="große,tr"
                  expectedOutput="große,
					große,
					große,
					große,
					große,
					große,
					große,
					große"/>
        <testData input="ångstrom,tr"
                  expectedOutput="ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom"/>
        <testData input="ÅNGSTROM,tr"
                  expectedOutput="ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom,
					ångstrom"/>
        <testData input="idempotent,tr"
                  expectedOutput="idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent"/>
        <testData input="ıdempotent,tr"
                  expectedOutput="ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent"/>
        <testData input="IDEMPOTENT,tr"
                  expectedOutput="ıdempotent,
					idempotent,
					ıdempotent,
					ıdempotent,
					ıdempotent,
					idempotent,
					ıdempotent,
					ıdempotent"/>
        <testData input="İDEMPOTENT,tr"
                  expectedOutput="idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent,
					idempotent"/>
    </testcase>
    <testcase testName="testFindOnText"
              fieldName="testFindOnText"
              dataType="Double"
              formula="FIND(&#34;Text&#34;, customText1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customText1" dataType="Text"/>
        <testData input="Text" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="Hello" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="ConText" expectedOutput="4,
					4,
					4,
					4,
					4,
					4,
					4,
					4"/>
        <testData input="Context" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="&#34;&#34;" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="''" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="%" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
    </testcase>
    <testcase testName="testFindOnTextWithIndex"
              fieldName="testFindOnTextWithIndex"
              dataType="Double"
              formula="FIND(customText1__c, customText2__c, customNumber__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customText1" dataType="Text"/>
        <referenceField fieldName="customText2" dataType="Text"/>
        <referenceField fieldName="customNumber" dataType="Double"/>
        <testData input="-,ABC - XYZ,5" expectedOutput="5,
					5,
					5,
					5,
					5,
					5,
					5,
					5"/>
        <testData input="-,ABC - XYZ,6" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="Test,FTest,1" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="Test,FTest,3" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="Test,FFFFTest,-1" expectedOutput="5,
					5,
					5,
					5,
					5,
					5,
					5,
					5"/>
        <testData input="Test,FFFFTest,5" expectedOutput="5,
					5,
					5,
					5,
					5,
					5,
					5,
					5"/>
        <testData input="Test,FTest,0" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="-,ABC - XYZ,10" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="%,Foo%Foo,2" expectedOutput="4,
					4,
					4,
					4,
					4,
					4,
					4,
					4"/>
    </testcase>
    <testcase testName="testNullCompareWithEmptyString"
              fieldName="testNullCompareWithEmptyString"
              dataType="Boolean"
              formula="customText1__c = ''"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customText1" dataType="Text"/>
        <testData input="Text"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="Hello"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="ConText"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="Context"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="&#34;&#34;"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="''"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=""
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="%"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
    </testcase>
    <testcase testName="testNullNotEqualEmptyString"
              fieldName="testNullNotEqualEmptyString"
              dataType="Boolean"
              formula="customText1__c != ''"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customText1" dataType="Text"/>
        <testData input="Text"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="Hello"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="ConText"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="Context"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="&#34;&#34;"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="''"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input=""
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="%"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
    </testcase>
    <testcase testName="testAddHoursWithTwoCustFields"
              fieldName="testAddHoursWithTwoCustFields"
              dataType="TimeOnly"
              formula="TimeValue(timeString__c) + customnumber1__c"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="timeString" dataType="Text"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="10:34:55.666, 10800000"
                  expectedOutput="13:34:55.666,
					13:34:55.666,
					13:34:55.666,
					13:34:55.666,
					13:34:55.666,
					13:34:55.666,
					13:34:55.666,
					13:34:55.666"/>
        <testData input="23:56:45.898, -3600000"
                  expectedOutput="22:56:45.898,
					22:56:45.898,
					22:56:45.898,
					22:56:45.898,
					22:56:45.898,
					22:56:45.898,
					22:56:45.898,
					22:56:45.898"/>
        <testData input="01:14:23.345,"
                  expectedOutput="01:14:23.345,
					01:14:23.345,
					01:14:23.345,
					01:14:23.345,
					null,
					null,
					null,
					null"/>
        <testData input="01:66:29.345, 0"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					00:00,
					00:00,
					Error: com.force.formula.FormulaDateException,
					null,
					00:00,
					00:00"/>
        <testData input="00:00:00.123, 5400000"
                  expectedOutput="01:30:00.123,
					01:30:00.123,
					01:30:00.123,
					01:30:00.123,
					01:30:00.123,
					01:30:00.123,
					01:30:00.123,
					01:30:00.123"/>
        <testData input="00:00:00.789, -6300000"
                  expectedOutput="Error: java.time.DateTimeException,
					22:15:00.789,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -6299211000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -6299211000000,
					Error: java.time.DateTimeException,
					22:15:00.789,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -6299211000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -6299211000000"/>
        <testData input="10:34:55.666, 1080000000"
                  expectedOutput="22:34:55.666,
					22:34:55.666,
					22:34:55.666,
					22:34:55.666,
					22:34:55.666,
					22:34:55.666,
					22:34:55.666,
					22:34:55.666"/>
        <testData input="01:34:55.666, -1441800000"
                  expectedOutput="Error: java.time.DateTimeException,
					09:04:55.666,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -53704334000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -53704334000000,
					Error: java.time.DateTimeException,
					09:04:55.666,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -53704334000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -53704334000000"/>
        <testData input="00:00:00.001, -2"
                  expectedOutput="Error: java.time.DateTimeException,
					23:59:59.999,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -1000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -1000000,
					Error: java.time.DateTimeException,
					23:59:59.999,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -1000000,
					Error: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -1000000"/>
        <testData input="11:59:59.999, 2"
                  expectedOutput="12:00:00.001,
					12:00:00.001,
					12:00:00.001,
					12:00:00.001,
					12:00:00.001,
					12:00:00.001,
					12:00:00.001,
					12:00:00.001"/>
    </testcase>
    <testcase testName="testSubtractTwoTimeFields"
              fieldName="testSubtractTwoTimeFields"
              dataType="Double"
              formula="TimeValue(timeString2__c) - TimeValue(timeString1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="timeString1" dataType="Text"/>
        <referenceField fieldName="timeString2" dataType="Text"/>
        <testData input="10:34:55.666,23:59:59.999"
                  expectedOutput="48304333,
					48304333,
					48304333,
					48304333,
					48304333,
					48304333,
					48304333,
					48304333"/>
        <testData input="23:59:59.999,10:34:55.666"
                  expectedOutput="38095667,
					38095667,
					38095667,
					38095667,
					38095667,
					38095667,
					38095667,
					38095667"/>
        <testData input="23:56:45.898,01:00:00.000"
                  expectedOutput="3794102,
					3794102,
					3794102,
					3794102,
					3794102,
					3794102,
					3794102,
					3794102"/>
        <testData input="01:00:00.000,23:56:45.898"
                  expectedOutput="82605898,
					82605898,
					82605898,
					82605898,
					82605898,
					82605898,
					82605898,
					82605898"/>
        <testData input="00:00:29.345,00:00:29.245"
                  expectedOutput="86399900,
					86399900,
					86399900,
					86399900,
					86399900,
					86399900,
					86399900,
					86399900"/>
        <testData input="00:00:29.245,00:00:29.345"
                  expectedOutput="100,
					100,
					100,
					100,
					100,
					100,
					100,
					100"/>
        <testData input="00:00:00.000,01:00:00.000"
                  expectedOutput="3600000,
					3600000,
					3600000,
					3600000,
					3600000,
					3600000,
					3600000,
					3600000"/>
        <testData input="01:00:00.000,00:00:00.000"
                  expectedOutput="82800000,
					82800000,
					82800000,
					82800000,
					82800000,
					82800000,
					82800000,
					82800000"/>
        <testData input="01:00:00.000,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",01:00:00.000"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="01:00:00.000,01:66:29.345"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					82800000,
					82800000,
					Error: com.force.formula.FormulaDateException,
					null,
					82800000,
					82800000"/>
        <testData input="01:66:29.345,01:00:00.000"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					3600000,
					3600000,
					Error: com.force.formula.FormulaDateException,
					null,
					3600000,
					3600000"/>
        <testData input="01:00:00.000,00:00:29.590"
                  expectedOutput="82829590,
					82829590,
					82829590,
					82829590,
					82829590,
					82829590,
					82829590,
					82829590"/>
        <testData input="01:00:00.000,00:00:30.000"
                  expectedOutput="82830000,
					82830000,
					82830000,
					82830000,
					82830000,
					82830000,
					82830000,
					82830000"/>
        <testData input="00:00:29.590,00:00:00.000"
                  expectedOutput="86370410,
					86370410,
					86370410,
					86370410,
					86370410,
					86370410,
					86370410,
					86370410"/>
        <testData input="00:00:30.000,00:00:00.000"
                  expectedOutput="86370000,
					86370000,
					86370000,
					86370000,
					86370000,
					86370000,
					86370000,
					86370000"/>
    </testcase>
    <testcase testName="testDistance"
              fieldName="testDistance"
              dataType="Double"
              formula="DISTANCE(GEOLOCATION(customNumber1__c,customNumber2__c),GEOLOCATION(33.37088,-122.61715),'mi')"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customNumber1" dataType="Double"/>
        <referenceField fieldName="customNumber2" dataType="Double"/>
        <testData input=","
                  expectedOutput="8066.8974274546545,
					8066.89742745465,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="0.0,0.0"
                  expectedOutput="8066.8974274546545,
					8066.89742745465,
					null,
					null,
					8066.8974274546545,
					8066.89742745465,
					null,
					null"/>
        <testData input="0.0,"
                  expectedOutput="8066.8974274546545,
					8066.89742745465,
					null,
					null,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					null,
					null"/>
        <testData input=",0.0"
                  expectedOutput="8066.8974274546545,
					8066.89742745465,
					null,
					null,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					null,
					null"/>
        <testData input="43.094722,-75.275833"
                  expectedOutput="2618.9134586986042,
					2618.9134586986,
					null,
					null,
					2618.9134586986042,
					2618.9134586986,
					null,
					null"/>
        <testData input="200,200"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					null,
					null,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					null,
					null"/>
        <testData input="-200,-200"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					null,
					null,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					null,
					null"/>
        <testData input="37.7899,-122.3969"
                  expectedOutput="305.57560898133903,
					305.575608981339,
					null,
					null,
					305.57560898133903,
					305.575608981339,
					null,
					null"/>
    </testcase>
    <testcase testName="testFormatCurrency"
              fieldName="testFormatCurrency"
              dataType="Text"
              formula="FORMATCURRENCY(isocode__c, customNumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="isocode" dataType="Text"/>
        <referenceField fieldName="customNumber1" dataType="Double"/>
        <testData input="USD,1000"
                  expectedOutput="USD 1\,000.00,
					USD 1\,000.00,
					USD 1\,000.00,
					USD 1\,000.00,
					USD 1\,000.00,
					USD 1\,000.00,
					USD 1\,000.00,
					USD 1\,000.00"/>
        <testData input="USD,1000.495"
                  expectedOutput="USD 1\,000.50,
					USD 1\,000.50,
					USD 1\,000.50,
					USD 1\,000.50,
					USD 1\,000.50,
					USD 1\,000.50,
					USD 1\,000.50,
					USD 1\,000.50"/>
        <testData input="USD,-1000"
                  expectedOutput="USD -1\,000.00,
					USD -1\,000.00,
					-USD 1\,000.00,
					-USD 1\,000.00,
					USD -1\,000.00,
					USD -1\,000.00,
					-USD 1\,000.00,
					-USD 1\,000.00"/>
        <testData input="USD,-1000.495"
                  expectedOutput="USD -1\,000.50,
					USD -1\,000.50,
					-USD 1\,000.50,
					-USD 1\,000.50,
					USD -1\,000.50,
					USD -1\,000.50,
					-USD 1\,000.50,
					-USD 1\,000.50"/>
        <testData input="JPY,500"
                  expectedOutput="JPY 500,
					JPY 500,
					JPY 500,
					JPY 500,
					JPY 500,
					JPY 500,
					JPY 500,
					JPY 500"/>
        <testData input="JPY,999999999"
                  expectedOutput="JPY 999\,999\,999,
					JPY 999\,999\,999,
					JPY 999\,999\,999,
					JPY 999\,999\,999,
					JPY 999\,999\,999,
					JPY 999\,999\,999,
					JPY 999\,999\,999,
					JPY 999\,999\,999"/>
        <testData input="INR,999999999"
                  expectedOutput="INR 999\,999\,999.00,
					INR 999\,999\,999.00,
					INR 999\,999\,999.00,
					INR 999\,999\,999.00,
					INR 999\,999\,999.00,
					INR 999\,999\,999.00,
					INR 999\,999\,999.00,
					INR 999\,999\,999.00"/>
        <testData input="KWD,15.10"
                  expectedOutput="KWD 15.100,
					KWD 15.100,
					KWD 15.100,
					KWD 15.100,
					KWD 15.100,
					KWD 15.100,
					KWD 15.100,
					KWD 15.100"/>
        <testData input=",1000"
                  expectedOutput=" 1\,000.00,
					1\,000.00,
					1\,000.00,
					1\,000.00,
					1\,000.00,
					1\,000.00,
					1\,000.00,
					1\,000.00"/>
        <testData input=",-1000"
                  expectedOutput=" -1\,000.00,
					-1\,000.00,
					-1\,000.00,
					-1\,000.00,
					-1\,000.00,
					-1\,000.00,
					-1\,000.00,
					-1\,000.00"/>
        <testData input="JPY,-999999999"
                  expectedOutput="JPY -999\,999\,999,
					JPY -999\,999\,999,
					-JPY 999\,999\,999,
					-JPY 999\,999\,999,
					JPY -999\,999\,999,
					JPY -999\,999\,999,
					-JPY 999\,999\,999,
					-JPY 999\,999\,999"/>
        <testData input="INR,-999999999"
                  expectedOutput="INR -999\,999\,999.00,
					INR -999\,999\,999.00,
					-INR 999\,999\,999.00,
					-INR 999\,999\,999.00,
					INR -999\,999\,999.00,
					INR -999\,999\,999.00,
					-INR 999\,999\,999.00,
					-INR 999\,999\,999.00"/>
        <testData input="KWD,-15.10"
                  expectedOutput="KWD -15.100,
					KWD -15.100,
					-KWD 15.100,
					-KWD 15.100,
					KWD -15.100,
					KWD -15.100,
					-KWD 15.100,
					-KWD 15.100"/>
    </testcase>
    <testcase testName="testIfTextCompareLessThan"
              fieldName="testIfTextCompareLessThan"
              dataType="Boolean"
              formula="text1__c&lt;text2__c"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="text1" dataType="Text"/>
        <referenceField fieldName="text2" dataType="Text"/>
        <testData input="foo,"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=",foo"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=","
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="foo,foo"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="FOO,foo"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="foo,FOO"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="Foo,Bar"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="Left,Right"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="Left, Left"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="1,2"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="ß,ss"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
    </testcase>
    <testcase testName="testIfTextCompareGreaterThan"
              fieldName="testIfTextCompareGreaterThan"
              dataType="Boolean"
              formula="text1__c&gt;text2__c"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="text1" dataType="Text"/>
        <referenceField fieldName="text2" dataType="Text"/>
        <testData input="foo,"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=",foo"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=","
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="foo,foo"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="FOO,foo"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="foo,FOO"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="Foo,Bar"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="Left,Right"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="Left, Left"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="1,2"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="ß,ss"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
    </testcase>
    <testcase testName="testIfTextCompareLessEqual"
              fieldName="testIfTextCompareLessEqual"
              dataType="Boolean"
              formula="text1__c&lt;=text2__c"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="text1" dataType="Text"/>
        <referenceField fieldName="text2" dataType="Text"/>
        <testData input="foo,"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=",foo"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=","
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="foo,foo"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="FOO,foo"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="foo,FOO"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="Foo,Bar"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="Left,Right"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="Left, Left"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="1,2"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="ß,ss"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
    </testcase>
    <testcase testName="testIfTextCompareGreaterEqual"
              fieldName="testIfTextCompareGreaterEqual"
              dataType="Boolean"
              formula="text1__c&gt;=text2__c"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="text1" dataType="Text"/>
        <referenceField fieldName="text2" dataType="Text"/>
        <testData input="foo,"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=",foo"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=","
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="foo,foo"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="FOO,foo"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="foo,FOO"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="Foo,Bar"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="Left,Right"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="Left, Left"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="1,2"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="ß,ss"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
    </testcase>
    <testcase testName="testFormatDurationTime"
              fieldName="testFormatDurationTime"
              dataType="Text"
              formula="FORMATDURATION(TimeValue(timeString2__c),TimeValue(timeString1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="timeString1" dataType="Text"/>
        <referenceField fieldName="timeString2" dataType="Text"/>
        <testData input="10:34:55.666,23:59:59.999"
                  expectedOutput="13:25:04,
					13:25:04,
					13:25:04,
					13:25:04,
					13:25:04,
					13:25:04,
					13:25:04,
					13:25:04"/>
        <testData input="23:59:59.999,10:34:55.666"
                  expectedOutput="13:25:04,
					13:25:04,
					13:25:04,
					13:25:04,
					13:25:04,
					13:25:04,
					13:25:04,
					13:25:04"/>
        <testData input="23:56:45.898,01:00:00.000"
                  expectedOutput="22:56:45,
					22:56:45,
					22:56:45,
					22:56:45,
					22:56:45,
					22:56:45,
					22:56:45,
					22:56:45"/>
        <testData input="01:00:00.000,23:56:45.898"
                  expectedOutput="22:56:45,
					22:56:45,
					22:56:45,
					22:56:45,
					22:56:45,
					22:56:45,
					22:56:45,
					22:56:45"/>
        <testData input="00:00:29.345,00:00:29.245"
                  expectedOutput="00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00"/>
        <testData input="00:00:29.245,00:00:29.345"
                  expectedOutput="00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00"/>
        <testData input="00:00:00.000,01:00:00.000"
                  expectedOutput="01:00:00,
					01:00:00,
					01:00:00,
					01:00:00,
					01:00:00,
					01:00:00,
					01:00:00,
					01:00:00"/>
        <testData input="01:00:00.000,00:00:00.000"
                  expectedOutput="01:00:00,
					01:00:00,
					01:00:00,
					01:00:00,
					01:00:00,
					01:00:00,
					01:00:00,
					01:00:00"/>
        <testData input="01:00:00.000,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",01:00:00.000"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="01:00:00.000,01:66:29.345"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					01:00:00,
					01:00:00,
					Error: com.force.formula.FormulaDateException,
					null,
					01:00:00,
					01:00:00"/>
        <testData input="01:66:29.345,01:00:00.000"
                  expectedOutput="Error: com.force.formula.FormulaDateException,
					null,
					01:00:00,
					01:00:00,
					Error: com.force.formula.FormulaDateException,
					null,
					01:00:00,
					01:00:00"/>
        <testData input="01:00:00.000,00:00:29.590"
                  expectedOutput="00:59:30,
					00:59:30,
					00:59:30,
					00:59:30,
					00:59:30,
					00:59:30,
					00:59:30,
					00:59:30"/>
        <testData input="01:00:00.000,00:00:30.000"
                  expectedOutput="00:59:30,
					00:59:30,
					00:59:30,
					00:59:30,
					00:59:30,
					00:59:30,
					00:59:30,
					00:59:30"/>
        <testData input="00:00:29.590,00:00:00.000"
                  expectedOutput="00:00:29,
					00:00:29,
					00:00:29,
					00:00:29,
					00:00:29,
					00:00:29,
					00:00:29,
					00:00:29"/>
        <testData input="00:00:30.000,00:00:00.000"
                  expectedOutput="00:00:30,
					00:00:30,
					00:00:30,
					00:00:30,
					00:00:30,
					00:00:30,
					00:00:30,
					00:00:30"/>
    </testcase>
    <testcase testName="testFormatDurationDateTime"
              fieldName="testFormatDurationDateTime"
              dataType="Text"
              formula="FORMATDURATION(customdatetime2__c,customdatetime1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdatetime1" dataType="DateTime"/>
        <referenceField fieldName="customdatetime2" dataType="DateTime"/>
        <testData input="2004:12:31:11:32:00,2004:12:31:11:30:00"
                  expectedOutput="0:00:02:00,
					0:00:02:00,
					0:00:02:00,
					0:00:02:00,
					0:00:02:00,
					0:00:02:00,
					0:00:02:00,
					0:00:02:00"/>
        <testData input="2004:02:28:10:34:00,2008:02:28:10:34:00"
                  expectedOutput="1461:00:00:00,
					1461:00:00:00,
					1461:00:00:00,
					1461:00:00:00,
					1461:00:00:00,
					1461:00:00:00,
					1461:00:00:00,
					1461:00:00:00"/>
        <testData input="2004:12:31:11:30:00,2004:12:31:11:32:00"
                  expectedOutput="0:00:02:00,
					0:00:02:00,
					0:00:02:00,
					0:00:02:00,
					0:00:02:00,
					0:00:02:00,
					0:00:02:00,
					0:00:02:00"/>
        <testData input="2004:02:28:10:34:00,2004:03:01:00:00:00"
                  expectedOutput="1:13:26:00,
					1:13:26:00,
					1:13:26:00,
					1:13:26:00,
					1:13:26:00,
					1:13:26:00,
					1:13:26:00,
					1:13:26:00"/>
        <testData input=",2004:12:31:11:32:00"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2004:02:28:10:34:00,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=","
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="3999:02:28:10:34:00,1780:02:28:10:34:00"
                  expectedOutput="810473:00:00:00,
					810473:00:00:00,
					810473:00:00:00,
					810473:00:00:00,
					810473:00:00:00,
					810473:00:00:00,
					810473:00:00:00,
					810473:00:00:00"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:00:00"
                  expectedOutput="0:00:30:00,
					0:00:30:00,
					0:00:30:00,
					0:00:30:00,
					0:00:30:00,
					0:00:30:00,
					0:00:30:00,
					0:00:30:00"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:15:00"
                  expectedOutput="0:00:15:00,
					0:00:15:00,
					0:00:15:00,
					0:00:15:00,
					0:00:15:00,
					0:00:15:00,
					0:00:15:00,
					0:00:15:00"/>
        <testData input="2022:08:21:08:29:00,2022:08:21:08:00:00"
                  expectedOutput="0:00:29:00,
					0:00:29:00,
					0:00:29:00,
					0:00:29:00,
					0:00:29:00,
					0:00:29:00,
					0:00:29:00,
					0:00:29:00"/>
    </testcase>
    <testcase testName="testFormatDurationSecondsBool"
              fieldName="testFormatDurationSecondsBool"
              dataType="Text"
              formula="FORMATDURATION(customNumber1__c, customcheckbox1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customNumber1" dataType="Double"/>
        <referenceField fieldName="customcheckbox1" dataType="Boolean"/>
        <testData input=","
                  expectedOutput="00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					null,
					null,
					null,
					null"/>
        <testData input=",TRUE"
                  expectedOutput="0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					null,
					null,
					null,
					null"/>
        <testData input=",FALSE"
                  expectedOutput="00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					null,
					null,
					null,
					null"/>
        <testData input="0.0,TRUE"
                  expectedOutput="0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					0:00:00:00"/>
        <testData input="0.0,FALSE"
                  expectedOutput="00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00"/>
        <testData input="0.0,"
                  expectedOutput="00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00"/>
        <testData input="24,TRUE"
                  expectedOutput="0:00:00:24,
					0:00:00:24,
					0:00:00:24,
					0:00:00:24,
					0:00:00:24,
					0:00:00:24,
					0:00:00:24,
					0:00:00:24"/>
        <testData input="24,FALSE"
                  expectedOutput="00:00:24,
					00:00:24,
					00:00:24,
					00:00:24,
					00:00:24,
					00:00:24,
					00:00:24,
					00:00:24"/>
        <testData input=".99,TRUE"
                  expectedOutput="0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					0:00:00:00"/>
        <testData input=".99,FALSE"
                  expectedOutput="00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00"/>
        <testData input="86400,TRUE"
                  expectedOutput="1:00:00:00,
					1:00:00:00,
					1:00:00:00,
					1:00:00:00,
					1:00:00:00,
					1:00:00:00,
					1:00:00:00,
					1:00:00:00"/>
        <testData input="86400,FALSE"
                  expectedOutput="24:00:00,
					24:00:00,
					24:00:00,
					24:00:00,
					24:00:00,
					24:00:00,
					24:00:00,
					24:00:00"/>
        <testData input="1000000,TRUE"
                  expectedOutput="11:13:46:40,
					11:13:46:40,
					11:13:46:40,
					11:13:46:40,
					11:13:46:40,
					11:13:46:40,
					11:13:46:40,
					11:13:46:40"/>
        <testData input="1000000,FALSE"
                  expectedOutput="277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40"/>
        <testData input="-1000000,TRUE"
                  expectedOutput="11:13:46:40,
					11:13:46:40,
					11:13:46:40,
					11:13:46:40,
					11:13:46:40,
					11:13:46:40,
					11:13:46:40,
					11:13:46:40"/>
        <testData input="-1000000,FALSE"
                  expectedOutput="277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40"/>
        <testData input="15,TRUE"
                  expectedOutput="0:00:00:15,
					0:00:00:15,
					0:00:00:15,
					0:00:00:15,
					0:00:00:15,
					0:00:00:15,
					0:00:00:15,
					0:00:00:15"/>
        <testData input="15,FALSE"
                  expectedOutput="00:00:15,
					00:00:15,
					00:00:15,
					00:00:15,
					00:00:15,
					00:00:15,
					00:00:15,
					00:00:15"/>
        <testData input="30,TRUE"
                  expectedOutput="0:00:00:30,
					0:00:00:30,
					0:00:00:30,
					0:00:00:30,
					0:00:00:30,
					0:00:00:30,
					0:00:00:30,
					0:00:00:30"/>
        <testData input="30,FALSE"
                  expectedOutput="00:00:30,
					00:00:30,
					00:00:30,
					00:00:30,
					00:00:30,
					00:00:30,
					00:00:30,
					00:00:30"/>
        <testData input="29.59,FALSE"
                  expectedOutput="00:00:29,
					00:00:29,
					00:00:29,
					00:00:29,
					00:00:29,
					00:00:29,
					00:00:29,
					00:00:29"/>
        <testData input="29.59,TRUE"
                  expectedOutput="0:00:00:29,
					0:00:00:29,
					0:00:00:29,
					0:00:00:29,
					0:00:00:29,
					0:00:00:29,
					0:00:00:29,
					0:00:00:29"/>
        <testData input="29.99,FALSE"
                  expectedOutput="00:00:29,
					00:00:29,
					00:00:29,
					00:00:29,
					00:00:29,
					00:00:29,
					00:00:29,
					00:00:29"/>
        <testData input="29.99,TRUE"
                  expectedOutput="0:00:00:29,
					0:00:00:29,
					0:00:00:29,
					0:00:00:29,
					0:00:00:29,
					0:00:00:29,
					0:00:00:29,
					0:00:00:29"/>
    </testcase>
    <testcase testName="testFormatDurationSeconds"
              fieldName="testFormatDurationSeconds"
              dataType="Text"
              formula="FORMATDURATION(customNumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customNumber1" dataType="Double"/>
        <testData input=""
                  expectedOutput="00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					null,
					null,
					null,
					null"/>
        <testData input="0.0"
                  expectedOutput="00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00"/>
        <testData input="24"
                  expectedOutput="00:00:24,
					00:00:24,
					00:00:24,
					00:00:24,
					00:00:24,
					00:00:24,
					00:00:24,
					00:00:24"/>
        <testData input=".99"
                  expectedOutput="00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00"/>
        <testData input="86400"
                  expectedOutput="24:00:00,
					24:00:00,
					24:00:00,
					24:00:00,
					24:00:00,
					24:00:00,
					24:00:00,
					24:00:00"/>
        <testData input="1000000"
                  expectedOutput="277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40"/>
        <testData input="-1000000"
                  expectedOutput="277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40"/>
        <testData input="15"
                  expectedOutput="00:00:15,
					00:00:15,
					00:00:15,
					00:00:15,
					00:00:15,
					00:00:15,
					00:00:15,
					00:00:15"/>
        <testData input="30"
                  expectedOutput="00:00:30,
					00:00:30,
					00:00:30,
					00:00:30,
					00:00:30,
					00:00:30,
					00:00:30,
					00:00:30"/>
        <testData input="29.59"
                  expectedOutput="00:00:29,
					00:00:29,
					00:00:29,
					00:00:29,
					00:00:29,
					00:00:29,
					00:00:29,
					00:00:29"/>
    </testcase>
    <testcase testName="testFormatDurationWithTrue"
              fieldName="testFormatDurationWithTrue"
              dataType="Text"
              formula="FORMATDURATION(customNumber1__c,TRUE)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customNumber1" dataType="Double"/>
        <testData input=""
                  expectedOutput="0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					null,
					null,
					null,
					null"/>
        <testData input="0.0"
                  expectedOutput="0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					0:00:00:00"/>
        <testData input="24"
                  expectedOutput="0:00:00:24,
					0:00:00:24,
					0:00:00:24,
					0:00:00:24,
					0:00:00:24,
					0:00:00:24,
					0:00:00:24,
					0:00:00:24"/>
        <testData input=".99"
                  expectedOutput="0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					0:00:00:00,
					0:00:00:00"/>
        <testData input="86400"
                  expectedOutput="1:00:00:00,
					1:00:00:00,
					1:00:00:00,
					1:00:00:00,
					1:00:00:00,
					1:00:00:00,
					1:00:00:00,
					1:00:00:00"/>
        <testData input="1000000"
                  expectedOutput="11:13:46:40,
					11:13:46:40,
					11:13:46:40,
					11:13:46:40,
					11:13:46:40,
					11:13:46:40,
					11:13:46:40,
					11:13:46:40"/>
        <testData input="-1000000"
                  expectedOutput="11:13:46:40,
					11:13:46:40,
					11:13:46:40,
					11:13:46:40,
					11:13:46:40,
					11:13:46:40,
					11:13:46:40,
					11:13:46:40"/>
        <testData input="15"
                  expectedOutput="0:00:00:15,
					0:00:00:15,
					0:00:00:15,
					0:00:00:15,
					0:00:00:15,
					0:00:00:15,
					0:00:00:15,
					0:00:00:15"/>
        <testData input="30"
                  expectedOutput="0:00:00:30,
					0:00:00:30,
					0:00:00:30,
					0:00:00:30,
					0:00:00:30,
					0:00:00:30,
					0:00:00:30,
					0:00:00:30"/>
        <testData input="29.59"
                  expectedOutput="0:00:00:29,
					0:00:00:29,
					0:00:00:29,
					0:00:00:29,
					0:00:00:29,
					0:00:00:29,
					0:00:00:29,
					0:00:00:29"/>
    </testcase>
    <testcase testName="testFormatDurationWithFalse"
              fieldName="testFormatDurationWithFalse"
              dataType="Text"
              formula="FORMATDURATION(customNumber1__c,FALSE)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customNumber1" dataType="Double"/>
        <testData input=""
                  expectedOutput="00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					null,
					null,
					null,
					null"/>
        <testData input="0.0"
                  expectedOutput="00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00"/>
        <testData input="24"
                  expectedOutput="00:00:24,
					00:00:24,
					00:00:24,
					00:00:24,
					00:00:24,
					00:00:24,
					00:00:24,
					00:00:24"/>
        <testData input=".99"
                  expectedOutput="00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00,
					00:00:00"/>
        <testData input="86400"
                  expectedOutput="24:00:00,
					24:00:00,
					24:00:00,
					24:00:00,
					24:00:00,
					24:00:00,
					24:00:00,
					24:00:00"/>
        <testData input="1000000"
                  expectedOutput="277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40"/>
        <testData input="-1000000"
                  expectedOutput="277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40,
					277:46:40"/>
        <testData input="15"
                  expectedOutput="00:00:15,
					00:00:15,
					00:00:15,
					00:00:15,
					00:00:15,
					00:00:15,
					00:00:15,
					00:00:15"/>
        <testData input="30"
                  expectedOutput="00:00:30,
					00:00:30,
					00:00:30,
					00:00:30,
					00:00:30,
					00:00:30,
					00:00:30,
					00:00:30"/>
        <testData input="29.59"
                  expectedOutput="00:00:29,
					00:00:29,
					00:00:29,
					00:00:29,
					00:00:29,
					00:00:29,
					00:00:29,
					00:00:29"/>
    </testcase>
    <testcase testName="testIfErrorDateTimeValueWithInvalidString"
              fieldName="testIfErrorDateTimeValueWithInvalidString"
              dataType="DateOnly"
              formula="IFERROR(DATETIMEVALUE(&#34;sample &#34;),DATETIMEVALUE(&#34;2005-11-15 17:00:00 &#34;))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <testData expectedOutput="Tue Nov 15 17:00:00 GMT 2005,
					2005-11-15 17:00:00.0,
					Tue Nov 15 17:00:00 GMT 2005,
					Tue Nov 15 17:00:00 GMT 2005,
					Tue Nov 15 17:00:00 GMT 2005,
					2005-11-15 17:00:00.0,
					Tue Nov 15 17:00:00 GMT 2005,
					Tue Nov 15 17:00:00 GMT 2005"/>
    </testcase>
    <testcase testName="testIfErrorDateTimeValueWithValidInValid"
              fieldName="testIfErrorDateTimeValueWithValidInValid"
              dataType="DateOnly"
              formula="IFERROR(DATETIMEVALUE(dateString__c),DATETIMEVALUE(&#34;2005-11-15 17:00:00 &#34;))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="dateString" dataType="Text"/>
        <testData input="2011-01-29 00:00:09"
                  expectedOutput="Sat Jan 29 00:00:09 GMT 2011,
					2011-01-29 00:00:09.0,
					Sat Jan 29 00:00:09 GMT 2011,
					Sat Jan 29 00:00:09 GMT 2011,
					Sat Jan 29 00:00:09 GMT 2011,
					2011-01-29 00:00:09.0,
					Sat Jan 29 00:00:09 GMT 2011,
					Sat Jan 29 00:00:09 GMT 2011"/>
        <testData input="2011-01-9 00:00:09"
                  expectedOutput="Sun Jan 09 00:00:09 GMT 2011,
					2011-01-09 00:00:09.0,
					Sun Jan 09 00:00:09 GMT 2011,
					Sun Jan 09 00:00:09 GMT 2011,
					Sun Jan 09 00:00:09 GMT 2011,
					2011-01-09 00:00:09.0,
					Sun Jan 09 00:00:09 GMT 2011,
					Sun Jan 09 00:00:09 GMT 2011"/>
        <testData input="2011-1-29 00:00:00"
                  expectedOutput="Sat Jan 29 00:00:00 GMT 2011,
					2011-01-29 00:00:00.0,
					Sat Jan 29 00:00:00 GMT 2011,
					Sat Jan 29 00:00:00 GMT 2011,
					Sat Jan 29 00:00:00 GMT 2011,
					2011-01-29 00:00:00.0,
					Sat Jan 29 00:00:00 GMT 2011,
					Sat Jan 29 00:00:00 GMT 2011"/>
        <testData input="2011-1-1 00:00:00"
                  expectedOutput="Sat Jan 01 00:00:00 GMT 2011,
					2011-01-01 00:00:00.0,
					Sat Jan 01 00:00:00 GMT 2011,
					Sat Jan 01 00:00:00 GMT 2011,
					Sat Jan 01 00:00:00 GMT 2011,
					2011-01-01 00:00:00.0,
					Sat Jan 01 00:00:00 GMT 2011,
					Sat Jan 01 00:00:00 GMT 2011"/>
        <testData input="2011-01-1 1:00:00"
                  expectedOutput="Sat Jan 01 01:00:00 GMT 2011,
					2011-01-01 01:00:00.0,
					Sat Jan 01 01:00:00 GMT 2011,
					Sat Jan 01 01:00:00 GMT 2011,
					Sat Jan 01 01:00:00 GMT 2011,
					2011-01-01 01:00:00.0,
					Sat Jan 01 01:00:00 GMT 2011,
					Sat Jan 01 01:00:00 GMT 2011"/>
        <testData input="2011-1-23 2:22:59"
                  expectedOutput="Sun Jan 23 02:22:59 GMT 2011,
					2011-01-23 02:22:59.0,
					Sun Jan 23 02:22:59 GMT 2011,
					Sun Jan 23 02:22:59 GMT 2011,
					Sun Jan 23 02:22:59 GMT 2011,
					2011-01-23 02:22:59.0,
					Sun Jan 23 02:22:59 GMT 2011,
					Sun Jan 23 02:22:59 GMT 2011"/>
        <testData input="2012-2-7 5:22:33"
                  expectedOutput="Tue Feb 07 05:22:33 GMT 2012,
					2012-02-07 05:22:33.0,
					Tue Feb 07 05:22:33 GMT 2012,
					Tue Feb 07 05:22:33 GMT 2012,
					Tue Feb 07 05:22:33 GMT 2012,
					2012-02-07 05:22:33.0,
					Tue Feb 07 05:22:33 GMT 2012,
					Tue Feb 07 05:22:33 GMT 2012"/>
        <testData input="2011-13-29 00:00:09"
                  expectedOutput="Tue Nov 15 17:00:00 GMT 2005,
					2005-11-15 17:00:00.0,
					Tue Nov 15 17:00:00 GMT 2005,
					Tue Nov 15 17:00:00 GMT 2005,
					Tue Nov 15 17:00:00 GMT 2005,
					2005-11-15 17:00:00.0,
					Tue Nov 15 17:00:00 GMT 2005,
					Tue Nov 15 17:00:00 GMT 2005"/>
        <testData input="2012:02:02"
                  expectedOutput="Tue Nov 15 17:00:00 GMT 2005,
					2005-11-15 17:00:00.0,
					Tue Nov 15 17:00:00 GMT 2005,
					Tue Nov 15 17:00:00 GMT 2005,
					Tue Nov 15 17:00:00 GMT 2005,
					2005-11-15 17:00:00.0,
					Tue Nov 15 17:00:00 GMT 2005,
					Tue Nov 15 17:00:00 GMT 2005"/>
        <testData input="2012-01-01 24:00:00"
                  expectedOutput="Tue Nov 15 17:00:00 GMT 2005,
					2005-11-15 17:00:00.0,
					Mon Jan 02 00:00:00 GMT 2012,
					Mon Jan 02 00:00:00 GMT 2012,
					Tue Nov 15 17:00:00 GMT 2005,
					2005-11-15 17:00:00.0,
					Mon Jan 02 00:00:00 GMT 2012,
					Mon Jan 02 00:00:00 GMT 2012"/>
        <testData input="2012-01-01 23:60:00"
                  expectedOutput="Tue Nov 15 17:00:00 GMT 2005,
					2005-11-15 17:00:00.0,
					Tue Nov 15 17:00:00 GMT 2005,
					Tue Nov 15 17:00:00 GMT 2005,
					Tue Nov 15 17:00:00 GMT 2005,
					2005-11-15 17:00:00.0,
					Tue Nov 15 17:00:00 GMT 2005,
					Tue Nov 15 17:00:00 GMT 2005"/>
        <testData input="2012-01-01 23:00:60"
                  expectedOutput="Tue Nov 15 17:00:00 GMT 2005,
					2005-11-15 17:00:00.0,
					Tue Nov 15 17:00:00 GMT 2005,
					Tue Nov 15 17:00:00 GMT 2005,
					Tue Nov 15 17:00:00 GMT 2005,
					2005-11-15 17:00:00.0,
					Tue Nov 15 17:00:00 GMT 2005,
					Tue Nov 15 17:00:00 GMT 2005"/>
        <testData input="2012-01-01 23:59:59"
                  expectedOutput="Sun Jan 01 23:59:59 GMT 2012,
					2012-01-01 23:59:59.0,
					Sun Jan 01 23:59:59 GMT 2012,
					Sun Jan 01 23:59:59 GMT 2012,
					Sun Jan 01 23:59:59 GMT 2012,
					2012-01-01 23:59:59.0,
					Sun Jan 01 23:59:59 GMT 2012,
					Sun Jan 01 23:59:59 GMT 2012"/>
        <testData input="2012-10-34 00:00:00"
                  expectedOutput="Tue Nov 15 17:00:00 GMT 2005,
					2005-11-15 17:00:00.0,
					Tue Nov 15 17:00:00 GMT 2005,
					Tue Nov 15 17:00:00 GMT 2005,
					Tue Nov 15 17:00:00 GMT 2005,
					2005-11-15 17:00:00.0,
					Tue Nov 15 17:00:00 GMT 2005,
					Tue Nov 15 17:00:00 GMT 2005"/>
        <testData input="2012-02-07 5:2:33"
                  expectedOutput="Tue Feb 07 05:02:33 GMT 2012,
					2012-02-07 05:02:33.0,
					Tue Feb 07 05:02:33 GMT 2012,
					Tue Feb 07 05:02:33 GMT 2012,
					Tue Feb 07 05:02:33 GMT 2012,
					2012-02-07 05:02:33.0,
					Tue Feb 07 05:02:33 GMT 2012,
					Tue Feb 07 05:02:33 GMT 2012"/>
        <testData input="2012-02-07 5:22:3"
                  expectedOutput="Tue Feb 07 05:22:03 GMT 2012,
					2012-02-07 05:22:03.0,
					Tue Feb 07 05:22:03 GMT 2012,
					Tue Feb 07 05:22:03 GMT 2012,
					Tue Feb 07 05:22:03 GMT 2012,
					2012-02-07 05:22:03.0,
					Tue Feb 07 05:22:03 GMT 2012,
					Tue Feb 07 05:22:03 GMT 2012"/>
    </testcase>
    <testcase testName="testIfErrorSqrt"
              fieldName="testIfErrorSqrt"
              dataType="Double"
              formula="IFERROR(SQRT(customnumber1__c),-1)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="" expectedOutput="0.0,
					0,
					0,
					0,
					null,
					null,
					-1,
					-1"/>
        <testData input="0.0" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="24"
                  expectedOutput="4.898979485566356,
					4.898979485566356,
					4.898979485566356,
					4.8989795,
					4.898979485566356,
					4.898979485566356,
					4.898979485566356,
					4.8989795"/>
        <testData input=".99"
                  expectedOutput="0.99498743710662,
					0.99498743710661995,
					0.99498743710662,
					0.9949874,
					0.99498743710662,
					0.99498743710661995,
					0.99498743710662,
					0.9949874"/>
        <testData input="-24" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
    </testcase>
    <testcase testName="testIfErrorTextTimeValueWithValidInValid"
              fieldName="testIfErrorTextTimeValueWithValidInValid"
              dataType="Text"
              formula="IFERROR(Text(TimeValue(dateString__c)),NULL)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="dateString" dataType="Text"/>
        <testData input="10:34:55.666"
                  expectedOutput="10:34:55.666,
					10:34:55.666,
					10:34:55.666,
					10:34:55.666,
					10:34:55.666,
					10:34:55.666,
					10:34:55.666,
					10:34:55.666"/>
        <testData input="23:56:45.898"
                  expectedOutput="23:56:45.898,
					23:56:45.898,
					23:56:45.898,
					23:56:45.898,
					23:56:45.898,
					23:56:45.898,
					23:56:45.898,
					23:56:45.898"/>
        <testData input="01:14:23.345"
                  expectedOutput="01:14:23.345,
					01:14:23.345,
					01:14:23.345,
					01:14:23.345,
					01:14:23.345,
					01:14:23.345,
					01:14:23.345,
					01:14:23.345"/>
        <testData input="01:66:29.345"
                  expectedOutput="null,
					null,
					00:00:00.000,
					00:00:00.000,
					null,
					null,
					00:00:00.000,
					00:00:00.000"/>
        <testData input="00:00:29.345"
                  expectedOutput="00:00:29.345,
					00:00:29.345,
					00:00:29.345,
					00:00:29.345,
					00:00:29.345,
					00:00:29.345,
					00:00:29.345,
					00:00:29.345"/>
        <testData input="00:00:00.789"
                  expectedOutput="00:00:00.789,
					00:00:00.789,
					00:00:00.789,
					00:00:00.789,
					00:00:00.789,
					00:00:00.789,
					00:00:00.789,
					00:00:00.789"/>
        <testData input="00:00:00.000"
                  expectedOutput="00:00:00.000,
					00:00:00.000,
					00:00:00.000,
					00:00:00.000,
					00:00:00.000,
					00:00:00.000,
					00:00:00.000,
					00:00:00.000"/>
        <testData input="24:12:56.123"
                  expectedOutput="null,
					null,
					00:12:56.123,
					00:12:56.123,
					null,
					null,
					00:12:56.123,
					00:12:56.123"/>
        <testData input="23:62:56.123"
                  expectedOutput="null,
					null,
					00:00:00.000,
					00:00:00.000,
					null,
					null,
					00:00:00.000,
					00:00:00.000"/>
        <testData input="23:52:65.123"
                  expectedOutput="null,
					null,
					00:00:00.000,
					00:00:00.000,
					null,
					null,
					00:00:00.000,
					00:00:00.000"/>
        <testData input="01:14:23.3456"
                  expectedOutput="null,
					null,
					01:14:26.456,
					01:14:26.456,
					null,
					null,
					01:14:26.456,
					01:14:26.456"/>
        <testData input="00:00:01.000"
                  expectedOutput="00:00:01.000,
					00:00:01.000,
					00:00:01.000,
					00:00:01.000,
					00:00:01.000,
					00:00:01.000,
					00:00:01.000,
					00:00:01.000"/>
        <testData input="23:59:59.999"
                  expectedOutput="23:59:59.999,
					23:59:59.999,
					23:59:59.999,
					23:59:59.999,
					23:59:59.999,
					23:59:59.999,
					23:59:59.999,
					23:59:59.999"/>
    </testcase>
    <testcase testName="testIfErrorBigDivide"
              fieldName="testIfErrorBigDivide"
              dataType="Double"
              formula="IFERROR(((customnumber1__c/customnumber2__c)*customnumber3__c),0)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customnumber3" dataType="Double"/>
        <testData input="1,1000000000,1000000000"
                  expectedOutput="1.000000000,
					1,
					1,
					1,
					1.000000000,
					1,
					1,
					1"/>
        <testData input="1,123456789123456.24,123456789123456.24"
                  expectedOutput="1.00000000000000000000000000000000,
					1.00000000000000000061214949860207,
					1,
					1,
					1.00000000000000000000000000000000,
					1.00000000000000000061214949860207,
					1,
					1"/>
        <testData input="1,0,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0,1,1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=",,1" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					0,
					0"/>
        <testData input="0,," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					0,
					0"/>
        <testData input=",," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					0,
					0"/>
        <testData input="0,0,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
    </testcase>
    <testcase testName="testJsonValue"
              fieldName="testJsonValue"
              dataType="Text"
              formula="JSONVALUE(customjson__c, 'Temperature')"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customjson" dataType="Text"/>
        <referenceField fieldName="customtext" dataType="Text"/>
        <testData input=",Temperature"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="{},Temperature"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="{&#34;Temperature&#34;: 50},Temperature"
                  expectedOutput="50,
					50,
					50,
					50,
					50,
					50,
					50,
					50"/>
        <testData input="{&#34;Temperature&#34;: &#34;a&#34;},Temperature"
                  expectedOutput="a,
					a,
					a,
					a,
					a,
					a,
					a,
					a"/>
    </testcase>
    <testcase testName="testJsonPathValue"
              fieldName="testJsonPathValue"
              dataType="Text"
              formula="JSONPATHVALUE(customjson__c, '$.Temperature')"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customjson" dataType="Text"/>
        <referenceField fieldName="customtext" dataType="Text"/>
        <testData input=",$.Temperature"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="{},$.Temperature"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="{&#34;Temperature&#34;: 50},$.Temperature"
                  expectedOutput="50,
					50,
					50,
					50,
					50,
					50,
					50,
					50"/>
        <testData input="{&#34;Temperature&#34;: &#34;a&#34;},$.Temperature"
                  expectedOutput="a,
					a,
					a,
					a,
					a,
					a,
					a,
					a"/>
    </testcase>
    <testcase testName="testReverse"
              fieldName="testReverse"
              dataType="Text"
              formula="REVERSE(customtext1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="This is too good to be true"
                  expectedOutput="eurt eb ot doog oot si sihT,
					eurt eb ot doog oot si sihT,
					eurt eb ot doog oot si sihT,
					eurt eb ot doog oot si sihT,
					eurt eb ot doog oot si sihT,
					eurt eb ot doog oot si sihT,
					eurt eb ot doog oot si sihT,
					eurt eb ot doog oot si sihT"/>
        <testData input="making a way"
                  expectedOutput="yaw a gnikam,
					yaw a gnikam,
					yaw a gnikam,
					yaw a gnikam,
					yaw a gnikam,
					yaw a gnikam,
					yaw a gnikam,
					yaw a gnikam"/>
        <testData input=""
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="blunder"
                  expectedOutput="rednulb,
					rednulb,
					rednulb,
					rednulb,
					rednulb,
					rednulb,
					rednulb,
					rednulb"/>
        <testData input="makesense"
                  expectedOutput="esnesekam,
					esnesekam,
					esnesekam,
					esnesekam,
					esnesekam,
					esnesekam,
					esnesekam,
					esnesekam"/>
        <testData input="does not make sense"
                  expectedOutput="esnes ekam ton seod,
					esnes ekam ton seod,
					esnes ekam ton seod,
					esnes ekam ton seod,
					esnes ekam ton seod,
					esnes ekam ton seod,
					esnes ekam ton seod,
					esnes ekam ton seod"/>
        <testData input="working my way"
                  expectedOutput="yaw ym gnikrow,
					yaw ym gnikrow,
					yaw ym gnikrow,
					yaw ym gnikrow,
					yaw ym gnikrow,
					yaw ym gnikrow,
					yaw ym gnikrow,
					yaw ym gnikrow"/>
        <testData input="e" expectedOutput="e,
					e,
					e,
					e,
					e,
					e,
					e,
					e"/>
        <testData input="hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag"
                  expectedOutput="gahsoghawtwua9gthsihgkjasifowt9awhtashjovhaot9wtwaiognasohsouwtwthasjighjsofiowutwhjgishjkfatwhthsjghshgwhgthwtooghlsjgklaslghsgoswhuowstasghsjgasngsgsotwtsgksngnshgshtgsgh,
					gahsoghawtwua9gthsihgkjasifowt9awhtashjovhaot9wtwaiognasohsouwtwthasjighjsofiowutwhjgishjkfatwhthsjghshgwhgthwtooghlsjgklaslghsgoswhuowstasghsjgasngsgsotwtsgksngnshgshtgsgh,
					gahsoghawtwua9gthsihgkjasifowt9awhtashjovhaot9wtwaiognasohsouwtwthasjighjsofiowutwhjgishjkfatwhthsjghshgwhgthwtooghlsjgklaslghsgoswhuowstasghsjgasngsgsotwtsgksngnshgshtgsgh,
					gahsoghawtwua9gthsihgkjasifowt9awhtashjovhaot9wtwaiognasohsouwtwthasjighjsofiowutwhjgishjkfatwhthsjghshgwhgthwtooghlsjgklaslghsgoswhuowstasghsjgasngsgsotwtsgksngnshgshtgsgh,
					gahsoghawtwua9gthsihgkjasifowt9awhtashjovhaot9wtwaiognasohsouwtwthasjighjsofiowutwhjgishjkfatwhthsjghshgwhgthwtooghlsjgklaslghsgoswhuowstasghsjgasngsgsotwtsgksngnshgshtgsgh,
					gahsoghawtwua9gthsihgkjasifowt9awhtashjovhaot9wtwaiognasohsouwtwthasjighjsofiowutwhjgishjkfatwhthsjghshgwhgthwtooghlsjgklaslghsgoswhuowstasghsjgasngsgsotwtsgksngnshgshtgsgh,
					gahsoghawtwua9gthsihgkjasifowt9awhtashjovhaot9wtwaiognasohsouwtwthasjighjsofiowutwhjgishjkfatwhthsjghshgwhgthwtooghlsjgklaslghsgoswhuowstasghsjgasngsgsotwtsgksngnshgshtgsgh,
					gahsoghawtwua9gthsihgkjasifowt9awhtashjovhaot9wtwaiognasohsouwtwthasjighjsofiowutwhjgishjkfatwhthsjghshgwhgthwtooghlsjgklaslghsgoswhuowstasghsjgasngsgsotwtsgksngnshgshtgsgh"/>
        <testData input="250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_"
                  expectedOutput="_(_%!)%^&amp;)%*_)!%)%&amp;%%!_^*)%^$_!)%)^)^)%@)#)041805052,
					_(_%!)%^&amp;)%*_)!%)%&amp;%%!_^*)%^$_!)%)^)^)%@)#)041805052,
					_(_%!)%^&amp;)%*_)!%)%&amp;%%!_^*)%^$_!)%)^)^)%@)#)041805052,
					_(_%!)%^&amp;)%*_)!%)%&amp;%%!_^*)%^$_!)%)^)^)%@)#)041805052,
					_(_%!)%^&amp;)%*_)!%)%&amp;%%!_^*)%^$_!)%)^)^)%@)#)041805052,
					_(_%!)%^&amp;)%*_)!%)%&amp;%%!_^*)%^$_!)%)^)^)%@)#)041805052,
					_(_%!)%^&amp;)%*_)!%)%&amp;%%!_^*)%^$_!)%)^)^)%@)#)041805052,
					_(_%!)%^&amp;)%*_)!%)%&amp;%%!_^*)%^$_!)%)^)^)%@)#)041805052"/>
        <testData input="blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r"
                  expectedOutput="r\q\t\n\gslglsgls wioglslgdcws   sgfldsld   jskdjsl hjalb,
					r\q\t\n\gslglsgls wioglslgdcws   sgfldsld   jskdjsl hjalb,
					r\q\t\n\gslglsgls wioglslgdcws   sgfldsld   jskdjsl hjalb,
					r\q\t\n\gslglsgls wioglslgdcws   sgfldsld   jskdjsl hjalb,
					r\q\t\n\gslglsgls wioglslgdcws   sgfldsld   jskdjsl hjalb,
					r\q\t\n\gslglsgls wioglslgdcws   sgfldsld   jskdjsl hjalb,
					r\q\t\n\gslglsgls wioglslgdcws   sgfldsld   jskdjsl hjalb,
					r\q\t\n\gslglsgls wioglslgdcws   sgfldsld   jskdjsl hjalb"/>
    </testcase>
    <testcase testName="testMid"
              fieldName="testMid"
              dataType="Text"
              formula="MID(customtext__c, customnumber1__c, customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext" dataType="Text"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="123456,1,6"
                  expectedOutput="123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456"/>
        <testData input="123456,2,6"
                  expectedOutput="23456,
					23456,
					23456,
					23456,
					23456,
					23456,
					23456,
					23456"/>
        <testData input="123456,2,4"
                  expectedOutput="2345,
					2345,
					2345,
					2345,
					2345,
					2345,
					2345,
					2345"/>
        <testData input="123456,0,6"
                  expectedOutput="123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456"/>
        <testData input="123456,6,6" expectedOutput="6,
					6,
					6,
					6,
					6,
					6,
					6,
					6"/>
        <testData input="123456,7,6"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,1,-6"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,2,-6"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,2,-4"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,0,-6"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,6,-6"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,7,-6"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,-1,4"
                  expectedOutput="1234,
					1234,
					1234,
					1234,
					1234,
					1234,
					1234,
					1234"/>
        <testData input="123456,-6,10"
                  expectedOutput="123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456"/>
        <testData input="123456,-10,4"
                  expectedOutput="1234,
					1234,
					1234,
					1234,
					1234,
					1234,
					1234,
					1234"/>
        <testData input=",1,1"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",-1,-1"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",0,0"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",0,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,1,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,,1"
                  expectedOutput="1,
					1,
					1,
					1,
					null,
					1,
					null,
					null"/>
        <testData input="123456,1,1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="123456,-1,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,,-1"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,-1,-1"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="会计年度开始月份,1,5"
                  expectedOutput="会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开"/>
        <testData input="会计年度开始月份,2,5"
                  expectedOutput="计年度开始,
					计年度开始,
					计年度开始,
					计年度开始,
					计年度开始,
					计年度开始,
					计年度开始,
					计年度开始"/>
        <testData input="会计年度开始月份,0,5"
                  expectedOutput="会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开"/>
        <testData input="会计年度开始月份,8,5" expectedOutput="份,
					份,
					份,
					份,
					份,
					份,
					份,
					份"/>
        <testData input="会计年度开始月份,10,5"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="会计年度开始月份,-1,5"
                  expectedOutput="会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开"/>
        <testData input="会计年度开始月份,-10,5"
                  expectedOutput="会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开"/>
        <testData input="会计年度开始月份,-8,5"
                  expectedOutput="会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开"/>
        <testData input="会计年度开始月份,,5"
                  expectedOutput="会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					null,
					会计年度开,
					null,
					null"/>
    </testcase>
    <testcase testName="testSubstr2"
              fieldName="testSubstr2"
              dataType="Text"
              formula="SUBSTR(customtext__c, customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext" dataType="Text"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="123456,1"
                  expectedOutput="123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456"/>
        <testData input="123456,2"
                  expectedOutput="23456,
					23456,
					23456,
					23456,
					23456,
					23456,
					23456,
					23456"/>
        <testData input="123456,0"
                  expectedOutput="123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456"/>
        <testData input="123456,6" expectedOutput="6,
					6,
					6,
					6,
					6,
					6,
					6,
					6"/>
        <testData input="123456,7"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,-1" expectedOutput="6,
					6,
					6,
					6,
					6,
					6,
					6,
					6"/>
        <testData input="123456,-6"
                  expectedOutput="123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456"/>
        <testData input="123456,-7"
                  expectedOutput="null,
					null,
					123456,
					123456,
					null,
					null,
					123456,
					123456"/>
        <testData input="123456,-10"
                  expectedOutput="null,
					null,
					123456,
					123456,
					null,
					null,
					123456,
					123456"/>
        <testData input=",1"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,"
                  expectedOutput="123456,
					123456,
					123456,
					123456,
					null,
					null,
					null,
					null"/>
        <testData input=","
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="会计年度开始月份,1"
                  expectedOutput="会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份"/>
        <testData input="会计年度开始月份,2"
                  expectedOutput="计年度开始月份,
					计年度开始月份,
					计年度开始月份,
					计年度开始月份,
					计年度开始月份,
					计年度开始月份,
					计年度开始月份,
					计年度开始月份"/>
        <testData input="会计年度开始月份,0"
                  expectedOutput="会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份"/>
        <testData input="会计年度开始月份,8" expectedOutput="份,
					份,
					份,
					份,
					份,
					份,
					份,
					份"/>
        <testData input="会计年度开始月份,10"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="会计年度开始月份,-1" expectedOutput="份,
					份,
					份,
					份,
					份,
					份,
					份,
					份"/>
        <testData input="会计年度开始月份,-10"
                  expectedOutput="null,
					null,
					会计年度开始月份,
					会计年度开始月份,
					null,
					null,
					会计年度开始月份,
					会计年度开始月份"/>
        <testData input="会计年度开始月份,-8"
                  expectedOutput="会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份"/>
        <testData input="会计年度开始月份,-7"
                  expectedOutput="计年度开始月份,
					计年度开始月份,
					计年度开始月份,
					计年度开始月份,
					计年度开始月份,
					计年度开始月份,
					计年度开始月份,
					计年度开始月份"/>
        <testData input="会计年度开始月份,-9"
                  expectedOutput="null,
					null,
					会计年度开始月份,
					会计年度开始月份,
					null,
					null,
					会计年度开始月份,
					会计年度开始月份"/>
        <testData input="会计年度开始月份,"
                  expectedOutput="会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					会计年度开始月份,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testSubstr3"
              fieldName="testSubstr3"
              dataType="Text"
              formula="SUBSTR(customtext__c, customnumber1__c, customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext" dataType="Text"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="123456,1,6"
                  expectedOutput="123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456"/>
        <testData input="123456,2,6"
                  expectedOutput="23456,
					23456,
					23456,
					23456,
					23456,
					23456,
					23456,
					23456"/>
        <testData input="123456,2,4"
                  expectedOutput="2345,
					2345,
					2345,
					2345,
					2345,
					2345,
					2345,
					2345"/>
        <testData input="123456,0,6"
                  expectedOutput="123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456"/>
        <testData input="123456,6,6" expectedOutput="6,
					6,
					6,
					6,
					6,
					6,
					6,
					6"/>
        <testData input="123456,7,6"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,1,-6"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,2,-6"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,2,-4"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,0,-6"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,6,-6"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,7,-6"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,-1,4" expectedOutput="6,
					6,
					6,
					6,
					6,
					6,
					6,
					6"/>
        <testData input="123456,-6,10"
                  expectedOutput="123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456,
					123456"/>
        <testData input="123456,-10,4"
                  expectedOutput="null,
					null,
					1234,
					1234,
					null,
					null,
					1234,
					1234"/>
        <testData input=",1,1"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",-1,-1"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",0,0"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",0,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,1,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,,1"
                  expectedOutput="1,
					1,
					1,
					1,
					null,
					null,
					null,
					null"/>
        <testData input="123456,1,1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="123456,-1,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,,-1"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="123456,-1,-1"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",,"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="会计年度开始月份,1,5"
                  expectedOutput="会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开"/>
        <testData input="会计年度开始月份,2,5"
                  expectedOutput="计年度开始,
					计年度开始,
					计年度开始,
					计年度开始,
					计年度开始,
					计年度开始,
					计年度开始,
					计年度开始"/>
        <testData input="会计年度开始月份,0,5"
                  expectedOutput="会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开"/>
        <testData input="会计年度开始月份,8,5" expectedOutput="份,
					份,
					份,
					份,
					份,
					份,
					份,
					份"/>
        <testData input="会计年度开始月份,10,5"
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="会计年度开始月份,-1,5" expectedOutput="份,
					份,
					份,
					份,
					份,
					份,
					份,
					份"/>
        <testData input="会计年度开始月份,-10,5"
                  expectedOutput="null,
					null,
					会计年度开,
					会计年度开,
					null,
					null,
					会计年度开,
					会计年度开"/>
        <testData input="会计年度开始月份,-8,5"
                  expectedOutput="会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					会计年度开"/>
        <testData input="会计年度开始月份,,5"
                  expectedOutput="会计年度开,
					会计年度开,
					会计年度开,
					会计年度开,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testRegex"
              fieldName="testRegex"
              dataType="Text"
              formula="if(REGEX(customtext__c, customexpr__c),'TRUE','FALSE')"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext" dataType="Text"/>
        <referenceField fieldName="customexpr" dataType="Text"/>
        <testData input="F.o,F\.o"
                  expectedOutput="TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE"/>
        <testData input="Foo,F\\.o"
                  expectedOutput="FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE"/>
        <testData input="Text,(a*)b"
                  expectedOutput="FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE"/>
        <testData input="Text,Text"
                  expectedOutput="TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE"/>
        <testData input="Text,ext"
                  expectedOutput="FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE"/>
        <testData input="Text,Te"
                  expectedOutput="FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE"/>
        <testData input="Text,^Text$"
                  expectedOutput="TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE"/>
        <testData input="Text,[T][e][x][t]"
                  expectedOutput="TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE"/>
        <testData input="Hello,(("
                  expectedOutput="Error: java.util.regex.PatternSyntaxException,
					Error: ERROR: invalid regular expression: parentheses () not balanced,
					Error: SyntaxError: Unterminated group,
					Error: SyntaxError: Unterminated group,
					Error: java.util.regex.PatternSyntaxException,
					Error: ERROR: invalid regular expression: parentheses () not balanced,
					Error: SyntaxError: Unterminated group,
					Error: SyntaxError: Unterminated group"/>
        <testData input="Hello,"
                  expectedOutput="FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE"/>
        <testData input=",(a*)?"
                  expectedOutput="TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE"/>
        <testData input=",a+"
                  expectedOutput="FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE"/>
        <testData input="aaaaaaaaaaaac,(a*)+b"
                  expectedOutput="FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE"/>
        <testData input=","
                  expectedOutput="TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE"/>
    </testcase>
    <testcase testName="testLike"
              fieldName="testRegex"
              dataType="Text"
              formula="if(LIKE(customtext__c, customexpr__c),'TRUE','FALSE')"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext" dataType="Text"/>
        <referenceField fieldName="customexpr" dataType="Text"/>
        <testData input="abcd,abc[def]"
                  expectedOutput="FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE"/>
        <testData input="Howdy,%dy"
                  expectedOutput="TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE"/>
        <testData input="Howdy,Ho_dy"
                  expectedOutput="TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE"/>
        <testData input="Howdy,ho%dy"
                  expectedOutput="FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE"/>
        <testData input="Cändy,CäNDY"
                  expectedOutput="FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE"/>
        <testData input="Cändy,CÄndy"
                  expectedOutput="FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE"/>
        <testData input="Cändy,C_NDY"
                  expectedOutput="FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE"/>
        <testData input="[,["
                  expectedOutput="TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE"/>
        <testData input="],]"
                  expectedOutput="TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE"/>
        <testData input="a,[acdf]"
                  expectedOutput="FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE"/>
        <testData input="_n,[_n]"
                  expectedOutput="FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE"/>
        <testData input="%,%%"
                  expectedOutput="TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE"/>
        <testData input="Hi%Hi,Hi%%Hi"
                  expectedOutput="TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE"/>
        <testData input="\,\\"
                  expectedOutput="TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE"/>
        <testData input="%,\%"
                  expectedOutput="TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE"/>
        <testData input="H,\s"
                  expectedOutput="FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE"/>
        <testData input="H,*"
                  expectedOutput="FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE"/>
        <testData input="*,*"
                  expectedOutput="TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE"/>
        <testData input="?,?"
                  expectedOutput="TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE"/>
        <testData input="^$^$,^$^$"
                  expectedOutput="TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE,
					TRUE"/>
    </testcase>
    <testcase testName="testIn2Text"
              fieldName="testIn2Text"
              dataType="Boolean"
              formula="IN(customtext__c, customin1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext" dataType="Text"/>
        <referenceField fieldName="customin1" dataType="Text"/>
        <testData input="foo,"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=",foo"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=","
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="foo,foo"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="FOO,foo"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="foo,FOO"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="Foo,Bar"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="Left,Right"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="Left, Left"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="1,2"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="ß,ss"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
    </testcase>
    <testcase testName="testIn2TextNull"
              fieldName="testIn2TextNull"
              dataType="Boolean"
              formula="IN(customtext__c, customin1__c, NULL)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext" dataType="Text"/>
        <referenceField fieldName="customin1" dataType="Text"/>
        <testData input="foo,"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=",foo"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=","
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="foo,foo"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="FOO,foo"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="foo,FOO"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="Foo,Bar"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="Left,Right"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="Left, Left"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="1,2"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="ß,ss"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
    </testcase>
    <testcase testName="testIn2TextFoo"
              fieldName="testIn2TextFoo"
              dataType="Boolean"
              formula="IN(customtext__c, customin1__c, 'Foo')"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext" dataType="Text"/>
        <referenceField fieldName="customin1" dataType="Text"/>
        <testData input="foo,"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=",foo"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=","
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="foo,foo"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="FOO,foo"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="foo,FOO"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="Foo,Bar"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="Left,Right"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="Left, Left"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="1,2"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="ß,ss"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
    </testcase>
    <testcase testName="testIn2Num"
              fieldName="testIn2Num"
              dataType="Boolean"
              formula="IN(customnum__c, customin1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnum" dataType="Double"/>
        <referenceField fieldName="customin1" dataType="Double"/>
        <testData input=",24"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="0.0,0.0"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="0.00,0.00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="0.000,0.000"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="-1.0,99.0"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="99, -1"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="-20,-40"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="1.1111,1.1111"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="1.11114,0.00000"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="1.11115,0.00000"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="123456789,123456789"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="600, 0.000600"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="600, -600"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="1.2345, 1.2345"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="1.245, 0"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=","
                  expectedOutput="true,
					true,
					true,
					true,
					false,
					false,
					false,
					false"/>
        <testData input="1,"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=",12.123456789"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="1.00596,240"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="0,240"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
    </testcase>
    <testcase testName="testIn2NumNull"
              fieldName="testIn2NumNull"
              dataType="Boolean"
              formula="IN(customnum__c, customin1__c, NULL)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnum" dataType="Double"/>
        <referenceField fieldName="customin1" dataType="Double"/>
        <testData input=",24"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="0.0,0.0"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="0.00,0.00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="0.000,0.000"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="-1.0,99.0"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="99, -1"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="-20,-40"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="1.1111,1.1111"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="1.11114,0.00000"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="1.11115,0.00000"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="123456789,123456789"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="600, 0.000600"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="600, -600"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="1.2345, 1.2345"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="1.245, 0"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=","
                  expectedOutput="true,
					true,
					true,
					true,
					false,
					false,
					false,
					false"/>
        <testData input="1,"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=",12.123456789"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="1.00596,240"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="0,240"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
    </testcase>
    <testcase testName="testIn2Date"
              fieldName="testIn2Date"
              dataType="Boolean"
              formula="IN(customdate__c, customin1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate" dataType="DateOnly"/>
        <referenceField fieldName="customin1" dataType="DateOnly"/>
        <testData input="2004:12:31:11:32:00,2004:12:31:11:30:00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="2004:02:28:10:34:00,2008:02:28:10:34:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:12:31:11:30:00,2004:12:31:11:32:00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="2004:02:28:10:34:00,2004:03:01:00:00:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=",2004:12:31:11:32:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:02:28:10:34:00,"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=","
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="3999:02:28:10:34:00,1780:02:28:10:34:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:00:00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:15:00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="2022:08:21:08:29:00,2022:08:21:08:00:00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
    </testcase>
    <testcase testName="testIn2DateNull"
              fieldName="testIn2DateNull"
              dataType="Boolean"
              formula="IN(customdate__c, customin1__c, NULL)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate" dataType="DateOnly"/>
        <referenceField fieldName="customin1" dataType="DateOnly"/>
        <testData input="2004:12:31:11:32:00,2004:12:31:11:30:00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="2004:02:28:10:34:00,2008:02:28:10:34:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:12:31:11:30:00,2004:12:31:11:32:00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="2004:02:28:10:34:00,2004:03:01:00:00:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=",2004:12:31:11:32:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:02:28:10:34:00,"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=","
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="3999:02:28:10:34:00,1780:02:28:10:34:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:00:00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:15:00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="2022:08:21:08:29:00,2022:08:21:08:00:00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
    </testcase>
    <testcase testName="testIn2DateNullConst"
              fieldName="testIn2DateNull"
              dataType="Boolean"
              formula="IN(customdate__c, customin1__c, DATE(2004,2,28))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate" dataType="DateOnly"/>
        <referenceField fieldName="customin1" dataType="DateOnly"/>
        <testData input="2004:12:31:11:32:00,2004:12:31:11:30:00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="2004:02:28:10:34:00,2008:02:28:10:34:00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="2004:12:31:11:30:00,2004:12:31:11:32:00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="2004:02:28:10:34:00,2004:03:01:00:00:00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input=",2004:12:31:11:32:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:02:28:10:34:00,"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input=","
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="3999:02:28:10:34:00,1780:02:28:10:34:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:00:00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="2022:08:21:08:30:00,2022:08:21:08:15:00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="2022:08:21:08:29:00,2022:08:21:08:00:00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
    </testcase>
    <testcase testName="testIn2DateTime"
              fieldName="testIn2DateTime"
              dataType="Boolean"
              formula="IN(customdate__c, customin1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate" dataType="DateTime"/>
        <referenceField fieldName="customin1" dataType="DateTime"/>
        <testData input="2004:12:31:11:00:00,2004:12:25:11:00:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:02:28:11:00:00,2004:02:27:02:00:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:12:31:11:00:00,2005:01:01:11:00:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:02:28:11:00:00,2004:03:01:02:00:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:12:31:11:30:00,2004:12:31:11:00:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:02:28:23:30:00,2004:02:28:24:00:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=",2004:02:28:24:00:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:02:28:24:00:00,"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=","
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:02:28:24:00:00,2004:02:28:24:00:00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
    </testcase>
    <testcase testName="testIn2DateTimeNull"
              fieldName="testIn2DateTimeNull"
              dataType="Boolean"
              formula="IN(customdate__c, customin1__c, NULL)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate" dataType="DateTime"/>
        <referenceField fieldName="customin1" dataType="DateTime"/>
        <testData input="2004:12:31:11:00:00,2004:12:25:11:00:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:02:28:11:00:00,2004:02:27:02:00:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:12:31:11:00:00,2005:01:01:11:00:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:02:28:11:00:00,2004:03:01:02:00:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:12:31:11:30:00,2004:12:31:11:00:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:02:28:23:30:00,2004:02:28:24:00:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=",2004:02:28:24:00:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:02:28:24:00:00,"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=","
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:02:28:24:00:00,2004:02:28:24:00:00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
    </testcase>
    <testcase testName="testIn2DateTimeConst"
              fieldName="testIn2DateTimeConst"
              dataType="Boolean"
              formula="IN(customdate__c, customin1__c, DATETIMEVALUE('2004-02-28 11:00:00'))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate" dataType="DateTime"/>
        <referenceField fieldName="customin1" dataType="DateTime"/>
        <testData input="2004:12:31:11:00:00,2004:12:25:11:00:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:02:28:11:00:00,2004:02:27:02:00:00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="2004:12:31:11:00:00,2005:01:01:11:00:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:02:28:11:00:00,2004:03:01:02:00:00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
        <testData input="2004:12:31:11:30:00,2004:12:31:11:00:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:02:28:23:30:00,2004:02:28:24:00:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=",2004:02:28:24:00:00"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:02:28:24:00:00,"
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input=","
                  expectedOutput="false,
					false,
					false,
					false,
					false,
					false,
					false,
					false"/>
        <testData input="2004:02:28:24:00:00,2004:02:28:24:00:00"
                  expectedOutput="true,
					true,
					true,
					true,
					true,
					true,
					true,
					true"/>
    </testcase>
    <testcase testName="testVALUE"
              fieldName="testVALUE"
              dataType="Double"
              formula="value(customtext1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="1234"
                  expectedOutput="1234,
					1234,
					1234,
					1234,
					1234,
					1234,
					1234,
					1234"/>
        <testData input="-1234"
                  expectedOutput="-1234,
					-1234,
					-1234,
					-1234,
					-1234,
					-1234,
					-1234,
					-1234"/>
        <testData input="1.234"
                  expectedOutput="1.234,
					1.234,
					1.234,
					1.234,
					1.234,
					1.234,
					1.234,
					1.234"/>
        <testData input="-1.234"
                  expectedOutput="-1.234,
					-1.234,
					-1.234,
					-1.234,
					-1.234,
					-1.234,
					-1.234,
					-1.234"/>
        <testData input="--1234"
                  expectedOutput="Error: com.force.formula.impl.InvalidNumericValueException,
					null,
					Error: Error: [DecimalError] Invalid argument: -1234,
					null,
					Error: com.force.formula.impl.InvalidNumericValueException,
					null,
					Error: Error: [DecimalError] Invalid argument: -1234,
					null"/>
        <testData input="1-234"
                  expectedOutput="Error: com.force.formula.impl.InvalidNumericValueException,
					null,
					Error: Error: [DecimalError] Invalid argument: 1-234,
					null,
					Error: com.force.formula.impl.InvalidNumericValueException,
					null,
					Error: Error: [DecimalError] Invalid argument: 1-234,
					null"/>
        <testData input="-1.2.34"
                  expectedOutput="Error: com.force.formula.impl.InvalidNumericValueException,
					null,
					Error: Error: [DecimalError] Invalid argument: 1.2.34,
					null,
					Error: com.force.formula.impl.InvalidNumericValueException,
					null,
					Error: Error: [DecimalError] Invalid argument: 1.2.34,
					null"/>
        <testData input="-"
                  expectedOutput="Error: com.force.formula.impl.InvalidNumericValueException,
					null,
					Error: Error: [DecimalError] Invalid argument: ,
					null,
					Error: com.force.formula.impl.InvalidNumericValueException,
					null,
					Error: Error: [DecimalError] Invalid argument: ,
					null"/>
        <testData input=".."
                  expectedOutput="Error: com.force.formula.impl.InvalidNumericValueException,
					null,
					Error: Error: [DecimalError] Invalid argument: ..,
					null,
					Error: com.force.formula.impl.InvalidNumericValueException,
					null,
					Error: Error: [DecimalError] Invalid argument: ..,
					null"/>
        <testData input="..1"
                  expectedOutput="Error: com.force.formula.impl.InvalidNumericValueException,
					null,
					Error: Error: [DecimalError] Invalid argument: ..1,
					null,
					Error: com.force.formula.impl.InvalidNumericValueException,
					null,
					Error: Error: [DecimalError] Invalid argument: ..1,
					null"/>
        <testData input="1.."
                  expectedOutput="Error: com.force.formula.impl.InvalidNumericValueException,
					null,
					Error: Error: [DecimalError] Invalid argument: 1..,
					null,
					Error: com.force.formula.impl.InvalidNumericValueException,
					null,
					Error: Error: [DecimalError] Invalid argument: 1..,
					null"/>
        <testData input="1..1"
                  expectedOutput="Error: com.force.formula.impl.InvalidNumericValueException,
					null,
					Error: Error: [DecimalError] Invalid argument: 1..1,
					null,
					Error: com.force.formula.impl.InvalidNumericValueException,
					null,
					Error: Error: [DecimalError] Invalid argument: 1..1,
					null"/>
        <testData input="."
                  expectedOutput="Error: com.force.formula.impl.InvalidNumericValueException,
					null,
					Error: Error: [DecimalError] Invalid argument: .,
					null,
					Error: com.force.formula.impl.InvalidNumericValueException,
					null,
					Error: Error: [DecimalError] Invalid argument: .,
					null"/>
        <testData input="-."
                  expectedOutput="Error: com.force.formula.impl.InvalidNumericValueException,
					null,
					Error: Error: [DecimalError] Invalid argument: .,
					null,
					Error: com.force.formula.impl.InvalidNumericValueException,
					null,
					Error: Error: [DecimalError] Invalid argument: .,
					null"/>
        <testData input="1." expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input=".1"
                  expectedOutput="0.1,
					0.1,
					0.1,
					0.1,
					0.1,
					0.1,
					0.1,
					0.1"/>
        <testData input="+1."
                  expectedOutput="1,
					1,
					Error: Error: [DecimalError] Invalid argument: +1.,
					1,
					1,
					1,
					Error: Error: [DecimalError] Invalid argument: +1.,
					1"/>
        <testData input="+.1"
                  expectedOutput="0.1,
					0.1,
					Error: Error: [DecimalError] Invalid argument: +.1,
					0.1,
					0.1,
					0.1,
					Error: Error: [DecimalError] Invalid argument: +.1,
					0.1"/>
        <testData input="1.e1" expectedOutput="10,
					10,
					10,
					10,
					10,
					10,
					10,
					10"/>
        <testData input="1.e+1" expectedOutput="10,
					10,
					10,
					10,
					10,
					10,
					10,
					10"/>
        <testData input="1.e-1"
                  expectedOutput="0.1,
					0.1,
					0.1,
					0.1,
					0.1,
					0.1,
					0.1,
					0.1"/>
        <testData input=".1e1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input=".1e+1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input=".1e-1"
                  expectedOutput="0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01"/>
        <testData input="123.4512345e2"
                  expectedOutput="12345.12345,
					12345.12345,
					12345.12345,
					12345.12345,
					12345.12345,
					12345.12345,
					12345.12345,
					12345.12345"/>
        <testData input=""
                  expectedOutput="null,
					null,
					null,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testISNUMBER"
              fieldName="testISNUMBER"
              dataType="Double"
              formula="if(ISNUMBER(customtext1__c),1,0)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="1234" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-1234" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="1.234" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-1.234" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="--1234" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="1-234" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-1.2.34" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".." expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="..1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="1.." expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="1..1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="." expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-." expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="1." expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input=".1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="+1." expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="+.1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="1.e1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="1.e+1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="1.e-1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input=".1e1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input=".1e+1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input=".1e-1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="123.4512345e2" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="" expectedOutput="0,
					0,
					1,
					1,
					0,
					0,
					1,
					1"/>
    </testcase>
    <testcase testName="testAddSimple"
              fieldName="testAddSimple"
              dataType="Double"
              formula="(customnumber1__c+customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input=",24"
                  expectedOutput="24,
					24,
					24,
					24,
					null,
					null,
					null,
					null"/>
        <testData input="0.0,0.0" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="0.00,0.00" expectedOutput="0.00,
					0,
					0,
					0,
					0.00,
					0,
					0,
					0"/>
        <testData input="0.000,0.000"
                  expectedOutput="0.000,
					0,
					0,
					0,
					0.000,
					0,
					0,
					0"/>
        <testData input="-1.0,99.0"
                  expectedOutput="98.0,
					98,
					98,
					98,
					98.0,
					98,
					98,
					98"/>
        <testData input="99,
					-1" expectedOutput="98,
					98,
					98,
					98,
					98,
					98,
					98,
					98"/>
        <testData input="-20,-40"
                  expectedOutput="-60,
					-60,
					-60,
					-60,
					-60,
					-60,
					-60,
					-60"/>
        <testData input="1.1111,1.1111"
                  expectedOutput="2.2222,
					2.2222,
					2.2222,
					2.2222,
					2.2222,
					2.2222,
					2.2222,
					2.2222"/>
        <testData input="1.11114,0.00000"
                  expectedOutput="1.11114,
					1.11114,
					1.11114,
					1.11114,
					1.11114,
					1.11114,
					1.11114,
					1.11114"/>
        <testData input="1.11115,0.00000"
                  expectedOutput="1.11115,
					1.11115,
					1.11115,
					1.11115,
					1.11115,
					1.11115,
					1.11115,
					1.11115"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="1.111155,
					1.111155,
					1.111155,
					1.111155,
					1.111155,
					1.111155,
					1.111155,
					1.111155"/>
        <testData input="123456789,123456789"
                  expectedOutput="246913578,
					246913578,
					246913578,
					246913578,
					246913578,
					246913578,
					246913578,
					246913578"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="246913578.246913578,
					246913578.246913578,
					246913578.24691358,
					246913578.2469136,
					246913578.246913578,
					246913578.246913578,
					246913578.24691358,
					246913578.2469136"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="0.000000000,
					0,
					0,
					0,
					0.000000000,
					0,
					0,
					0"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="-246913578.246913578,
					-246913578.246913578,
					-246913578.24691358,
					-246913578.2469136,
					-246913578.246913578,
					-246913578.246913578,
					-246913578.24691358,
					-246913578.2469136"/>
        <testData input="600, 0.000600"
                  expectedOutput="600.000600,
					600.0006,
					600.0006,
					600.0006,
					600.000600,
					600.0006,
					600.0006,
					600.0006"/>
        <testData input="600,
					-600" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="1.2345, 1.2345"
                  expectedOutput="2.4690,
					2.469,
					2.469,
					2.469,
					2.4690,
					2.469,
					2.469,
					2.469"/>
        <testData input="1.245, 0"
                  expectedOutput="1.245,
					1.245,
					1.245,
					1.245,
					1.245,
					1.245,
					1.245,
					1.245"/>
        <testData input="," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1," expectedOutput="1,
					1,
					1,
					1,
					null,
					null,
					null,
					null"/>
        <testData input=",12.123456789"
                  expectedOutput="12.123456789,
					12.123456789,
					12.123456789,
					12.1234568,
					null,
					null,
					null,
					null"/>
        <testData input="1.00596,240"
                  expectedOutput="241.00596,
					241.00596,
					241.00596,
					241.00596,
					241.00596,
					241.00596,
					241.00596,
					241.00596"/>
        <testData input="0,240"
                  expectedOutput="240,
					240,
					240,
					240,
					240,
					240,
					240,
					240"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="1000.0000000000001,
					1000.0000000000001,
					1000.0000000000001,
					1000,
					1000.0000000000001,
					1000.0000000000001,
					1000.0000000000001,
					1000"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="-999.9999999999999,
					-999.9999999999999,
					-999.9999999999999,
					-1000,
					-999.9999999999999,
					-999.9999999999999,
					-999.9999999999999,
					-1000"/>
    </testcase>
    <testcase testName="testAddScale"
              fieldName="testAddScale"
              dataType="Double"
              formula="(customnumber1__c+custompercent1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <testData input=",24"
                  expectedOutput="0.24,
					0.24,
					0.24,
					0.24,
					null,
					null,
					null,
					null"/>
        <testData input="0.0,0.0" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="0.00,0.00" expectedOutput="0.00,
					0,
					0,
					0,
					0.00,
					0,
					0,
					0"/>
        <testData input="0.000,0.000"
                  expectedOutput="0.000,
					0,
					0,
					0,
					0.000,
					0,
					0,
					0"/>
        <testData input="-1.0,99.0"
                  expectedOutput="-0.01,
					-0.01,
					-0.01,
					-0.01,
					-0.01,
					-0.01,
					-0.01,
					-0.01"/>
        <testData input="99, -1"
                  expectedOutput="98.99,
					98.99,
					98.99,
					98.99,
					98.99,
					98.99,
					98.99,
					98.99"/>
        <testData input="-20,-40"
                  expectedOutput="-20.4,
					-20.4,
					-20.4,
					-20.4,
					-20.4,
					-20.4,
					-20.4,
					-20.4"/>
        <testData input="1.1111,1.1111"
                  expectedOutput="1.122211,
					1.122211,
					1.122211,
					1.122211,
					1.122211,
					1.122211,
					1.122211,
					1.122211"/>
        <testData input="1.11114,0.00000"
                  expectedOutput="1.11114,
					1.11114,
					1.11114,
					1.11114,
					1.11114,
					1.11114,
					1.11114,
					1.11114"/>
        <testData input="1.11115,0.00000"
                  expectedOutput="1.11115,
					1.11115,
					1.11115,
					1.11115,
					1.11115,
					1.11115,
					1.11115,
					1.11115"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="1.11111243,
					1.11111243,
					1.11111243,
					1.1111124,
					1.11111243,
					1.11111243,
					1.11111243,
					1.1111124"/>
        <testData input="123456789,123456789"
                  expectedOutput="124691356.89,
					124691356.89,
					124691356.89,
					124691356.89,
					124691356.89,
					124691356.89,
					124691356.89,
					124691356.89"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="124691357.01469135689,
					124691357.01469135689,
					124691357.01469135,
					124691357.0146914,
					124691357.01469135689,
					124691357.01469135689,
					124691357.01469135,
					124691357.0146914"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="122222221.23222222111,
					122222221.23222222111,
					122222221.23222223,
					122222221.2322222,
					122222221.23222222111,
					122222221.23222222111,
					122222221.23222223,
					122222221.2322222"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="-124691357.01469135689,
					-124691357.01469135689,
					-124691357.01469135,
					-124691357.0146914,
					-124691357.01469135689,
					-124691357.01469135689,
					-124691357.01469135,
					-124691357.0146914"/>
        <testData input="600, 0.000600"
                  expectedOutput="600.000006,
					600.000006,
					600.000006,
					600.000006,
					600.000006,
					600.000006,
					600.000006,
					600.000006"/>
        <testData input="600, -600"
                  expectedOutput="594,
					594,
					594,
					594,
					594,
					594,
					594,
					594"/>
        <testData input="1.2345, 1.2345"
                  expectedOutput="1.246845,
					1.246845,
					1.246845,
					1.246845,
					1.246845,
					1.246845,
					1.246845,
					1.246845"/>
        <testData input="1.245, 0"
                  expectedOutput="1.245,
					1.245,
					1.245,
					1.245,
					1.245,
					1.245,
					1.245,
					1.245"/>
        <testData input="," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1," expectedOutput="1,
					1,
					1,
					1,
					null,
					null,
					null,
					null"/>
        <testData input=",12.123456789"
                  expectedOutput="0.12123456789,
					0.12123456789,
					0.12123456789,
					0.1212346,
					null,
					null,
					null,
					null"/>
        <testData input="1.00596,240"
                  expectedOutput="3.40596,
					3.40596,
					3.40596,
					3.40596,
					3.40596,
					3.40596,
					3.40596,
					3.40596"/>
        <testData input="0,240"
                  expectedOutput="2.4,
					2.4,
					2.4,
					2.4,
					2.4,
					2.4,
					2.4,
					2.4"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="10.0000000000001,
					10.0000000000001,
					10.0000000000001,
					10,
					10.0000000000001,
					10.0000000000001,
					10.0000000000001,
					10"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="-9.9999999999999,
					-9.9999999999999,
					-9.9999999999999,
					-10,
					-9.9999999999999,
					-9.9999999999999,
					-9.9999999999999,
					-10"/>
    </testcase>
    <testcase testName="testAddWithDivisionSimple"
              fieldName="testAddWithDivisionSimple"
              dataType="Double"
              formula="customnumber1__c/customnumber2__c + 1"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="9,
					9" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="9,
					9" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="9,
					9" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="9,
					9" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
    </testcase>
    <testcase testName="testAddWithDivision"
              fieldName="testAddWithDivision"
              dataType="Double"
              formula="customnumber1__c/(customnumber2__c + 1)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="9, 9"
                  expectedOutput="0.9,
					0.9,
					0.9,
					0.9,
					0.9,
					0.9,
					0.9,
					0.9"/>
        <testData input="9, 9"
                  expectedOutput="0.9,
					0.9,
					0.9,
					0.9,
					0.9,
					0.9,
					0.9,
					0.9"/>
        <testData input="9, 9"
                  expectedOutput="0.9,
					0.9,
					0.9,
					0.9,
					0.9,
					0.9,
					0.9,
					0.9"/>
        <testData input="9, 9"
                  expectedOutput="0.9,
					0.9,
					0.9,
					0.9,
					0.9,
					0.9,
					0.9,
					0.9"/>
    </testcase>
    <testcase testName="testSubWithDivisionSimple"
              fieldName="testSubWithDivisionSimple"
              dataType="Double"
              formula="customnumber1__c/customnumber2__c - 1"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="9,
					9" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="9,
					9" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="9,
					9" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="9,
					9" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
    </testcase>
    <testcase testName="testSubWithDivision"
              fieldName="testSubWithDivision"
              dataType="Double"
              formula="customnumber1__c/(customnumber2__c - 1)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="9, 9"
                  expectedOutput="1.125,
					1.125,
					1.125,
					1.125,
					1.125,
					1.125,
					1.125,
					1.125"/>
        <testData input="9, 9"
                  expectedOutput="1.125,
					1.125,
					1.125,
					1.125,
					1.125,
					1.125,
					1.125,
					1.125"/>
        <testData input="9, 9"
                  expectedOutput="1.125,
					1.125,
					1.125,
					1.125,
					1.125,
					1.125,
					1.125,
					1.125"/>
        <testData input="9, 9"
                  expectedOutput="1.125,
					1.125,
					1.125,
					1.125,
					1.125,
					1.125,
					1.125,
					1.125"/>
    </testcase>
    <testcase testName="testSubSimple"
              fieldName="testSubSimple"
              dataType="Double"
              formula="(customnumber1__c-customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input=",24"
                  expectedOutput="-24,
					-24,
					-24,
					-24,
					null,
					null,
					null,
					null"/>
        <testData input="0.0,0.0" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="0.00,0.00" expectedOutput="0.00,
					0,
					0,
					0,
					0.00,
					0,
					0,
					0"/>
        <testData input="0.000,0.000"
                  expectedOutput="0.000,
					0,
					0,
					0,
					0.000,
					0,
					0,
					0"/>
        <testData input="-1.0,99.0"
                  expectedOutput="-100.0,
					-100,
					-100,
					-100,
					-100.0,
					-100,
					-100,
					-100"/>
        <testData input="99, -1"
                  expectedOutput="100,
					100,
					100,
					100,
					100,
					100,
					100,
					100"/>
        <testData input="-20,-40" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="1.1111,1.1111"
                  expectedOutput="0.0000,
					0,
					0,
					0,
					0.0000,
					0,
					0,
					0"/>
        <testData input="1.11114,0.00000"
                  expectedOutput="1.11114,
					1.11114,
					1.11114,
					1.11114,
					1.11114,
					1.11114,
					1.11114,
					1.11114"/>
        <testData input="1.11115,0.00000"
                  expectedOutput="1.11115,
					1.11115,
					1.11115,
					1.11115,
					1.11115,
					1.11115,
					1.11115,
					1.11115"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="1.111069,
					1.111069,
					1.111069,
					1.111069,
					1.111069,
					1.111069,
					1.111069,
					1.111069"/>
        <testData input="123456789,123456789"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="0.000000000,
					0,
					0,
					0,
					0.000000000,
					0,
					0,
					0"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="246913578.246913578,
					246913578.246913578,
					246913578.24691358,
					246913578.2469136,
					246913578.246913578,
					246913578.246913578,
					246913578.24691358,
					246913578.2469136"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="0.000000000,
					0,
					0,
					0,
					0.000000000,
					0,
					0,
					0"/>
        <testData input="600, 0.000600"
                  expectedOutput="599.999400,
					599.9994,
					599.9994,
					599.9994,
					599.999400,
					599.9994,
					599.9994,
					599.9994"/>
        <testData input="600, -600"
                  expectedOutput="1200,
					1200,
					1200,
					1200,
					1200,
					1200,
					1200,
					1200"/>
        <testData input="1.2345, 1.2345"
                  expectedOutput="0.0000,
					0,
					0,
					0,
					0.0000,
					0,
					0,
					0"/>
        <testData input="1.245, 0"
                  expectedOutput="1.245,
					1.245,
					1.245,
					1.245,
					1.245,
					1.245,
					1.245,
					1.245"/>
        <testData input="," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1," expectedOutput="1,
					1,
					1,
					1,
					null,
					null,
					null,
					null"/>
        <testData input=",12.123456789"
                  expectedOutput="-12.123456789,
					-12.123456789,
					-12.123456789,
					-12.1234568,
					null,
					null,
					null,
					null"/>
        <testData input="1.00596,240"
                  expectedOutput="-238.99404,
					-238.99404,
					-238.99404,
					-238.99404,
					-238.99404,
					-238.99404,
					-238.99404,
					-238.99404"/>
        <testData input="0,240"
                  expectedOutput="-240,
					-240,
					-240,
					-240,
					-240,
					-240,
					-240,
					-240"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="-999.9999999999999,
					-999.9999999999999,
					-999.9999999999999,
					-1000,
					-999.9999999999999,
					-999.9999999999999,
					-999.9999999999999,
					-1000"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="1000.0000000000001,
					1000.0000000000001,
					1000.0000000000001,
					1000,
					1000.0000000000001,
					1000.0000000000001,
					1000.0000000000001,
					1000"/>
    </testcase>
    <testcase testName="testSubUnary"
              fieldName="testSubUnary"
              dataType="Double"
              formula="-(customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.0" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="24"
                  expectedOutput="-24,
					-24,
					-24,
					-24,
					-24,
					-24,
					-24,
					-24"/>
        <testData input=".99"
                  expectedOutput="-0.99,
					-0.99,
					-0.99,
					-0.99,
					-0.99,
					-0.99,
					-0.99,
					-0.99"/>
        <testData input="-24" expectedOutput="24,
					24,
					24,
					24,
					24,
					24,
					24,
					24"/>
    </testcase>
    <testcase testName="testMultiplyWithExpr"
              fieldName="testMultiplyWithExpr"
              dataType="Currency"
              formula="(customformula0__c*customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customformula0"
                        dataType="Double"
                        formula="(custompercent1__c*customcurrency1__c)">
            <referenceField fieldName="custompercent1" dataType="Percent"/>
            <referenceField fieldName="customcurrency1" dataType="Currency"/>
        </referenceField>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="100,200,100"
                  expectedOutput="20000,
					20000.00000000000000000000000000000000,
					20000,
					20000,
					20000,
					20000.00000000000000000000000000000000,
					20000,
					20000"/>
        <testData input="0,0,0" expectedOutput="0,
					0E-32,
					0,
					0,
					0,
					0E-32,
					0,
					0"/>
        <testData input="-1,-1,-1"
                  expectedOutput="-0.01,
					-0.01000000000000000000000000000000,
					-0.01,
					-0.01,
					-0.01,
					-0.01000000000000000000000000000000,
					-0.01,
					-0.01"/>
        <testData input="123456789,123456789,12345678"
                  expectedOutput="1881676234614946109182.38,
					1881676234614946109182.38000000000000000000000000000000,
					1881676234614946100000,
					1881676234614945873920,
					1881676234614946109182.38,
					1881676234614946109182.38000000000000000000000000000000,
					1881676234614946100000,
					1881676234614945873920"/>
        <testData input=",22,0"
                  expectedOutput="0,
					0E-32,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",,10"
                  expectedOutput="0,
					0E-32,
					0,
					0,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testIfNumCompareGreater"
              fieldName="testIfNumCompareGreater"
              dataType="Double"
              formula="IF((customnumber1__c&gt;customcurrency1__c),customcurrency2__c,customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <referenceField fieldName="customcurrency2" dataType="Currency"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="123456789,123456789,200,300"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="12345678,123456789,200,300"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="12345678,1234567,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input=",10.24,200,300"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="10.24,,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					300,
					300,
					300,
					300"/>
        <testData input=",,200,300"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="123.23456789,123.123456789,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="123.23456780,123.123456789,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="123.23456789,123.123456780,200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="-200.434,200.434, 200, 300"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="200, -200.434, 200,300"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="0,0,200,300"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="200,200,0.123456789,0.123456789"
                  expectedOutput="0.123456789,
					0.123456789,
					0.123456789,
					0.1234568,
					0.123456789,
					0.123456789,
					0.123456789,
					0.1234568"/>
        <testData input="201,200,0.123456789,0.123456789"
                  expectedOutput="0.123456789,
					0.123456789,
					0.123456789,
					0.1234568,
					0.123456789,
					0.123456789,
					0.123456789,
					0.1234568"/>
        <testData input="200,201,0.123456789,0.123456789"
                  expectedOutput="0.123456789,
					0.123456789,
					0.123456789,
					0.1234568,
					0.123456789,
					0.123456789,
					0.123456789,
					0.1234568"/>
    </testcase>
    <testcase testName="testIfNumCompareGreaterOrEqual"
              fieldName="testIfNumCompareGreaterOrEqual"
              dataType="Currency"
              formula="IF((customcurrency1__c&gt;=customcurrency2__c),customcurrency3__c,customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <referenceField fieldName="customcurrency2" dataType="Currency"/>
        <referenceField fieldName="customcurrency3" dataType="Currency"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="123456789,123456789,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="12345678,123456789,200,300"
                  expectedOutput="300,
					300.00000000000000000000000000000000,
					300,
					300,
					300,
					300.00000000000000000000000000000000,
					300,
					300"/>
        <testData input="12345678,1234567,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input=",10.24,200,300"
                  expectedOutput="300,
					300.00000000000000000000000000000000,
					300,
					300,
					300,
					300.00000000000000000000000000000000,
					300,
					300"/>
        <testData input="10.24,,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					300,
					300.00000000000000000000000000000000,
					300,
					300"/>
        <testData input=",,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					300,
					300.00000000000000000000000000000000,
					300,
					300"/>
        <testData input="123.23456789,123.123456789,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="123.23456780,123.123456789,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="123.23456789,123.123456780,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="-200.434,200.434, 200, 300"
                  expectedOutput="300,
					300.00000000000000000000000000000000,
					300,
					300,
					300,
					300.00000000000000000000000000000000,
					300,
					300"/>
        <testData input="200, -200.434, 200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="0,0,200,300"
                  expectedOutput="200,
					200.00000000000000000000000000000000,
					200,
					200,
					200,
					200.00000000000000000000000000000000,
					200,
					200"/>
        <testData input="200,200,0.123456789,0.123456789"
                  expectedOutput="0.123456789,
					0.12345678900000000000000000000000,
					0.123456789,
					0.1234568,
					0.123456789,
					0.12345678900000000000000000000000,
					0.123456789,
					0.1234568"/>
        <testData input="201,200,0.123456789,0.123456789"
                  expectedOutput="0.123456789,
					0.12345678900000000000000000000000,
					0.123456789,
					0.1234568,
					0.123456789,
					0.12345678900000000000000000000000,
					0.123456789,
					0.1234568"/>
        <testData input="200,201,0.123456789,0.123456789"
                  expectedOutput="0.123456789,
					0.12345678900000000000000000000000,
					0.123456789,
					0.1234568,
					0.123456789,
					0.12345678900000000000000000000000,
					0.123456789,
					0.1234568"/>
    </testcase>
    <testcase testName="testAbsUsesExp"
              fieldName="testAbsUsesExp"
              dataType="Double"
              formula="ABS(EXP(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="0" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="1"
                  expectedOutput="2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818,
					2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818"/>
        <testData input="2"
                  expectedOutput="7.38905609893065,
					7.38905609893065022723,
					7.38905609893065,
					7.3890561,
					7.38905609893065,
					7.38905609893065022723,
					7.38905609893065,
					7.3890561"/>
        <testData input="-1"
                  expectedOutput="0.36787944117144233,
					0.3678794411714423216,
					0.36787944117144233,
					0.3678794,
					0.36787944117144233,
					0.3678794411714423216,
					0.36787944117144233,
					0.3678794"/>
        <testData input="-10"
                  expectedOutput="0.000045399929762484854,
					0.00004539992976248485,
					0.000045399929762484854,
					0.0000454,
					0.000045399929762484854,
					0.00004539992976248485,
					0.000045399929762484854,
					0.0000454"/>
        <testData input="-100"
                  expectedOutput="0.00000000000000000000000000000000,
					0,
					0E-32,
					0,
					0.00000000000000000000000000000000,
					0,
					0E-32,
					0"/>
        <testData input="56"
                  expectedOutput="2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656,
					2091659496012996000000000,
					2091659496012996153907071.15721467377815296685,
					2091659496012996000000000,
					2091659496012996103110656"/>
        <testData input="110"
                  expectedOutput="592097202766467000000000000000000000000000000000,
					592097202766467029895522881558803977225493294301.15326061451748110694,
					592097202766467000000000000000000000000000000000,
					592097202766466993617016430120581649425527472128,
					592097202766467000000000000000000000000000000000,
					592097202766467029895522881558803977225493294301.15326061451748110694,
					592097202766467000000000000000000000000000000000,
					592097202766466993617016430120581649425527472128"/>
        <testData input="20"
                  expectedOutput="485165195.4097903,
					485165195.40979027796910683054,
					485165195.4097903,
					485165195.4097903,
					485165195.4097903,
					485165195.40979027796910683054,
					485165195.4097903,
					485165195.4097903"/>
    </testcase>
    <testcase testName="testAbsUsesCeiling"
              fieldName="testAbsUsesCeiling"
              dataType="Double"
              formula="ABS(CEILING(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12345" expectedOutput="21,
					21,
					21,
					21,
					21,
					21,
					21,
					21"/>
        <testData input="-1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-123456789.123456789"
                  expectedOutput="123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790"/>
        <testData input="123456789.123456789"
                  expectedOutput="123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790"/>
        <testData input="46" expectedOutput="46,
					46,
					46,
					46,
					46,
					46,
					46,
					46"/>
        <testData input="-0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.00034" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-.244" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-0.244" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-0.245" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input=".24456" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="0.24456" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="16" expectedOutput="16,
					16,
					16,
					16,
					16,
					16,
					16,
					16"/>
        <testData input="256"
                  expectedOutput="256,
					256,
					256,
					256,
					256,
					256,
					256,
					256"/>
        <testData input="-256"
                  expectedOutput="256,
					256,
					256,
					256,
					256,
					256,
					256,
					256"/>
    </testcase>
    <testcase testName="testAbsUsesFloor"
              fieldName="testAbsUsesFloor"
              dataType="Double"
              formula="ABS(FLOOR(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12345" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="-1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-123456789.123456789"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="123456789.123456789"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="46" expectedOutput="46,
					46,
					46,
					46,
					46,
					46,
					46,
					46"/>
        <testData input="-0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.00034" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-.244" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.244" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.245" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".24456" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.24456" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="16" expectedOutput="16,
					16,
					16,
					16,
					16,
					16,
					16,
					16"/>
        <testData input="256"
                  expectedOutput="256,
					256,
					256,
					256,
					256,
					256,
					256,
					256"/>
        <testData input="-256"
                  expectedOutput="256,
					256,
					256,
					256,
					256,
					256,
					256,
					256"/>
    </testcase>
    <testcase testName="testAbsUsesAbs"
              fieldName="testAbsUsesAbs"
              dataType="Double"
              formula="ABS(ABS(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12345"
                  expectedOutput="20.12345,
					20.12345,
					20.12345,
					20.12345,
					20.12345,
					20.12345,
					20.12345,
					20.12345"/>
        <testData input="-1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-123456789.123456789"
                  expectedOutput="123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568,
					123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568"/>
        <testData input="123456789.123456789"
                  expectedOutput="123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568,
					123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568"/>
        <testData input="46" expectedOutput="46,
					46,
					46,
					46,
					46,
					46,
					46,
					46"/>
        <testData input="-0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.00034"
                  expectedOutput="0.00034,
					0.00034,
					0.00034,
					0.00034,
					0.00034,
					0.00034,
					0.00034,
					0.00034"/>
        <testData input="-.244"
                  expectedOutput="0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244"/>
        <testData input="-0.244"
                  expectedOutput="0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244"/>
        <testData input="-0.245"
                  expectedOutput="0.245,
					0.245,
					0.245,
					0.245,
					0.245,
					0.245,
					0.245,
					0.245"/>
        <testData input=".24456"
                  expectedOutput="0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456"/>
        <testData input="0.24456"
                  expectedOutput="0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456"/>
        <testData input="16" expectedOutput="16,
					16,
					16,
					16,
					16,
					16,
					16,
					16"/>
        <testData input="256"
                  expectedOutput="256,
					256,
					256,
					256,
					256,
					256,
					256,
					256"/>
        <testData input="-256"
                  expectedOutput="256,
					256,
					256,
					256,
					256,
					256,
					256,
					256"/>
    </testcase>
    <testcase testName="testAbsUsesLog"
              fieldName="testAbsUsesLog"
              dataType="Double"
              formula="ABS(LOG(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="2"
                  expectedOutput="0.30102999566398114,
					0.3010299956639812,
					0.3010299956639812,
					0.30103,
					0.30102999566398114,
					0.3010299956639812,
					0.3010299956639812,
					0.30103"/>
        <testData input="3"
                  expectedOutput="0.47712125471966244,
					0.4771212547196624,
					0.47712125471966244,
					0.4771213,
					0.47712125471966244,
					0.4771212547196624,
					0.47712125471966244,
					0.4771213"/>
        <testData input="4"
                  expectedOutput="0.6020599913279623,
					0.6020599913279624,
					0.6020599913279624,
					0.60206,
					0.6020599913279623,
					0.6020599913279624,
					0.6020599913279624,
					0.60206"/>
        <testData input="5"
                  expectedOutput="0.6989700043360187,
					0.6989700043360188,
					0.6989700043360189,
					0.69897,
					0.6989700043360187,
					0.6989700043360188,
					0.6989700043360189,
					0.69897"/>
        <testData input="6"
                  expectedOutput="0.7781512503836435,
					0.7781512503836436,
					0.7781512503836436,
					0.7781513,
					0.7781512503836435,
					0.7781512503836436,
					0.7781512503836436,
					0.7781513"/>
        <testData input="10000" expectedOutput="4.0,
					4,
					4,
					4,
					4.0,
					4,
					4,
					4"/>
        <testData input="10" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="16"
                  expectedOutput="1.2041199826559246,
					1.2041199826559248,
					1.2041199826559248,
					1.20412,
					1.2041199826559246,
					1.2041199826559248,
					1.2041199826559248,
					1.20412"/>
        <testData input="2.56"
                  expectedOutput="0.40823996531184953,
					0.4082399653118496,
					0.4082399653118496,
					0.40824,
					0.40823996531184953,
					0.4082399653118496,
					0.4082399653118496,
					0.40824"/>
        <testData input="123456789.123456789"
                  expectedOutput="8.091514977603564,
					8.091514977603565,
					8.091514977603564,
					8.091515,
					8.091514977603564,
					8.091514977603565,
					8.091514977603564,
					8.091515"/>
    </testcase>
    <testcase testName="testAbsUsesLn"
              fieldName="testAbsUsesLn"
              dataType="Double"
              formula="ABS(LN(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="2"
                  expectedOutput="0.6931471805599453,
					0.6931471805599453,
					0.6931471805599453,
					0.6931472,
					0.6931471805599453,
					0.6931471805599453,
					0.6931471805599453,
					0.6931472"/>
        <testData input="3"
                  expectedOutput="1.0986122886681098,
					1.0986122886681097,
					1.0986122886681098,
					1.0986123,
					1.0986122886681098,
					1.0986122886681097,
					1.0986122886681098,
					1.0986123"/>
        <testData input="4"
                  expectedOutput="1.3862943611198906,
					1.3862943611198906,
					1.3862943611198906,
					1.3862944,
					1.3862943611198906,
					1.3862943611198906,
					1.3862943611198906,
					1.3862944"/>
        <testData input="5"
                  expectedOutput="1.6094379124341003,
					1.6094379124341004,
					1.6094379124341003,
					1.6094379,
					1.6094379124341003,
					1.6094379124341004,
					1.6094379124341003,
					1.6094379"/>
        <testData input="6"
                  expectedOutput="1.791759469228055,
					1.791759469228055,
					1.791759469228055,
					1.7917595,
					1.791759469228055,
					1.791759469228055,
					1.791759469228055,
					1.7917595"/>
        <testData input="10000"
                  expectedOutput="9.210340371976184,
					9.2103403719761827,
					9.210340371976184,
					9.2103404,
					9.210340371976184,
					9.2103403719761827,
					9.210340371976184,
					9.2103404"/>
        <testData input="10"
                  expectedOutput="2.302585092994046,
					2.3025850929940457,
					2.302585092994046,
					2.3025851,
					2.302585092994046,
					2.3025850929940457,
					2.302585092994046,
					2.3025851"/>
        <testData input="16"
                  expectedOutput="2.772588722239781,
					2.7725887222397812,
					2.772588722239781,
					2.7725887,
					2.772588722239781,
					2.7725887222397812,
					2.772588722239781,
					2.7725887"/>
        <testData input="2.56"
                  expectedOutput="0.9400072584914712,
					0.9400072584914711,
					0.9400072584914712,
					0.9400073,
					0.9400072584914712,
					0.9400072584914711,
					0.9400072584914712,
					0.9400073"/>
        <testData input="123456789.123456789"
                  expectedOutput="18.63140176716802,
					18.631401767168018,
					18.63140176716802,
					18.6314018,
					18.63140176716802,
					18.631401767168018,
					18.63140176716802,
					18.6314018"/>
    </testcase>
    <testcase testName="testAbsUsesSqrt"
              fieldName="testAbsUsesSqrt"
              dataType="Double"
              formula="ABS(SQRT(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="0" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="2"
                  expectedOutput="1.4142135623730951,
					1.414213562373095,
					1.4142135623730951,
					1.4142136,
					1.4142135623730951,
					1.414213562373095,
					1.4142135623730951,
					1.4142136"/>
        <testData input="3"
                  expectedOutput="1.7320508075688772,
					1.732050807568877,
					1.7320508075688772,
					1.7320508,
					1.7320508075688772,
					1.732050807568877,
					1.7320508075688772,
					1.7320508"/>
        <testData input="4" expectedOutput="2.0,
					2,
					2,
					2,
					2.0,
					2,
					2,
					2"/>
        <testData input="7"
                  expectedOutput="2.6457513110645907,
					2.645751311064591,
					2.6457513110645907,
					2.6457513,
					2.6457513110645907,
					2.645751311064591,
					2.6457513110645907,
					2.6457513"/>
        <testData input="12"
                  expectedOutput="3.4641016151377544,
					3.464101615137755,
					3.4641016151377544,
					3.4641016,
					3.4641016151377544,
					3.464101615137755,
					3.4641016151377544,
					3.4641016"/>
        <testData input="16" expectedOutput="4.0,
					4,
					4,
					4,
					4.0,
					4,
					4,
					4"/>
        <testData input="256" expectedOutput="16.0,
					16,
					16,
					16,
					16.0,
					16,
					16,
					16"/>
        <testData input="65536.00"
                  expectedOutput="256.0,
					256,
					256,
					256,
					256.0,
					256,
					256,
					256"/>
        <testData input="65536.16"
                  expectedOutput="256.0003124998093,
					256.0003124998093,
					256.00031249980924,
					256.0003125,
					256.0003124998093,
					256.0003124998093,
					256.00031249980924,
					256.0003125"/>
        <testData input="65536.64"
                  expectedOutput="256.0012499969483,
					256.0012499969483,
					256.0012499969483,
					256.00125,
					256.0012499969483,
					256.0012499969483,
					256.0012499969483,
					256.00125"/>
        <testData input="65536.4816"
                  expectedOutput="256.0009406232719,
					256.0009406232719,
					256.0009406232719,
					256.0009406,
					256.0009406232719,
					256.0009406232719,
					256.0009406232719,
					256.0009406"/>
    </testcase>
    <testcase testName="testAbsUsesRound"
              fieldName="testAbsUsesRound"
              dataType="Double"
              formula="ABS(ROUND(customnumber1__c,customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20,-1" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12345, 2"
                  expectedOutput="20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12"/>
        <testData input="20.123444,4"
                  expectedOutput="20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234"/>
        <testData input="20.123445,4"
                  expectedOutput="20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234"/>
        <testData input="20.12345,4"
                  expectedOutput="20.1235,
					20.1235,
					20.1235,
					20.1234,
					20.1235,
					20.1235,
					20.1235,
					20.1234"/>
        <testData input="20.12,4"
                  expectedOutput="20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12"/>
        <testData input="-1,2" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-1,0" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12"/>
        <testData input="46,
					0" expectedOutput="46,
					46,
					46,
					46,
					46,
					46,
					46,
					46"/>
        <testData input="-0,2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.00034,3"
                  expectedOutput="0.000,
					0,
					0,
					0,
					0.000,
					0,
					0,
					0"/>
        <testData input="-.244,2"
                  expectedOutput="0.24,
					0.24,
					0.24,
					0.24,
					0.24,
					0.24,
					0.24,
					0.24"/>
        <testData input="-0.244,2"
                  expectedOutput="0.24,
					0.24,
					0.24,
					0.24,
					0.24,
					0.24,
					0.24,
					0.24"/>
        <testData input="-0.245,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".24456,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.24456,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",16" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",2" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="-256,"
                  expectedOutput="256,
					256,
					256,
					256,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testAbsUsesTrunc"
              fieldName="testAbsUsesRound"
              dataType="Double"
              formula="ABS(TRUNC(customnumber1__c,customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20,-1" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12345, 2"
                  expectedOutput="20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12"/>
        <testData input="20.123444,4"
                  expectedOutput="20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234"/>
        <testData input="20.123445,4"
                  expectedOutput="20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234"/>
        <testData input="20.12345,4"
                  expectedOutput="20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234"/>
        <testData input="20.12,4"
                  expectedOutput="20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12"/>
        <testData input="-1,2" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-1,0" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12"/>
        <testData input="46,
					0" expectedOutput="46,
					46,
					46,
					46,
					46,
					46,
					46,
					46"/>
        <testData input="-0,2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.00034,3"
                  expectedOutput="0.000,
					0,
					0,
					0,
					0.000,
					0,
					0,
					0"/>
        <testData input="-.244,2"
                  expectedOutput="0.24,
					0.24,
					0.24,
					0.24,
					0.24,
					0.24,
					0.24,
					0.24"/>
        <testData input="-0.244,2"
                  expectedOutput="0.24,
					0.24,
					0.24,
					0.24,
					0.24,
					0.24,
					0.24,
					0.24"/>
        <testData input="-0.245,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".24456,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.24456,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",16" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",2" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="-256,"
                  expectedOutput="256,
					256,
					256,
					256,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testAbsUsesMOD"
              fieldName="testAbsUsesMOD"
              dataType="Double"
              formula="ABS(MOD(customnumber1__c,customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20,-1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20.12345, 2"
                  expectedOutput="0.12345,
					0.12345,
					0.12345,
					0.12345,
					0.12345,
					0.12345,
					0.12345,
					0.12345"/>
        <testData input="20.123444,13"
                  expectedOutput="7.123444,
					7.123444,
					7.123444,
					7.123444,
					7.123444,
					7.123444,
					7.123444,
					7.123444"/>
        <testData input="20.123445,7"
                  expectedOutput="6.123445,
					6.123445,
					6.123445,
					6.123445,
					6.123445,
					6.123445,
					6.123445,
					6.123445"/>
        <testData input="20.12345,23"
                  expectedOutput="20.12345,
					20.12345,
					20.12345,
					20.12345,
					20.12345,
					20.12345,
					20.12345,
					20.12345"/>
        <testData input="20.12,1"
                  expectedOutput="0.12,
					0.12,
					0.12,
					0.12,
					0.12,
					0.12,
					0.12,
					0.12"/>
        <testData input="-1,2" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-1,2654" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="1.123456789,
					1.123456789,
					1.12345679,
					1.1234568,
					1.123456789,
					1.123456789,
					1.12345679,
					1.1234568"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="1.123456789,
					1.123456789,
					1.12345679,
					1.1234568,
					1.123456789,
					1.123456789,
					1.12345679,
					1.1234568"/>
        <testData input="46,-456" expectedOutput="46,
					46,
					46,
					46,
					46,
					46,
					46,
					46"/>
        <testData input="-0,-1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.00034,3"
                  expectedOutput="0.00034,
					0.00034,
					0.00034,
					0.00034,
					0.00034,
					0.00034,
					0.00034,
					0.00034"/>
        <testData input="-.244,2"
                  expectedOutput="0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244"/>
        <testData input="-0.244,2"
                  expectedOutput="0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244"/>
        <testData input="-0.245,23223244"
                  expectedOutput="0.245,
					0.245,
					0.245,
					0.245,
					0.245,
					0.245,
					0.245,
					0.245"/>
        <testData input=".24456,123456789"
                  expectedOutput="0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456"/>
        <testData input="0.24456,0.000045"
                  expectedOutput="0.000030,
					0.00003,
					0.00003,
					0.00003,
					0.000030,
					0.00003,
					0.00003,
					0.00003"/>
        <testData input=",16" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",2" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="-256,16" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
    </testcase>
    <testcase testName="testAbsCurr"
              fieldName="testAbsCurr"
              dataType="Currency"
              formula="ABS(customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="0" expectedOutput="0,
					0E-32,
					0,
					0,
					0,
					0E-32,
					0,
					0"/>
        <testData input="20"
                  expectedOutput="20,
					20.00000000000000000000000000000000,
					20,
					20,
					20,
					20.00000000000000000000000000000000,
					20,
					20"/>
        <testData input="20.12345"
                  expectedOutput="20.12345,
					20.12345000000000000000000000000000,
					20.12345,
					20.12345,
					20.12345,
					20.12345000000000000000000000000000,
					20.12345,
					20.12345"/>
        <testData input="-1"
                  expectedOutput="1,
					1.00000000000000000000000000000000,
					1,
					1,
					1,
					1.00000000000000000000000000000000,
					1,
					1"/>
        <testData input="-123456789.123456789"
                  expectedOutput="123456789.123456789,
					123456789.12345678900000000000000000000000,
					123456789.12345679,
					123456789.1234568,
					123456789.123456789,
					123456789.12345678900000000000000000000000,
					123456789.12345679,
					123456789.1234568"/>
        <testData input="123456789.123456789"
                  expectedOutput="123456789.123456789,
					123456789.12345678900000000000000000000000,
					123456789.12345679,
					123456789.1234568,
					123456789.123456789,
					123456789.12345678900000000000000000000000,
					123456789.12345679,
					123456789.1234568"/>
        <testData input="46"
                  expectedOutput="46,
					46.00000000000000000000000000000000,
					46,
					46,
					46,
					46.00000000000000000000000000000000,
					46,
					46"/>
        <testData input="-0" expectedOutput="0,
					0E-32,
					0,
					0,
					0,
					0E-32,
					0,
					0"/>
        <testData input="-0.00034"
                  expectedOutput="0.00034,
					0.00034000000000000000000000000000,
					0.00034,
					0.00034,
					0.00034,
					0.00034000000000000000000000000000,
					0.00034,
					0.00034"/>
        <testData input="-.244"
                  expectedOutput="0.244,
					0.24400000000000000000000000000000,
					0.244,
					0.244,
					0.244,
					0.24400000000000000000000000000000,
					0.244,
					0.244"/>
        <testData input="-0.244"
                  expectedOutput="0.244,
					0.24400000000000000000000000000000,
					0.244,
					0.244,
					0.244,
					0.24400000000000000000000000000000,
					0.244,
					0.244"/>
        <testData input="-0.245"
                  expectedOutput="0.245,
					0.24500000000000000000000000000000,
					0.245,
					0.245,
					0.245,
					0.24500000000000000000000000000000,
					0.245,
					0.245"/>
        <testData input=".24456"
                  expectedOutput="0.24456,
					0.24456000000000000000000000000000,
					0.24456,
					0.24456,
					0.24456,
					0.24456000000000000000000000000000,
					0.24456,
					0.24456"/>
        <testData input="0.24456"
                  expectedOutput="0.24456,
					0.24456000000000000000000000000000,
					0.24456,
					0.24456,
					0.24456,
					0.24456000000000000000000000000000,
					0.24456,
					0.24456"/>
        <testData input="16"
                  expectedOutput="16,
					16.00000000000000000000000000000000,
					16,
					16,
					16,
					16.00000000000000000000000000000000,
					16,
					16"/>
        <testData input="256"
                  expectedOutput="256,
					256.00000000000000000000000000000000,
					256,
					256,
					256,
					256.00000000000000000000000000000000,
					256,
					256"/>
        <testData input="-256"
                  expectedOutput="256,
					256.00000000000000000000000000000000,
					256,
					256,
					256,
					256.00000000000000000000000000000000,
					256,
					256"/>
    </testcase>
    <testcase testName="testAbsSwapTypes"
              fieldName="testAbsSwapTypes"
              dataType="Double"
              formula="ABS(customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12345"
                  expectedOutput="20.12345,
					20.12345,
					20.12345,
					20.12345,
					20.12345,
					20.12345,
					20.12345,
					20.12345"/>
        <testData input="-1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-123456789.123456789"
                  expectedOutput="123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568,
					123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568"/>
        <testData input="123456789.123456789"
                  expectedOutput="123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568,
					123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568"/>
        <testData input="46" expectedOutput="46,
					46,
					46,
					46,
					46,
					46,
					46,
					46"/>
        <testData input="-0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.00034"
                  expectedOutput="0.00034,
					0.00034,
					0.00034,
					0.00034,
					0.00034,
					0.00034,
					0.00034,
					0.00034"/>
        <testData input="-.244"
                  expectedOutput="0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244"/>
        <testData input="-0.244"
                  expectedOutput="0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244"/>
        <testData input="-0.245"
                  expectedOutput="0.245,
					0.245,
					0.245,
					0.245,
					0.245,
					0.245,
					0.245,
					0.245"/>
        <testData input=".24456"
                  expectedOutput="0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456"/>
        <testData input="0.24456"
                  expectedOutput="0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456"/>
        <testData input="16" expectedOutput="16,
					16,
					16,
					16,
					16,
					16,
					16,
					16"/>
        <testData input="256"
                  expectedOutput="256,
					256,
					256,
					256,
					256,
					256,
					256,
					256"/>
        <testData input="-256"
                  expectedOutput="256,
					256,
					256,
					256,
					256,
					256,
					256,
					256"/>
    </testcase>
    <testcase testName="testAbsUsesIf"
              fieldName="testAbsUsesIf"
              dataType="Double"
              formula="ABS(IF(true,customnumber1__c,customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input=",24" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.0,0.0" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="0.00,0.00" expectedOutput="0.00,
					0,
					0,
					0,
					0.00,
					0,
					0,
					0"/>
        <testData input="0.000,0.000"
                  expectedOutput="0.000,
					0,
					0,
					0,
					0.000,
					0,
					0,
					0"/>
        <testData input="-1.0,99.0" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="99,
					-1" expectedOutput="99,
					99,
					99,
					99,
					99,
					99,
					99,
					99"/>
        <testData input="-20,-40" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="1.1111,1.1111"
                  expectedOutput="1.1111,
					1.1111,
					1.1111,
					1.1111,
					1.1111,
					1.1111,
					1.1111,
					1.1111"/>
        <testData input="1.11114,0.00000"
                  expectedOutput="1.11114,
					1.11114,
					1.11114,
					1.11114,
					1.11114,
					1.11114,
					1.11114,
					1.11114"/>
        <testData input="1.11115,0.00000"
                  expectedOutput="1.11115,
					1.11115,
					1.11115,
					1.11115,
					1.11115,
					1.11115,
					1.11115,
					1.11115"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="1.111112,
					1.111112,
					1.111112,
					1.111112,
					1.111112,
					1.111112,
					1.111112,
					1.111112"/>
        <testData input="123456789,123456789"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568,
					123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568,
					123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568,
					123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568"/>
        <testData input="600, 0.000600"
                  expectedOutput="600,
					600,
					600,
					600,
					600,
					600,
					600,
					600"/>
        <testData input="600, -600"
                  expectedOutput="600,
					600,
					600,
					600,
					600,
					600,
					600,
					600"/>
        <testData input="1.2345, 1.2345"
                  expectedOutput="1.2345,
					1.2345,
					1.2345,
					1.2345,
					1.2345,
					1.2345,
					1.2345,
					1.2345"/>
        <testData input="1.245, 0"
                  expectedOutput="1.245,
					1.245,
					1.245,
					1.245,
					1.245,
					1.245,
					1.245,
					1.245"/>
        <testData input="," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1," expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input=",12.123456789"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1.00596,240"
                  expectedOutput="1.00596,
					1.00596,
					1.00596,
					1.00596,
					1.00596,
					1.00596,
					1.00596,
					1.00596"/>
        <testData input="0,240" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="0.0000000000001,
					0.0000000000001,
					1E-13,
					0,
					0.0000000000001,
					0.0000000000001,
					1E-13,
					0"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="0.0000000000001,
					0.0000000000001,
					1E-13,
					0,
					0.0000000000001,
					0.0000000000001,
					1E-13,
					0"/>
    </testcase>
    <testcase testName="testAbsUsesCase"
              fieldName="testAbsUsesCase"
              dataType="Double"
              formula="ABS(CASE(customdate1__c,customdate2__c,customnumber1__c,customdate3__c,customnumber2__c,customnumber3__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customdate3" dataType="DateOnly"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customnumber3" dataType="Double"/>
        <testData input="2004:12:04,2004:12:04,200,2004:12:04,300,400"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="2004:12:04,2004:12:03,200,2004:12:04,300,400"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="2004:12:04,2004:12:04,200,2004:12:03,300,400"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="2004:12:05,2004:12:04,200,2004:12:04,300,400"
                  expectedOutput="400,
					400,
					400,
					400,
					400,
					400,
					400,
					400"/>
        <testData input=",2004:12:04,200,2004:12:04,300,400"
                  expectedOutput="400,
					400,
					400,
					400,
					400,
					400,
					400,
					400"/>
        <testData input=",,200,2004:12:04,300,400"
                  expectedOutput="400,
					400,
					400,
					400,
					400,
					400,
					400,
					400"/>
        <testData input="2004:12:04,2004:12:04,200,,300,400"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="2004:12:04,,200,2004:12:04,300,400"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="2004:12:04,2004:12:04,,2004:12:04,300,400"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:04,2004:12:05,200,2004:12:04,,400"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:04,2004:12:05,200,2004:12:06,,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:06,2004:12:04,200,2004:12:04,300,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",,,,,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testAbsUsesLen"
              fieldName="testAbsUsesLen"
              dataType="Double"
              formula="ABS(LEN(customtext1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="This is too good to be true"
                  expectedOutput="27,
					27,
					27,
					27,
					27,
					27,
					27,
					27"/>
        <testData input="making a way"
                  expectedOutput="12,
					12,
					12,
					12,
					12,
					12,
					12,
					12"/>
        <testData input="" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="blunder" expectedOutput="7,
					7,
					7,
					7,
					7,
					7,
					7,
					7"/>
        <testData input="makesense" expectedOutput="9,
					9,
					9,
					9,
					9,
					9,
					9,
					9"/>
        <testData input="does not make sense"
                  expectedOutput="19,
					19,
					19,
					19,
					19,
					19,
					19,
					19"/>
        <testData input="working my way"
                  expectedOutput="14,
					14,
					14,
					14,
					14,
					14,
					14,
					14"/>
        <testData input="e" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag"
                  expectedOutput="172,
					172,
					172,
					172,
					172,
					172,
					172,
					172"/>
        <testData input="250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_"
                  expectedOutput="52,
					52,
					52,
					52,
					52,
					52,
					52,
					52"/>
        <testData input="blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r"
                  expectedOutput="57,
					57,
					57,
					57,
					57,
					57,
					57,
					57"/>
    </testcase>
    <testcase testName="testAbsUsesValue"
              fieldName="testAbsUsesValue"
              dataType="Double"
              formula="ABS(VALUE(customtext1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12345"
                  expectedOutput="20.12345,
					20.12345,
					20.12345,
					20.12345,
					20.12345,
					20.12345,
					20.12345,
					20.12345"/>
        <testData input="-1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-123456789.123456789"
                  expectedOutput="123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568,
					123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568"/>
        <testData input="123456789.123456789"
                  expectedOutput="123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568,
					123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568"/>
        <testData input="46" expectedOutput="46,
					46,
					46,
					46,
					46,
					46,
					46,
					46"/>
        <testData input="-0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.00034"
                  expectedOutput="0.00034,
					0.00034,
					0.00034,
					0.00034,
					0.00034,
					0.00034,
					0.00034,
					0.00034"/>
        <testData input="-.244"
                  expectedOutput="0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244"/>
        <testData input="-0.244"
                  expectedOutput="0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244,
					0.244"/>
        <testData input="-0.245"
                  expectedOutput="0.245,
					0.245,
					0.245,
					0.245,
					0.245,
					0.245,
					0.245,
					0.245"/>
        <testData input=".24456"
                  expectedOutput="0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456"/>
        <testData input="0.24456"
                  expectedOutput="0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456"/>
        <testData input="16" expectedOutput="16,
					16,
					16,
					16,
					16,
					16,
					16,
					16"/>
        <testData input="256"
                  expectedOutput="256,
					256,
					256,
					256,
					256,
					256,
					256,
					256"/>
        <testData input="-256"
                  expectedOutput="256,
					256,
					256,
					256,
					256,
					256,
					256,
					256"/>
    </testcase>
    <testcase testName="testAbsUsesMinus"
              fieldName="testAbsUsesMinus"
              dataType="Double"
              formula="ABS((custompercent1__c-customcurrency1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <testData input=",24"
                  expectedOutput="24,
					24,
					24,
					24,
					null,
					null,
					null,
					null"/>
        <testData input="0.0,0.0" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="0.00,0.00" expectedOutput="0.00,
					0,
					0,
					0,
					0.00,
					0,
					0,
					0"/>
        <testData input="0.000,0.000"
                  expectedOutput="0.000,
					0,
					0,
					0,
					0.000,
					0,
					0,
					0"/>
        <testData input="-1.0,99.0"
                  expectedOutput="99.01,
					99.01,
					99.01,
					99.01,
					99.01,
					99.01,
					99.01,
					99.01"/>
        <testData input="99, -1"
                  expectedOutput="1.99,
					1.99,
					1.99,
					1.99,
					1.99,
					1.99,
					1.99,
					1.99"/>
        <testData input="-20,-40"
                  expectedOutput="39.8,
					39.8,
					39.8,
					39.8,
					39.8,
					39.8,
					39.8,
					39.8"/>
        <testData input="1.1111,1.1111"
                  expectedOutput="1.099989,
					1.099989,
					1.099989,
					1.099989,
					1.099989,
					1.099989,
					1.099989,
					1.099989"/>
        <testData input="1.11114,0.00000"
                  expectedOutput="0.0111114,
					0.0111114,
					0.0111114,
					0.0111114,
					0.0111114,
					0.0111114,
					0.0111114,
					0.0111114"/>
        <testData input="1.11115,0.00000"
                  expectedOutput="0.0111115,
					0.0111115,
					0.0111115,
					0.0111115,
					0.0111115,
					0.0111115,
					0.0111115,
					0.0111115"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="0.01106812,
					0.01106812,
					0.01106812,
					0.0110681,
					0.01106812,
					0.01106812,
					0.01106812,
					0.0110681"/>
        <testData input="123456789,123456789"
                  expectedOutput="122222221.11,
					122222221.11,
					122222221.11,
					122222221.11,
					122222221.11,
					122222221.11,
					122222221.11,
					122222221.11"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="122222221.23222222111,
					122222221.23222222111,
					122222221.23222223,
					122222221.2322222,
					122222221.23222222111,
					122222221.23222222111,
					122222221.23222223,
					122222221.2322222"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="124691357.01469135689,
					124691357.01469135689,
					124691357.01469135,
					124691357.0146914,
					124691357.01469135689,
					124691357.01469135689,
					124691357.01469135,
					124691357.0146914"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="122222221.23222222111,
					122222221.23222222111,
					122222221.23222223,
					122222221.2322222,
					122222221.23222222111,
					122222221.23222222111,
					122222221.23222223,
					122222221.2322222"/>
        <testData input="600, 0.000600"
                  expectedOutput="5.999400,
					5.9994,
					5.9994,
					5.9994,
					5.999400,
					5.9994,
					5.9994,
					5.9994"/>
        <testData input="600, -600"
                  expectedOutput="606,
					606,
					606,
					606,
					606,
					606,
					606,
					606"/>
        <testData input="1.2345, 1.2345"
                  expectedOutput="1.222155,
					1.222155,
					1.222155,
					1.222155,
					1.222155,
					1.222155,
					1.222155,
					1.222155"/>
        <testData input="1.245, 0"
                  expectedOutput="0.01245,
					0.01245,
					0.01245,
					0.01245,
					0.01245,
					0.01245,
					0.01245,
					0.01245"/>
        <testData input="," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1,"
                  expectedOutput="0.01,
					0.01,
					0.01,
					0.01,
					null,
					null,
					null,
					null"/>
        <testData input=",12.123456789"
                  expectedOutput="12.123456789,
					12.123456789,
					12.123456789,
					12.1234568,
					null,
					null,
					null,
					null"/>
        <testData input="1.00596,240"
                  expectedOutput="239.9899404,
					239.9899404,
					239.9899404,
					239.9899404,
					239.9899404,
					239.9899404,
					239.9899404,
					239.9899404"/>
        <testData input="0,240"
                  expectedOutput="240,
					240,
					240,
					240,
					240,
					240,
					240,
					240"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="999.999999999999999,
					999.999999999999999,
					1000,
					1000,
					999.999999999999999,
					999.999999999999999,
					1000,
					1000"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="1000.000000000000001,
					1000.000000000000001,
					1000,
					1000,
					1000.000000000000001,
					1000.000000000000001,
					1000,
					1000"/>
    </testcase>
    <testcase testName="testAbsUsesPlus"
              fieldName="testAbsUsesPlus"
              dataType="Double"
              formula="ABS((custompercent1__c+customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input=",24"
                  expectedOutput="24,
					24,
					24,
					24,
					null,
					null,
					null,
					null"/>
        <testData input="0.0,0.0" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="0.00,0.00" expectedOutput="0.00,
					0,
					0,
					0,
					0.00,
					0,
					0,
					0"/>
        <testData input="0.000,0.000"
                  expectedOutput="0.000,
					0,
					0,
					0,
					0.000,
					0,
					0,
					0"/>
        <testData input="-1.0,99.0"
                  expectedOutput="98.99,
					98.99,
					98.99,
					98.99,
					98.99,
					98.99,
					98.99,
					98.99"/>
        <testData input="99, -1"
                  expectedOutput="0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01"/>
        <testData input="-20,-40"
                  expectedOutput="40.2,
					40.2,
					40.2,
					40.2,
					40.2,
					40.2,
					40.2,
					40.2"/>
        <testData input="1.1111,1.1111"
                  expectedOutput="1.122211,
					1.122211,
					1.122211,
					1.122211,
					1.122211,
					1.122211,
					1.122211,
					1.122211"/>
        <testData input="1.11114,0.00000"
                  expectedOutput="0.0111114,
					0.0111114,
					0.0111114,
					0.0111114,
					0.0111114,
					0.0111114,
					0.0111114,
					0.0111114"/>
        <testData input="1.11115,0.00000"
                  expectedOutput="0.0111115,
					0.0111115,
					0.0111115,
					0.0111115,
					0.0111115,
					0.0111115,
					0.0111115,
					0.0111115"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="0.01115412,
					0.01115412,
					0.01115412,
					0.0111541,
					0.01115412,
					0.01115412,
					0.01115412,
					0.0111541"/>
        <testData input="123456789,123456789"
                  expectedOutput="124691356.89,
					124691356.89,
					124691356.89,
					124691356.89,
					124691356.89,
					124691356.89,
					124691356.89,
					124691356.89"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="124691357.01469135689,
					124691357.01469135689,
					124691357.01469135,
					124691357.0146914,
					124691357.01469135689,
					124691357.01469135689,
					124691357.01469135,
					124691357.0146914"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="122222221.23222222111,
					122222221.23222222111,
					122222221.23222223,
					122222221.2322222,
					122222221.23222222111,
					122222221.23222222111,
					122222221.23222223,
					122222221.2322222"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="124691357.01469135689,
					124691357.01469135689,
					124691357.01469135,
					124691357.0146914,
					124691357.01469135689,
					124691357.01469135689,
					124691357.01469135,
					124691357.0146914"/>
        <testData input="600, 0.000600"
                  expectedOutput="6.000600,
					6.0006,
					6.0006,
					6.0006,
					6.000600,
					6.0006,
					6.0006,
					6.0006"/>
        <testData input="600, -600"
                  expectedOutput="594,
					594,
					594,
					594,
					594,
					594,
					594,
					594"/>
        <testData input="1.2345, 1.2345"
                  expectedOutput="1.246845,
					1.246845,
					1.246845,
					1.246845,
					1.246845,
					1.246845,
					1.246845,
					1.246845"/>
        <testData input="1.245, 0"
                  expectedOutput="0.01245,
					0.01245,
					0.01245,
					0.01245,
					0.01245,
					0.01245,
					0.01245,
					0.01245"/>
        <testData input="," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1,"
                  expectedOutput="0.01,
					0.01,
					0.01,
					0.01,
					null,
					null,
					null,
					null"/>
        <testData input=",12.123456789"
                  expectedOutput="12.123456789,
					12.123456789,
					12.123456789,
					12.1234568,
					null,
					null,
					null,
					null"/>
        <testData input="1.00596,240"
                  expectedOutput="240.0100596,
					240.0100596,
					240.0100596,
					240.0100596,
					240.0100596,
					240.0100596,
					240.0100596,
					240.0100596"/>
        <testData input="0,240"
                  expectedOutput="240,
					240,
					240,
					240,
					240,
					240,
					240,
					240"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="1000.000000000000001,
					1000.000000000000001,
					1000,
					1000,
					1000.000000000000001,
					1000.000000000000001,
					1000,
					1000"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="999.999999999999999,
					999.999999999999999,
					1000,
					1000,
					999.999999999999999,
					999.999999999999999,
					1000,
					1000"/>
    </testcase>
    <testcase testName="testRoundUsesCase"
              fieldName="testRoundUsesCase"
              dataType="Double"
              formula="ROUND(CASE(customdate1__c,customdate2__c,customnumber1__c,customdate3__c,customnumber2__c,customnumber3__c),customformula1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customdate3" dataType="DateOnly"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customnumber3" dataType="Double"/>
        <referenceField fieldName="customformula1"
                        dataType="Double"
                        formula="CASE(customdatetime1__c,customdatetime2__c,customnumber4__c,customdatetime3__c,customnumber5__c,customnumber6__c)">
            <referenceField fieldName="customdatetime1" dataType="DateTime"/>
            <referenceField fieldName="customdatetime2" dataType="DateTime"/>
            <referenceField fieldName="customnumber4" dataType="Double"/>
            <referenceField fieldName="customdatetime3" dataType="DateTime"/>
            <referenceField fieldName="customnumber5" dataType="Double"/>
            <referenceField fieldName="customnumber6" dataType="Double"/>
        </referenceField>
        <testData input="2004:12:04,2004:12:04,200,2004:12:04,300,400,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="2004:12:04,2004:12:03,200,2004:12:04,300,400,1999:12:31:24:00:00,2000:01:01:00:00:00,0,1999:12:31:23:59:59,1,2"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="2004:12:04,2004:12:04,200,2004:12:03,300,400,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="2004:12:05,2004:12:04,200,2004:12:04,300,400,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="400,
					400,
					400,
					400,
					400,
					400,
					400,
					400"/>
        <testData input=",2004:12:04,200,2004:12:04,300,400,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="400,
					400,
					400,
					400,
					400,
					400,
					400,
					400"/>
        <testData input=",,200,2004:12:04,300,400,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="400,
					400,
					400,
					400,
					400,
					400,
					400,
					400"/>
        <testData input="2004:12:04,2004:12:04,200,,300,400,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="2004:12:04,,200,2004:12:04,300,400,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="2004:12:04,2004:12:04,,2004:12:04,300,400,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:04,2004:12:05,200,2004:12:04,,400,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:04,2004:12:05,200,2004:12:06,,,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:06,2004:12:04,200,2004:12:04,300,,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",,,,,,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testRoundSimple"
              fieldName="testRoundSimple"
              dataType="Double"
              formula="ROUND(customnumber1__c,customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input=".002,2" expectedOutput="0.00,
					0,
					0,
					0,
					0.00,
					0,
					0,
					0"/>
        <testData input=".002,-2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-.002,2" expectedOutput="0.00,
					0,
					0,
					0,
					0.00,
					0,
					0,
					0"/>
        <testData input="-.002,-2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20000.000,2"
                  expectedOutput="20000.00,
					20000,
					20000,
					20000,
					20000.00,
					20000,
					20000,
					20000"/>
        <testData input="20000.000,-2"
                  expectedOutput="20000,
					20000,
					20000,
					20000,
					20000,
					20000,
					20000,
					20000"/>
        <testData input="-20000.000,2"
                  expectedOutput="-20000.00,
					-20000,
					-20000,
					-20000,
					-20000.00,
					-20000,
					-20000,
					-20000"/>
        <testData input="-20000.000,2"
                  expectedOutput="-20000.00,
					-20000,
					-20000,
					-20000,
					-20000.00,
					-20000,
					-20000,
					-20000"/>
        <testData input="4.47,1"
                  expectedOutput="4.5,
					4.5,
					4.5,
					4.5,
					4.5,
					4.5,
					4.5,
					4.5"/>
        <testData input="4.47,-1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-4.47,1"
                  expectedOutput="-4.5,
					-4.5,
					-4.5,
					-4.5,
					-4.5,
					-4.5,
					-4.5,
					-4.5"/>
        <testData input="-4.47,-1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123456.7895,2"
                  expectedOutput="123456.79,
					123456.79,
					123456.79,
					123456.79,
					123456.79,
					123456.79,
					123456.79,
					123456.79"/>
        <testData input="123456.7895,-2"
                  expectedOutput="123500,
					123500,
					123500,
					123500,
					123500,
					123500,
					123500,
					123500"/>
        <testData input="-123456.7895,2"
                  expectedOutput="-123456.79,
					-123456.79,
					-123456.79,
					-123456.79,
					-123456.79,
					-123456.79,
					-123456.79,
					-123456.79"/>
        <testData input="-123456.7895,-2"
                  expectedOutput="-123500,
					-123500,
					-123500,
					-123500,
					-123500,
					-123500,
					-123500,
					-123500"/>
        <testData input="123456.3335,2"
                  expectedOutput="123456.33,
					123456.33,
					123456.33,
					123456.33,
					123456.33,
					123456.33,
					123456.33,
					123456.33"/>
        <testData input="123456.3335,-2"
                  expectedOutput="123500,
					123500,
					123500,
					123500,
					123500,
					123500,
					123500,
					123500"/>
        <testData input="-123456.3335,2"
                  expectedOutput="-123456.33,
					-123456.33,
					-123456.33,
					-123456.33,
					-123456.33,
					-123456.33,
					-123456.33,
					-123456.33"/>
        <testData input="-123456.3335,-2"
                  expectedOutput="-123500,
					-123500,
					-123500,
					-123500,
					-123500,
					-123500,
					-123500,
					-123500"/>
        <testData input=".2345,2"
                  expectedOutput="0.23,
					0.23,
					0.23,
					0.23,
					0.23,
					0.23,
					0.23,
					0.23"/>
        <testData input=".2345,-2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-.2345,2"
                  expectedOutput="-0.23,
					-0.23,
					-0.23,
					-0.23,
					-0.23,
					-0.23,
					-0.23,
					-0.23"/>
        <testData input="-.2345,-2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".2345,1"
                  expectedOutput="0.2,
					0.2,
					0.2,
					0.2,
					0.2,
					0.2,
					0.2,
					0.2"/>
        <testData input=".2345,-1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-.2345,1"
                  expectedOutput="-0.2,
					-0.2,
					-0.2,
					-0.2,
					-0.2,
					-0.2,
					-0.2,
					-0.2"/>
        <testData input="-.2345,-1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="1234.567,0"
                  expectedOutput="1235,
					1235,
					1235,
					1235,
					1235,
					1235,
					1235,
					1235"/>
        <testData input=".3333,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".002,2" expectedOutput="0.00,
					0,
					0,
					0,
					0.00,
					0,
					0,
					0"/>
        <testData input=".002,-2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-.002,2" expectedOutput="0.00,
					0,
					0,
					0,
					0.00,
					0,
					0,
					0"/>
        <testData input="-.002,-2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20000.000,2"
                  expectedOutput="20000.00,
					20000,
					20000,
					20000,
					20000.00,
					20000,
					20000,
					20000"/>
        <testData input="20000.000,-2"
                  expectedOutput="20000,
					20000,
					20000,
					20000,
					20000,
					20000,
					20000,
					20000"/>
        <testData input="-20000.000,2"
                  expectedOutput="-20000.00,
					-20000,
					-20000,
					-20000,
					-20000.00,
					-20000,
					-20000,
					-20000"/>
        <testData input="-20000.000,2"
                  expectedOutput="-20000.00,
					-20000,
					-20000,
					-20000,
					-20000.00,
					-20000,
					-20000,
					-20000"/>
    </testcase>
    <testcase testName="testRoundSwapTypes"
              fieldName="testRoundSwapTypes"
              dataType="Double"
              formula="ROUND(customnumber1__c,customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20,-1" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12345, 2"
                  expectedOutput="20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12"/>
        <testData input="20.123444,4"
                  expectedOutput="20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234"/>
        <testData input="20.123445,4"
                  expectedOutput="20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234"/>
        <testData input="20.12345,4"
                  expectedOutput="20.1235,
					20.1235,
					20.1235,
					20.1234,
					20.1235,
					20.1235,
					20.1235,
					20.1234"/>
        <testData input="20.12,4"
                  expectedOutput="20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12"/>
        <testData input="-1,2" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-1,0" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="-123456789.12,
					-123456789.12,
					-123456789.12,
					-123456789.12,
					-123456789.12,
					-123456789.12,
					-123456789.12,
					-123456789.12"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12"/>
        <testData input="46,
					0" expectedOutput="46,
					46,
					46,
					46,
					46,
					46,
					46,
					46"/>
        <testData input="-0,2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.00034,3"
                  expectedOutput="0.000,
					0,
					0,
					0,
					0.000,
					0,
					0,
					0"/>
        <testData input="-.244,2"
                  expectedOutput="-0.24,
					-0.24,
					-0.24,
					-0.24,
					-0.24,
					-0.24,
					-0.24,
					-0.24"/>
        <testData input="-0.244,2"
                  expectedOutput="-0.24,
					-0.24,
					-0.24,
					-0.24,
					-0.24,
					-0.24,
					-0.24,
					-0.24"/>
        <testData input="-0.245,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".24456,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.24456,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",16" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",2" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="-256,"
                  expectedOutput="-256,
					-256,
					-256,
					-256,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testRoundUsesExp"
              fieldName="testRoundUsesExp"
              dataType="Double"
              formula="ROUND(EXP(customnumber1__c),CEILING(customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,0" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="0,1" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="1,2"
                  expectedOutput="2.72,
					2.72,
					2.72,
					2.72,
					2.72,
					2.72,
					2.72,
					2.72"/>
        <testData input="2,4"
                  expectedOutput="7.3891,
					7.3891,
					7.3891,
					7.3891,
					7.3891,
					7.3891,
					7.3891,
					7.3891"/>
        <testData input="-1,-12" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-10,2" expectedOutput="0.00,
					0,
					0,
					0,
					0.00,
					0,
					0,
					0"/>
        <testData input="-100,-1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="56,5"
                  expectedOutput="2091659496012996000000000,
					2091659496012996153907071.15721,
					2091659496012996000000000,
					2091659496012996103110656,
					2091659496012996000000000,
					2091659496012996153907071.15721,
					2091659496012996000000000,
					2091659496012996103110656"/>
        <testData input="56,0"
                  expectedOutput="2091659496012996000000000,
					2091659496012996153907071,
					2091659496012996000000000,
					2091659496012996103110656,
					2091659496012996000000000,
					2091659496012996153907071,
					2091659496012996000000000,
					2091659496012996103110656"/>
        <testData input="56,12"
                  expectedOutput="2091659496012996000000000,
					2091659496012996153907071.157214673778,
					2091659496012996000000000,
					2091659496012996103110656,
					2091659496012996000000000,
					2091659496012996153907071.157214673778,
					2091659496012996000000000,
					2091659496012996103110656"/>
        <testData input="," expectedOutput="1,
					1,
					1,
					1,
					null,
					null,
					null,
					null"/>
        <testData input=",2" expectedOutput="1.0,
					1,
					1,
					1,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testRoundUsesFloorAbs"
              fieldName="testRoundUsesFloorAbs"
              dataType="Double"
              formula="ROUND(FLOOR(customnumber1__c),ABS(customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20,-1" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12345, 2"
                  expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.123444,4"
                  expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.123445,4"
                  expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12345,4"
                  expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12,4" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="-1,2" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-1,0" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="-123456789,
					-123456789,
					-123456789,
					-123456789,
					-123456789,
					-123456789,
					-123456789,
					-123456789"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="46,
					0" expectedOutput="46,
					46,
					46,
					46,
					46,
					46,
					46,
					46"/>
        <testData input="-0,2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.00034,3" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-.244,2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.244,2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.245,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".24456,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.24456,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",16" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",2" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="-256,"
                  expectedOutput="-256,
					-256,
					-256,
					-256,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testRoundUsesLog"
              fieldName="testRoundUsesLog"
              dataType="Double"
              formula="ROUND(LOG(customnumber1__c),customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="1,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2,1"
                  expectedOutput="0.3,
					0.3,
					0.3,
					0.3,
					0.3,
					0.3,
					0.3,
					0.3"/>
        <testData input="3,2"
                  expectedOutput="0.48,
					0.48,
					0.48,
					0.48,
					0.48,
					0.48,
					0.48,
					0.48"/>
        <testData input="4.1234,2"
                  expectedOutput="0.62,
					0.62,
					0.62,
					0.62,
					0.62,
					0.62,
					0.62,
					0.62"/>
        <testData input="5.000000008,8"
                  expectedOutput="0.69897001,
					0.69897001,
					0.69897001,
					0.69897,
					0.69897001,
					0.69897001,
					0.69897001,
					0.69897"/>
        <testData input="-200,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="10000,-2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="10,10" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="16,16"
                  expectedOutput="1.2041199826559246,
					1.2041199826559248,
					1.2041199826559248,
					1.20412,
					1.2041199826559246,
					1.2041199826559248,
					1.2041199826559248,
					1.20412"/>
        <testData input="2.56,19"
                  expectedOutput="0.40823996531184953,
					0.4082399653118496,
					0.4082399653118496,
					0.40824,
					0.40823996531184953,
					0.4082399653118496,
					0.4082399653118496,
					0.40824"/>
        <testData input="123456789.123456789,12"
                  expectedOutput="8.091514977604,
					8.091514977604,
					8.091514977604,
					8.091515,
					8.091514977604,
					8.091514977604,
					8.091514977604,
					8.091515"/>
    </testcase>
    <testcase testName="testRoundUsesLn"
              fieldName="testRoundUsesLn"
              dataType="Double"
              formula="ROUND(LN(customnumber1__c),customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="1,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2,1"
                  expectedOutput="0.7,
					0.7,
					0.7,
					0.7,
					0.7,
					0.7,
					0.7,
					0.7"/>
        <testData input="3,2"
                  expectedOutput="1.10,
					1.1,
					1.1,
					1.1,
					1.10,
					1.1,
					1.1,
					1.1"/>
        <testData input="4.1234,2"
                  expectedOutput="1.42,
					1.42,
					1.42,
					1.42,
					1.42,
					1.42,
					1.42,
					1.42"/>
        <testData input="5.000000008,8"
                  expectedOutput="1.60943791,
					1.60943791,
					1.60943791,
					1.6094379,
					1.60943791,
					1.60943791,
					1.60943791,
					1.6094379"/>
        <testData input="-200,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="10000,-2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="10,10"
                  expectedOutput="2.3025850930,
					2.302585093,
					2.302585093,
					2.3025851,
					2.3025850930,
					2.302585093,
					2.302585093,
					2.3025851"/>
        <testData input="16,16"
                  expectedOutput="2.772588722239781,
					2.7725887222397812,
					2.772588722239781,
					2.7725887,
					2.772588722239781,
					2.7725887222397812,
					2.772588722239781,
					2.7725887"/>
        <testData input="2.56,19"
                  expectedOutput="0.9400072584914712,
					0.9400072584914711,
					0.9400072584914712,
					0.9400073,
					0.9400072584914712,
					0.9400072584914711,
					0.9400072584914712,
					0.9400073"/>
        <testData input="123456789.123456789,12"
                  expectedOutput="18.631401767168,
					18.631401767168,
					18.631401767168,
					18.6314018,
					18.631401767168,
					18.631401767168,
					18.631401767168,
					18.6314018"/>
    </testcase>
    <testcase testName="testRoundUsesSqrt"
              fieldName="testRoundUsesSqrt"
              dataType="Double"
              formula="ROUND(SQRT(customnumber1__c),customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20,-1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20.12345, 2"
                  expectedOutput="4.49,
					4.49,
					4.49,
					4.49,
					4.49,
					4.49,
					4.49,
					4.49"/>
        <testData input="20.123444,4"
                  expectedOutput="4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859"/>
        <testData input="20.123445,4"
                  expectedOutput="4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859"/>
        <testData input="20.12345,4"
                  expectedOutput="4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859"/>
        <testData input="20.12,4"
                  expectedOutput="4.4855,
					4.4855,
					4.4855,
					4.4855,
					4.4855,
					4.4855,
					4.4855,
					4.4855"/>
        <testData input="-1,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1,0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="11111.11,
					11111.11,
					11111.11,
					11111.11,
					11111.11,
					11111.11,
					11111.11,
					11111.11"/>
        <testData input="46,
					0" expectedOutput="7,
					7,
					7,
					7,
					7,
					7,
					7,
					7"/>
        <testData input="-0,2" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="-0.00034,3"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-.244,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.244,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.245,0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input=".24456,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.24456,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",16"
                  expectedOutput="0.0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",2" expectedOutput="0.0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="-256,"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testRoundUsesRoundMinus"
              fieldName="testRoundUsesRoundMinus"
              dataType="Double"
              formula="ROUND(ROUND(custompercent1__c,customnumber1__c),customformula1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customformula1"
                        dataType="Double"
                        formula="(customcurrency1__c-customcurrency2__c)">
            <referenceField fieldName="customcurrency1" dataType="Currency"/>
            <referenceField fieldName="customcurrency2" dataType="Currency"/>
        </referenceField>
        <testData input="123456789,123456789,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="12345678,123456789,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="12345678,1234567,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=",10.24,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="10.24,,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="123.23456789,0,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123.23456789,1,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123.23456789,2,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123.23456789,3,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123.23456789,4,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123.23456789,5,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123.23456789,6,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123.23456789,7,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123.23456789,8,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123.23456789,9,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123.23456780,123.123456789,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123.23456789,123.123456780,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-200.434,200.434, 200, 300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="200, -200.434, 200,300"
                  expectedOutput="0,
					0,
					0,
					null,
					0,
					0,
					0,
					null"/>
        <testData input=",,," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="200,,,"
                  expectedOutput="2,
					2,
					2,
					2,
					null,
					null,
					null,
					null"/>
        <testData input=",1,,10"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testRoundUsesIf"
              fieldName="testRoundUsesIf"
              dataType="Double"
              formula="ROUND(IF(customcheckbox1__c,customnumber1__c,customnumber2__c),customnumber3__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customcheckbox1" dataType="Boolean"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customnumber3" dataType="Double"/>
        <testData input="true,100,200,400"
                  expectedOutput="100,
					100,
					100,
					100,
					100,
					100,
					100,
					100"/>
        <testData input="false,123456789,123456789,123456789"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="true,45.4356,45,900"
                  expectedOutput="45.4356,
					45.4356,
					45.4356,
					45.4356,
					45.4356,
					45.4356,
					45.4356,
					45.4356"/>
        <testData input="true,0.00000984,0.9,0.4560001"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="false,-200,-0.000000008,-0.0000012"
                  expectedOutput="0,
					0,
					0,
					null,
					0,
					0,
					0,
					null"/>
    </testcase>
    <testcase testName="testTruncSimple"
              fieldName="testTruncSimple"
              dataType="Double"
              formula="TRUNC(customnumber1__c,customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input=".002,2" expectedOutput="0.00,
					0,
					0,
					0,
					0.00,
					0,
					0,
					0"/>
        <testData input=".002,-2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-.002,2" expectedOutput="0.00,
					0,
					0,
					0,
					0.00,
					0,
					0,
					0"/>
        <testData input="-.002,-2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20000.000,2"
                  expectedOutput="20000.00,
					20000,
					20000,
					20000,
					20000.00,
					20000,
					20000,
					20000"/>
        <testData input="20000.000,-2"
                  expectedOutput="20000,
					20000,
					20000,
					20000,
					20000,
					20000,
					20000,
					20000"/>
        <testData input="-20000.000,2"
                  expectedOutput="-20000.00,
					-20000,
					-20000,
					-20000,
					-20000.00,
					-20000,
					-20000,
					-20000"/>
        <testData input="-20000.000,2"
                  expectedOutput="-20000.00,
					-20000,
					-20000,
					-20000,
					-20000.00,
					-20000,
					-20000,
					-20000"/>
        <testData input="4.47,1"
                  expectedOutput="4.4,
					4.4,
					4.4,
					4.4,
					4.4,
					4.4,
					4.4,
					4.4"/>
        <testData input="4.47,-1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-4.47,1"
                  expectedOutput="-4.4,
					-4.4,
					-4.4,
					-4.4,
					-4.4,
					-4.4,
					-4.4,
					-4.4"/>
        <testData input="-4.47,-1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123456.7895,2"
                  expectedOutput="123456.78,
					123456.78,
					123456.78,
					123456.78,
					123456.78,
					123456.78,
					123456.78,
					123456.78"/>
        <testData input="123456.7895,-2"
                  expectedOutput="123400,
					123400,
					123400,
					123400,
					123400,
					123400,
					123400,
					123400"/>
        <testData input="-123456.7895,2"
                  expectedOutput="-123456.78,
					-123456.78,
					-123456.78,
					-123456.78,
					-123456.78,
					-123456.78,
					-123456.78,
					-123456.78"/>
        <testData input="-123456.7895,-2"
                  expectedOutput="-123400,
					-123400,
					-123400,
					-123400,
					-123400,
					-123400,
					-123400,
					-123400"/>
        <testData input="123456.3335,2"
                  expectedOutput="123456.33,
					123456.33,
					123456.33,
					123456.33,
					123456.33,
					123456.33,
					123456.33,
					123456.33"/>
        <testData input="123456.3335,-2"
                  expectedOutput="123400,
					123400,
					123400,
					123400,
					123400,
					123400,
					123400,
					123400"/>
        <testData input="-123456.3335,2"
                  expectedOutput="-123456.33,
					-123456.33,
					-123456.33,
					-123456.33,
					-123456.33,
					-123456.33,
					-123456.33,
					-123456.33"/>
        <testData input="-123456.3335,-2"
                  expectedOutput="-123400,
					-123400,
					-123400,
					-123400,
					-123400,
					-123400,
					-123400,
					-123400"/>
        <testData input=".2345,2"
                  expectedOutput="0.23,
					0.23,
					0.23,
					0.23,
					0.23,
					0.23,
					0.23,
					0.23"/>
        <testData input=".2345,-2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-.2345,2"
                  expectedOutput="-0.23,
					-0.23,
					-0.23,
					-0.23,
					-0.23,
					-0.23,
					-0.23,
					-0.23"/>
        <testData input="-.2345,-2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".2345,1"
                  expectedOutput="0.2,
					0.2,
					0.2,
					0.2,
					0.2,
					0.2,
					0.2,
					0.2"/>
        <testData input=".2345,-1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-.2345,1"
                  expectedOutput="-0.2,
					-0.2,
					-0.2,
					-0.2,
					-0.2,
					-0.2,
					-0.2,
					-0.2"/>
        <testData input="-.2345,-1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="1234.567,0"
                  expectedOutput="1234,
					1234,
					1234,
					1234,
					1234,
					1234,
					1234,
					1234"/>
        <testData input=".3333,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".002,2" expectedOutput="0.00,
					0,
					0,
					0,
					0.00,
					0,
					0,
					0"/>
        <testData input=".002,-2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-.002,2" expectedOutput="0.00,
					0,
					0,
					0,
					0.00,
					0,
					0,
					0"/>
        <testData input="-.002,-2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20000.000,2"
                  expectedOutput="20000.00,
					20000,
					20000,
					20000,
					20000.00,
					20000,
					20000,
					20000"/>
        <testData input="20000.000,-2"
                  expectedOutput="20000,
					20000,
					20000,
					20000,
					20000,
					20000,
					20000,
					20000"/>
        <testData input="-20000.000,2"
                  expectedOutput="-20000.00,
					-20000,
					-20000,
					-20000,
					-20000.00,
					-20000,
					-20000,
					-20000"/>
        <testData input="-20000.000,2"
                  expectedOutput="-20000.00,
					-20000,
					-20000,
					-20000,
					-20000.00,
					-20000,
					-20000,
					-20000"/>
    </testcase>
    <testcase testName="testTruncSwapTypes"
              fieldName="testTruncSwapTypes"
              dataType="Double"
              formula="TRUNC(customnumber1__c,customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20,-1" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12345, 2"
                  expectedOutput="20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12"/>
        <testData input="20.123444,4"
                  expectedOutput="20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234"/>
        <testData input="20.123445,4"
                  expectedOutput="20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234"/>
        <testData input="20.12345,4"
                  expectedOutput="20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234,
					20.1234"/>
        <testData input="20.12,4"
                  expectedOutput="20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12,
					20.12"/>
        <testData input="-1,2" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-1,0" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="-123456789.12,
					-123456789.12,
					-123456789.12,
					-123456789.12,
					-123456789.12,
					-123456789.12,
					-123456789.12,
					-123456789.12"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12,
					123456789.12"/>
        <testData input="46,
					0" expectedOutput="46,
					46,
					46,
					46,
					46,
					46,
					46,
					46"/>
        <testData input="-0,2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.00034,3"
                  expectedOutput="0.000,
					0,
					0,
					0,
					0.000,
					0,
					0,
					0"/>
        <testData input="-.244,2"
                  expectedOutput="-0.24,
					-0.24,
					-0.24,
					-0.24,
					-0.24,
					-0.24,
					-0.24,
					-0.24"/>
        <testData input="-0.244,2"
                  expectedOutput="-0.24,
					-0.24,
					-0.24,
					-0.24,
					-0.24,
					-0.24,
					-0.24,
					-0.24"/>
        <testData input="-0.245,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".24456,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.24456,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",16" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",2" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="-256,"
                  expectedOutput="-256,
					-256,
					-256,
					-256,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testTruncUsesExp"
              fieldName="testTruncUsesExp"
              dataType="Double"
              formula="TRUNC(EXP(customnumber1__c),CEILING(customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,0" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="0,1" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="1,2"
                  expectedOutput="2.71,
					2.71,
					2.71,
					2.71,
					2.71,
					2.71,
					2.71,
					2.71"/>
        <testData input="2,4"
                  expectedOutput="7.3890,
					7.389,
					7.389,
					7.389,
					7.3890,
					7.389,
					7.389,
					7.389"/>
        <testData input="-1,-12" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-10,2" expectedOutput="0.00,
					0,
					0,
					0,
					0.00,
					0,
					0,
					0"/>
        <testData input="-100,-1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="56,5"
                  expectedOutput="2091659496012996000000000,
					2091659496012996153907071.15721,
					2091659496012996000000000,
					2091659496012995834675200,
					2091659496012996000000000,
					2091659496012996153907071.15721,
					2091659496012996000000000,
					2091659496012995834675200"/>
        <testData input="56,0"
                  expectedOutput="2091659496012996000000000,
					2091659496012996153907071,
					2091659496012996000000000,
					2091659496012996103110656,
					2091659496012996000000000,
					2091659496012996153907071,
					2091659496012996000000000,
					2091659496012996103110656"/>
        <testData input="56,12"
                  expectedOutput="2091659496012996000000000,
					2091659496012996153907071.157214673778,
					2091659496012996000000000,
					2091659496012996103110656,
					2091659496012996000000000,
					2091659496012996153907071.157214673778,
					2091659496012996000000000,
					2091659496012996103110656"/>
        <testData input="," expectedOutput="1,
					1,
					1,
					1,
					null,
					null,
					null,
					null"/>
        <testData input=",2" expectedOutput="1.0,
					1,
					1,
					1,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testTruncUsesFloorAbs"
              fieldName="testTruncUsesFloorAbs"
              dataType="Double"
              formula="TRUNC(FLOOR(customnumber1__c),ABS(customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20,-1" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12345, 2"
                  expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.123444,4"
                  expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.123445,4"
                  expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12345,4"
                  expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12,4" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="-1,2" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-1,0" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="-123456789,
					-123456789,
					-123456789,
					-123456789,
					-123456789,
					-123456789,
					-123456789,
					-123456789"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="46,
					0" expectedOutput="46,
					46,
					46,
					46,
					46,
					46,
					46,
					46"/>
        <testData input="-0,2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.00034,3" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-.244,2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.244,2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.245,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".24456,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.24456,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",16" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",2" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="-256,"
                  expectedOutput="-256,
					-256,
					-256,
					-256,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testTruncUsesLog"
              fieldName="testTruncUsesLog"
              dataType="Double"
              formula="TRUNC(LOG(customnumber1__c),customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="1,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2,1"
                  expectedOutput="0.3,
					0.3,
					0.3,
					0.3,
					0.3,
					0.3,
					0.3,
					0.3"/>
        <testData input="3,2"
                  expectedOutput="0.47,
					0.47,
					0.47,
					0.47,
					0.47,
					0.47,
					0.47,
					0.47"/>
        <testData input="4.1234,2"
                  expectedOutput="0.61,
					0.61,
					0.61,
					0.61,
					0.61,
					0.61,
					0.61,
					0.61"/>
        <testData input="5.000000008,8"
                  expectedOutput="0.69897000,
					0.69897,
					0.69897,
					0.69897,
					0.69897000,
					0.69897,
					0.69897,
					0.69897"/>
        <testData input="-200,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="10000,-2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="10,10" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="16,16"
                  expectedOutput="1.2041199826559246,
					1.2041199826559248,
					1.2041199826559248,
					1.20412,
					1.2041199826559246,
					1.2041199826559248,
					1.2041199826559248,
					1.20412"/>
        <testData input="2.56,19"
                  expectedOutput="0.40823996531184953,
					0.4082399653118496,
					0.4082399653118496,
					0.40824,
					0.40823996531184953,
					0.4082399653118496,
					0.4082399653118496,
					0.40824"/>
        <testData input="123456789.123456789,12"
                  expectedOutput="8.091514977603,
					8.091514977603,
					8.091514977603,
					8.091515,
					8.091514977603,
					8.091514977603,
					8.091514977603,
					8.091515"/>
    </testcase>
    <testcase testName="testTruncUsesLn"
              fieldName="testTruncUsesLn"
              dataType="Double"
              formula="TRUNC(LN(customnumber1__c),customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="1,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2,1"
                  expectedOutput="0.6,
					0.6,
					0.6,
					0.6,
					0.6,
					0.6,
					0.6,
					0.6"/>
        <testData input="3,2"
                  expectedOutput="1.09,
					1.09,
					1.09,
					1.09,
					1.09,
					1.09,
					1.09,
					1.09"/>
        <testData input="4.1234,2"
                  expectedOutput="1.41,
					1.41,
					1.41,
					1.41,
					1.41,
					1.41,
					1.41,
					1.41"/>
        <testData input="5.000000008,8"
                  expectedOutput="1.60943791,
					1.60943791,
					1.60943791,
					1.6094379,
					1.60943791,
					1.60943791,
					1.60943791,
					1.6094379"/>
        <testData input="-200,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="10000,-2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="10,10"
                  expectedOutput="2.3025850929,
					2.3025850929,
					2.3025850929,
					2.3025851,
					2.3025850929,
					2.3025850929,
					2.3025850929,
					2.3025851"/>
        <testData input="16,16"
                  expectedOutput="2.772588722239781,
					2.7725887222397812,
					2.772588722239781,
					2.7725887,
					2.772588722239781,
					2.7725887222397812,
					2.772588722239781,
					2.7725887"/>
        <testData input="2.56,19"
                  expectedOutput="0.9400072584914712,
					0.9400072584914711,
					0.9400072584914712,
					0.9400073,
					0.9400072584914712,
					0.9400072584914711,
					0.9400072584914712,
					0.9400073"/>
        <testData input="123456789.123456789,12"
                  expectedOutput="18.631401767168,
					18.631401767168,
					18.631401767168,
					18.6314018,
					18.631401767168,
					18.631401767168,
					18.631401767168,
					18.6314018"/>
    </testcase>
    <testcase testName="testTruncUsesSqrt"
              fieldName="testTruncUsesSqrt"
              dataType="Double"
              formula="TRUNC(SQRT(customnumber1__c),customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20,-1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20.12345, 2"
                  expectedOutput="4.48,
					4.48,
					4.48,
					4.48,
					4.48,
					4.48,
					4.48,
					4.48"/>
        <testData input="20.123444,4"
                  expectedOutput="4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859"/>
        <testData input="20.123445,4"
                  expectedOutput="4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859"/>
        <testData input="20.12345,4"
                  expectedOutput="4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859,
					4.4859"/>
        <testData input="20.12,4"
                  expectedOutput="4.4855,
					4.4855,
					4.4855,
					4.4855,
					4.4855,
					4.4855,
					4.4855,
					4.4855"/>
        <testData input="-1,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1,0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="11111.11,
					11111.11,
					11111.11,
					11111.11,
					11111.11,
					11111.11,
					11111.11,
					11111.11"/>
        <testData input="46,
					0" expectedOutput="6,
					6,
					6,
					6,
					6,
					6,
					6,
					6"/>
        <testData input="-0,2" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="-0.00034,3"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-.244,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.244,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.245,0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input=".24456,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.24456,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",16"
                  expectedOutput="0.0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",2" expectedOutput="0.0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="-256,"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testTruncUsesTruncMinus"
              fieldName="testTruncUsesTruncMinus"
              dataType="Double"
              formula="TRUNC(TRUNC(custompercent1__c,customnumber1__c),customformula1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customformula1"
                        dataType="Double"
                        formula="(customcurrency1__c-customcurrency2__c)">
            <referenceField fieldName="customcurrency1" dataType="Currency"/>
            <referenceField fieldName="customcurrency2" dataType="Currency"/>
        </referenceField>
        <testData input="123456789,123456789,200,300"
                  expectedOutput="0,
					0,
					0,
					null,
					0,
					0,
					0,
					null"/>
        <testData input="12345678,123456789,200,300"
                  expectedOutput="0,
					0,
					0,
					null,
					0,
					0,
					0,
					null"/>
        <testData input="12345678,1234567,200,300"
                  expectedOutput="0,
					0,
					0,
					null,
					0,
					0,
					0,
					null"/>
        <testData input=",10.24,200,300"
                  expectedOutput="0,
					0,
					0,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="10.24,,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="123.23456789,0,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123.23456789,1,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123.23456789,2,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123.23456789,3,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123.23456789,4,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123.23456789,5,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123.23456789,6,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123.23456789,7,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123.23456789,8,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123.23456789,9,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123.23456780,123.123456789,200,300"
                  expectedOutput="0,
					0,
					0,
					null,
					0,
					0,
					0,
					null"/>
        <testData input="123.23456789,123.123456780,200,300"
                  expectedOutput="0,
					0,
					0,
					null,
					0,
					0,
					0,
					null"/>
        <testData input="-200.434,200.434, 200, 300"
                  expectedOutput="0,
					0,
					0,
					null,
					0,
					0,
					0,
					null"/>
        <testData input="200, -200.434, 200,300"
                  expectedOutput="0,
					0,
					0,
					null,
					0,
					0,
					0,
					null"/>
        <testData input=",,," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="200,,,"
                  expectedOutput="2,
					2,
					2,
					2,
					null,
					null,
					null,
					null"/>
        <testData input=",1,,10"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testTruncUsesIf"
              fieldName="testTruncUsesIf"
              dataType="Double"
              formula="TRUNC(IF(customcheckbox1__c,customnumber1__c,customnumber2__c),customnumber3__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customcheckbox1" dataType="Boolean"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customnumber3" dataType="Double"/>
        <testData input="true,100,200,400"
                  expectedOutput="100,
					100,
					100,
					null,
					100,
					100,
					100,
					null"/>
        <testData input="false,123456789,123456789,123456789"
                  expectedOutput="123456789,
					123456789,
					123456789,
					null,
					123456789,
					123456789,
					123456789,
					null"/>
        <testData input="true,45.4356,45,900"
                  expectedOutput="45.4356,
					45.4356,
					45.4356,
					null,
					45.4356,
					45.4356,
					45.4356,
					null"/>
        <testData input="true,0.00000984,0.9,0.4560001"
                  expectedOutput="0,
					0,
					0,
					null,
					0,
					0,
					0,
					null"/>
        <testData input="false,-200,-0.000000008,-0.0000012"
                  expectedOutput="0,
					0,
					0,
					null,
					0,
					0,
					0,
					null"/>
    </testcase>
    <testcase testName="testSqrtSwap"
              fieldName="testSqrtSwap"
              dataType="Double"
              formula="SQRT(customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="0" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="2"
                  expectedOutput="1.4142135623730951,
					1.414213562373095,
					1.4142135623730951,
					1.4142136,
					1.4142135623730951,
					1.414213562373095,
					1.4142135623730951,
					1.4142136"/>
        <testData input="3"
                  expectedOutput="1.7320508075688772,
					1.732050807568877,
					1.7320508075688772,
					1.7320508,
					1.7320508075688772,
					1.732050807568877,
					1.7320508075688772,
					1.7320508"/>
        <testData input="4" expectedOutput="2.0,
					2,
					2,
					2,
					2.0,
					2,
					2,
					2"/>
        <testData input="7"
                  expectedOutput="2.6457513110645907,
					2.645751311064591,
					2.6457513110645907,
					2.6457513,
					2.6457513110645907,
					2.645751311064591,
					2.6457513110645907,
					2.6457513"/>
        <testData input="12"
                  expectedOutput="3.4641016151377544,
					3.464101615137755,
					3.4641016151377544,
					3.4641016,
					3.4641016151377544,
					3.464101615137755,
					3.4641016151377544,
					3.4641016"/>
        <testData input="16" expectedOutput="4.0,
					4,
					4,
					4,
					4.0,
					4,
					4,
					4"/>
        <testData input="256" expectedOutput="16.0,
					16,
					16,
					16,
					16.0,
					16,
					16,
					16"/>
        <testData input="65536.00"
                  expectedOutput="256.0,
					256,
					256,
					256,
					256.0,
					256,
					256,
					256"/>
        <testData input="65536.16"
                  expectedOutput="256.0003124998093,
					256.0003124998093,
					256.00031249980924,
					256.0003125,
					256.0003124998093,
					256.0003124998093,
					256.00031249980924,
					256.0003125"/>
        <testData input="65536.64"
                  expectedOutput="256.0012499969483,
					256.0012499969483,
					256.0012499969483,
					256.00125,
					256.0012499969483,
					256.0012499969483,
					256.0012499969483,
					256.00125"/>
        <testData input="65536.4816"
                  expectedOutput="256.0009406232719,
					256.0009406232719,
					256.0009406232719,
					256.0009406,
					256.0009406232719,
					256.0009406232719,
					256.0009406232719,
					256.0009406"/>
    </testcase>
    <testcase testName="testSqrtUsesExp"
              fieldName="testSqrtUsesExp"
              dataType="Double"
              formula="SQRT(EXP(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="0" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="1"
                  expectedOutput="1.6487212707001282,
					1.64872127070012814685,
					1.6487212707001282,
					1.6487213,
					1.6487212707001282,
					1.64872127070012814685,
					1.6487212707001282,
					1.6487213"/>
        <testData input="2"
                  expectedOutput="2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818,
					2.718281828459045,
					2.71828182845904523536,
					2.718281828459045,
					2.7182818"/>
        <testData input="-1"
                  expectedOutput="0.6065306597126334,
					0.60653065971263342361,
					0.6065306597126334,
					0.6065307,
					0.6065306597126334,
					0.60653065971263342361,
					0.6065306597126334,
					0.6065307"/>
        <testData input="-10"
                  expectedOutput="0.006737946999085467,
					0.00673794699908546698,
					0.006737946999085467,
					0.0067379,
					0.006737946999085467,
					0.00673794699908546698,
					0.006737946999085467,
					0.0067379"/>
        <testData input="-100"
                  expectedOutput="0.00000000000000000000019287498480,
					0.0000000000000000000001928749848,
					1.9287498480E-22,
					0,
					0.00000000000000000000019287498480,
					0.0000000000000000000001928749848,
					1.9287498480E-22,
					0"/>
        <testData input="56"
                  expectedOutput="1446257064291.475,
					1446257064291.47517367704742299693,
					1446257064291.475,
					1446257064291.4750977,
					1446257064291.475,
					1446257064291.47517367704742299693,
					1446257064291.475,
					1446257064291.4750977"/>
        <testData input="110"
                  expectedOutput="769478526514201800000000,
					769478526514201713818274.55901293939920707676,
					769478526514201800000000,
					769478526514201752502272,
					769478526514201800000000,
					769478526514201713818274.55901293939920707676,
					769478526514201800000000,
					769478526514201752502272"/>
        <testData input="20"
                  expectedOutput="22026.465794806718,
					22026.4657948067165169579,
					22026.465794806718,
					22026.4657948,
					22026.465794806718,
					22026.4657948067165169579,
					22026.465794806718,
					22026.4657948"/>
    </testcase>
    <testcase testName="testSqrtUsesFloor"
              fieldName="testSqrtUsesFloor"
              dataType="Double"
              formula="SQRT(FLOOR(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="20.842345"
                  expectedOutput="4.47213595499958,
					4.472135954999579,
					4.47213595499958,
					4.472136,
					4.47213595499958,
					4.472135954999579,
					4.47213595499958,
					4.472136"/>
        <testData input="123456789.54321"
                  expectedOutput="11111.111060555555,
					11111.11106055556,
					11111.111060555555,
					11111.1110606,
					11111.111060555555,
					11111.11106055556,
					11111.111060555555,
					11111.1110606"/>
        <testData input="123456789.123456789"
                  expectedOutput="11111.111060555555,
					11111.11106055556,
					11111.111060555555,
					11111.1110606,
					11111.111060555555,
					11111.11106055556,
					11111.111060555555,
					11111.1110606"/>
        <testData input="49.55" expectedOutput="7.0,
					7,
					7,
					7,
					7.0,
					7,
					7,
					7"/>
        <testData input="0.00034" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="0.244" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="25.7456" expectedOutput="5.0,
					5,
					5,
					5,
					5.0,
					5,
					5,
					5"/>
        <testData input="64.456" expectedOutput="8.0,
					8,
					8,
					8,
					8.0,
					8,
					8,
					8"/>
        <testData input="-.4" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="-.7" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="-1.4"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1.7"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
    </testcase>
    <testcase testName="testSqrtUsesLog"
              fieldName="testSqrtUsesLog"
              dataType="Double"
              formula="ROUND(SQRT(LOG(customnumber1__c)),15)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="2"
                  expectedOutput="0.548662004939271,
					0.548662004939272,
					0.548662004939272,
					0.548662,
					0.548662004939271,
					0.548662004939272,
					0.548662004939272,
					0.548662"/>
        <testData input="3"
                  expectedOutput="0.690739643222873,
					0.690739643222873,
					0.690739643222873,
					0.6907396,
					0.690739643222873,
					0.690739643222873,
					0.690739643222873,
					0.6907396"/>
        <testData input="4"
                  expectedOutput="0.775925248543932,
					0.775925248543932,
					0.775925248543932,
					0.7759252,
					0.775925248543932,
					0.775925248543932,
					0.775925248543932,
					0.7759252"/>
        <testData input="5"
                  expectedOutput="0.836044259794910,
					0.83604425979491,
					0.83604425979491,
					0.8360443,
					0.836044259794910,
					0.83604425979491,
					0.83604425979491,
					0.8360443"/>
        <testData input="6"
                  expectedOutput="0.882128817341120,
					0.88212881734112,
					0.88212881734112,
					0.8821288,
					0.882128817341120,
					0.88212881734112,
					0.88212881734112,
					0.8821288"/>
        <testData input="10000" expectedOutput="2.0,
					2,
					2,
					2,
					2.0,
					2,
					2,
					2"/>
        <testData input="10" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="16"
                  expectedOutput="1.097324009878543,
					1.097324009878543,
					1.097324009878543,
					1.097324,
					1.097324009878543,
					1.097324009878543,
					1.097324009878543,
					1.097324"/>
        <testData input="2.56"
                  expectedOutput="0.638936589429538,
					0.638936589429538,
					0.638936589429538,
					0.6389366,
					0.638936589429538,
					0.638936589429538,
					0.638936589429538,
					0.6389366"/>
        <testData input="123456789.123456789"
                  expectedOutput="2.844558837078882,
					2.844558837078883,
					2.844558837078883,
					2.8445588,
					2.844558837078882,
					2.844558837078883,
					2.844558837078883,
					2.8445588"/>
    </testcase>
    <testcase testName="testSqrtUsesCeil"
              fieldName="testSqrtUsesCeil"
              dataType="Double"
              formula="SQRT(CEILING(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="20.842345"
                  expectedOutput="4.58257569495584,
					4.58257569495584,
					4.58257569495584,
					4.5825757,
					4.58257569495584,
					4.58257569495584,
					4.58257569495584,
					4.5825757"/>
        <testData input="123456789.54321"
                  expectedOutput="11111.111105555556,
					11111.11110555556,
					11111.111105555556,
					11111.1111056,
					11111.111105555556,
					11111.11110555556,
					11111.111105555556,
					11111.1111056"/>
        <testData input="123456789.123456789"
                  expectedOutput="11111.111105555556,
					11111.11110555556,
					11111.111105555556,
					11111.1111056,
					11111.111105555556,
					11111.11110555556,
					11111.111105555556,
					11111.1111056"/>
        <testData input="49.55"
                  expectedOutput="7.0710678118654755,
					7.071067811865475,
					7.0710678118654755,
					7.0710678,
					7.0710678118654755,
					7.071067811865475,
					7.0710678118654755,
					7.0710678"/>
        <testData input="0.00034" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="0.244" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="25.7456"
                  expectedOutput="5.0990195135927845,
					5.099019513592785,
					5.0990195135927845,
					5.0990195,
					5.0990195135927845,
					5.099019513592785,
					5.0990195135927845,
					5.0990195"/>
        <testData input="64.456"
                  expectedOutput="8.06225774829855,
					8.06225774829855,
					8.06225774829855,
					8.0622577,
					8.06225774829855,
					8.06225774829855,
					8.06225774829855,
					8.0622577"/>
        <testData input="-.4"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-.7"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1.4"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1.7"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
    </testcase>
    <testcase testName="testSqrtUsesSqrt"
              fieldName="testSqrtUsesSqrt"
              dataType="Double"
              formula="SQRT(SQRT(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="0" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="2"
                  expectedOutput="1.189207115002721,
					1.189207115002721,
					1.189207115002721,
					1.1892071,
					1.189207115002721,
					1.189207115002721,
					1.189207115002721,
					1.1892071"/>
        <testData input="3"
                  expectedOutput="1.3160740129524924,
					1.316074012952492,
					1.3160740129524924,
					1.316074,
					1.3160740129524924,
					1.316074012952492,
					1.3160740129524924,
					1.316074"/>
        <testData input="4"
                  expectedOutput="1.4142135623730951,
					1.414213562373095,
					1.4142135623730951,
					1.4142136,
					1.4142135623730951,
					1.414213562373095,
					1.4142135623730951,
					1.4142136"/>
        <testData input="7"
                  expectedOutput="1.6265765616977859,
					1.626576561697786,
					1.6265765616977856,
					1.6265766,
					1.6265765616977859,
					1.626576561697786,
					1.6265765616977856,
					1.6265766"/>
        <testData input="12"
                  expectedOutput="1.8612097182041991,
					1.861209718204199,
					1.8612097182041991,
					1.8612097,
					1.8612097182041991,
					1.861209718204199,
					1.8612097182041991,
					1.8612097"/>
        <testData input="16" expectedOutput="2.0,
					2,
					2,
					2,
					2.0,
					2,
					2,
					2"/>
        <testData input="256" expectedOutput="4.0,
					4,
					4,
					4,
					4.0,
					4,
					4,
					4"/>
        <testData input="65536.00"
                  expectedOutput="16.0,
					16,
					16,
					16,
					16.0,
					16,
					16,
					16"/>
        <testData input="65536.16"
                  expectedOutput="16.00000976561606,
					16.00000976561606,
					16.00000976561606,
					16.0000098,
					16.00000976561606,
					16.00000976561606,
					16.00000976561606,
					16.0000098"/>
        <testData input="65536.64"
                  expectedOutput="16.00003906235695,
					16.000039062356951,
					16.00003906235695,
					16.0000391,
					16.00003906235695,
					16.000039062356951,
					16.00003906235695,
					16.0000391"/>
        <testData input="65536.4816"
                  expectedOutput="16.000029394450245,
					16.000029394450246,
					16.000029394450248,
					16.0000294,
					16.000029394450245,
					16.000029394450246,
					16.000029394450248,
					16.0000294"/>
    </testcase>
    <testcase testName="testSqrtUsesMinus"
              fieldName="testSqrtUsesMinus"
              dataType="Double"
              formula="SQRT((customcurrency1__c-customcurrency2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <referenceField fieldName="customcurrency2" dataType="Currency"/>
        <testData input=",24"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="0.0,0.0" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="0.00,0.00" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="0.000,0.000" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="-1.0,99.0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="99, -1"
                  expectedOutput="10.0,
					10,
					10,
					10,
					10.0,
					10,
					10,
					10"/>
        <testData input="-20,-40"
                  expectedOutput="4.47213595499958,
					4.472135954999579,
					4.47213595499958,
					4.472136,
					4.47213595499958,
					4.472135954999579,
					4.47213595499958,
					4.472136"/>
        <testData input="1.1111,1.1111"
                  expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="1.11114,0.00000"
                  expectedOutput="1.0541062565035841,
					1.054106256503584,
					1.0541062565035841,
					1.0541063,
					1.0541062565035841,
					1.054106256503584,
					1.0541062565035841,
					1.0541063"/>
        <testData input="1.11115,0.00000"
                  expectedOutput="1.054110999847739,
					1.054110999847739,
					1.054110999847739,
					1.054111,
					1.054110999847739,
					1.054110999847739,
					1.054110999847739,
					1.054111"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="1.0540725781463058,
					1.054072578146306,
					1.0540725781463058,
					1.0540726,
					1.0540725781463058,
					1.054072578146306,
					1.0540725781463058,
					1.0540726"/>
        <testData input="123456789,123456789"
                  expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="15713.483962728113,
					15713.48396272811,
					15713.483962728113,
					15713.4839627,
					15713.483962728113,
					15713.48396272811,
					15713.483962728113,
					15713.4839627"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="600, 0.000600"
                  expectedOutput="24.494885180380006,
					24.494885180380005,
					24.494885180380006,
					24.4948852,
					24.494885180380006,
					24.494885180380005,
					24.494885180380006,
					24.4948852"/>
        <testData input="600, -600"
                  expectedOutput="34.64101615137755,
					34.641016151377546,
					34.64101615137755,
					34.6410162,
					34.64101615137755,
					34.641016151377546,
					34.64101615137755,
					34.6410162"/>
        <testData input="1.2345, 1.2345"
                  expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="1.245, 0"
                  expectedOutput="1.11579568022107,
					1.11579568022107,
					1.1157956802210698,
					1.1157957,
					1.11579568022107,
					1.11579568022107,
					1.1157956802210698,
					1.1157957"/>
        <testData input="," expectedOutput="0.0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1," expectedOutput="1.0,
					1,
					1,
					1,
					null,
					null,
					null,
					null"/>
        <testData input=",12.123456789"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="1.00596,240"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="0,240"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="31.622776601683796,
					31.622776601683795,
					31.622776601683796,
					31.6227766,
					31.622776601683796,
					31.622776601683795,
					31.622776601683796,
					31.6227766"/>
    </testcase>
    <testcase testName="testSqrtUsesPlus"
              fieldName="testSqrtUsesPlus"
              dataType="Double"
              formula="SQRT(customformula0__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customformula0"
                        dataType="Double"
                        formula="(customnumber1__c+customnumber2__c)">
            <referenceField fieldName="customnumber1" dataType="Double"/>
            <referenceField fieldName="customnumber2" dataType="Double"/>
        </referenceField>
        <testData input=",24"
                  expectedOutput="4.898979485566356,
					4.898979485566356,
					4.898979485566356,
					4.8989795,
					null,
					null,
					null,
					null"/>
        <testData input="0.0,0.0" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="0.00,0.00" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="0.000,0.000" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="-1.0,99.0"
                  expectedOutput="9.899494936611665,
					9.899494936611665,
					9.899494936611665,
					9.8994949,
					9.899494936611665,
					9.899494936611665,
					9.899494936611665,
					9.8994949"/>
        <testData input="99, -1"
                  expectedOutput="9.899494936611665,
					9.899494936611665,
					9.899494936611665,
					9.8994949,
					9.899494936611665,
					9.899494936611665,
					9.899494936611665,
					9.8994949"/>
        <testData input="-20,-40"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="1.1111,1.1111"
                  expectedOutput="1.4907045314213008,
					1.490704531421301,
					1.4907045314213008,
					1.4907045,
					1.4907045314213008,
					1.490704531421301,
					1.4907045314213008,
					1.4907045"/>
        <testData input="1.11114,0.00000"
                  expectedOutput="1.0541062565035841,
					1.054106256503584,
					1.0541062565035841,
					1.0541063,
					1.0541062565035841,
					1.054106256503584,
					1.0541062565035841,
					1.0541063"/>
        <testData input="1.11115,0.00000"
                  expectedOutput="1.054110999847739,
					1.054110999847739,
					1.054110999847739,
					1.054111,
					1.054110999847739,
					1.054110999847739,
					1.054110999847739,
					1.054111"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="1.0541133715118123,
					1.054113371511812,
					1.0541133715118123,
					1.0541134,
					1.0541133715118123,
					1.054113371511812,
					1.0541133715118123,
					1.0541134"/>
        <testData input="123456789,123456789"
                  expectedOutput="15713.48395487137,
					15713.48395487137,
					15713.48395487137,
					15713.4839549,
					15713.48395487137,
					15713.48395487137,
					15713.48395487137,
					15713.4839549"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="15713.483962728113,
					15713.48396272811,
					15713.483962728113,
					15713.4839627,
					15713.483962728113,
					15713.48396272811,
					15713.483962728113,
					15713.4839627"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="600, 0.000600"
                  expectedOutput="24.494909675277434,
					24.494909675277433,
					24.494909675277434,
					24.4949097,
					24.494909675277434,
					24.494909675277433,
					24.494909675277434,
					24.4949097"/>
        <testData input="600,
					-600" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="1.2345, 1.2345"
                  expectedOutput="1.5713051899615174,
					1.571305189961517,
					1.5713051899615174,
					1.5713052,
					1.5713051899615174,
					1.571305189961517,
					1.5713051899615174,
					1.5713052"/>
        <testData input="1.245, 0"
                  expectedOutput="1.11579568022107,
					1.11579568022107,
					1.1157956802210698,
					1.1157957,
					1.11579568022107,
					1.11579568022107,
					1.1157956802210698,
					1.1157957"/>
        <testData input="," expectedOutput="0.0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1," expectedOutput="1.0,
					1,
					1,
					1,
					null,
					null,
					null,
					null"/>
        <testData input=",12.123456789"
                  expectedOutput="3.4818754700592036,
					3.481875470059204,
					3.4818754700592036,
					3.4818755,
					null,
					null,
					null,
					null"/>
        <testData input="1.00596,240"
                  expectedOutput="15.524366653747906,
					15.524366653747907,
					15.524366653747908,
					15.5243667,
					15.524366653747906,
					15.524366653747907,
					15.524366653747908,
					15.5243667"/>
        <testData input="0,240"
                  expectedOutput="15.491933384829668,
					15.491933384829668,
					15.491933384829668,
					15.4919334,
					15.491933384829668,
					15.491933384829668,
					15.491933384829668,
					15.4919334"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="31.622776601683796,
					31.622776601683795,
					31.622776601683796,
					31.6227766,
					31.622776601683796,
					31.622776601683795,
					31.622776601683796,
					31.6227766"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
    </testcase>
    <testcase testName="testSqrtUsesCase"
              fieldName="testSqrtUsesCase"
              dataType="Double"
              formula="SQRT(CASE(customdate1__c,customdate2__c,customnumber1__c,customdate3__c,customnumber2__c,customnumber3__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customdate3" dataType="DateOnly"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customnumber3" dataType="Double"/>
        <testData input="2004:12:04,2004:12:04,200,2004:12:04,300,400"
                  expectedOutput="14.142135623730951,
					14.14213562373095,
					14.142135623730951,
					14.1421356,
					14.142135623730951,
					14.14213562373095,
					14.142135623730951,
					14.1421356"/>
        <testData input="2004:12:04,2004:12:03,200,2004:12:04,300,400"
                  expectedOutput="17.320508075688775,
					17.320508075688773,
					17.320508075688775,
					17.3205081,
					17.320508075688775,
					17.320508075688773,
					17.320508075688775,
					17.3205081"/>
        <testData input="2004:12:05,2004:12:04,200,2004:12:04,300,400"
                  expectedOutput="20.0,
					20,
					20,
					20,
					20.0,
					20,
					20,
					20"/>
        <testData input=",2004:12:04,200,2004:12:04,300,400"
                  expectedOutput="20.0,
					20,
					20,
					20,
					20.0,
					20,
					20,
					20"/>
        <testData input=",,200,2004:12:04,300,400"
                  expectedOutput="20.0,
					20,
					20,
					20,
					20.0,
					20,
					20,
					20"/>
        <testData input="2004:12:04,2004:12:04,1600,,300,400"
                  expectedOutput="40.0,
					40,
					40,
					40,
					40.0,
					40,
					40,
					40"/>
        <testData input="2004:12:04,,200,2004:12:04,300,400"
                  expectedOutput="17.320508075688775,
					17.320508075688773,
					17.320508075688775,
					17.3205081,
					17.320508075688775,
					17.320508075688773,
					17.320508075688775,
					17.3205081"/>
        <testData input="2004:12:04,2004:12:04,,2004:12:04,300,400"
                  expectedOutput="0.0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:04,2004:12:05,200,2004:12:04,,400"
                  expectedOutput="0.0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testFloorSimple"
              fieldName="testFloorSimple"
              dataType="Double"
              formula="FLOOR(customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="20.842345"
                  expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="123456789.54321"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="123456789.123456789"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="49.55" expectedOutput="49,
					49,
					49,
					49,
					49,
					49,
					49,
					49"/>
        <testData input="0.00034" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.244" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="25.7456" expectedOutput="25,
					25,
					25,
					25,
					25,
					25,
					25,
					25"/>
        <testData input="64.456" expectedOutput="64,
					64,
					64,
					64,
					64,
					64,
					64,
					64"/>
        <testData input="-.4" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-.7" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-1.4" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-1.7" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
    </testcase>
    <testcase testName="testMFloorSimple"
              fieldName="testMFloorSimple"
              dataType="Double"
              formula="MFLOOR(customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="20.842345"
                  expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="123456789.54321"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="123456789.123456789"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="49.55" expectedOutput="49,
					49,
					49,
					49,
					49,
					49,
					49,
					49"/>
        <testData input="0.00034" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.244" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="25.7456" expectedOutput="25,
					25,
					25,
					25,
					25,
					25,
					25,
					25"/>
        <testData input="64.456" expectedOutput="64,
					64,
					64,
					64,
					64,
					64,
					64,
					64"/>
        <testData input="-.4" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-.7" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-1.4" expectedOutput="-2,
					-2,
					-2,
					-2,
					-2,
					-2,
					-2,
					-2"/>
        <testData input="-1.7" expectedOutput="-2,
					-2,
					-2,
					-2,
					-2,
					-2,
					-2,
					-2"/>
    </testcase>
    <testcase testName="testFloorRound"
              fieldName="testFloorRound"
              dataType="Double"
              formula="FLOOR((customnumber1__c/customnumber2__c)*customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="1,9" expectedOutput="1,
					0,
					1,
					1,
					1,
					0,
					1,
					1"/>
        <testData input="2,9" expectedOutput="2,
					1,
					2,
					2,
					2,
					1,
					2,
					2"/>
        <testData input="3,9" expectedOutput="3,
					2,
					3,
					3,
					3,
					2,
					3,
					3"/>
        <testData input="4,9" expectedOutput="4,
					3,
					4,
					4,
					4,
					3,
					4,
					4"/>
        <testData input="5,9" expectedOutput="5,
					5,
					5,
					5,
					5,
					5,
					5,
					5"/>
        <testData input="6,9" expectedOutput="6,
					6,
					6,
					6,
					6,
					6,
					6,
					6"/>
        <testData input="7,9" expectedOutput="7,
					7,
					7,
					7,
					7,
					7,
					7,
					7"/>
        <testData input="8,9" expectedOutput="8,
					8,
					8,
					8,
					8,
					8,
					8,
					8"/>
        <testData input="1,11" expectedOutput="1,
					0,
					1,
					1,
					1,
					0,
					1,
					1"/>
        <testData input="2,11" expectedOutput="2,
					1,
					2,
					2,
					2,
					1,
					2,
					2"/>
        <testData input="3,11" expectedOutput="3,
					2,
					3,
					3,
					3,
					2,
					3,
					3"/>
        <testData input="4,11" expectedOutput="4,
					3,
					4,
					4,
					4,
					3,
					4,
					4"/>
        <testData input="5,11" expectedOutput="5,
					4,
					5,
					5,
					5,
					4,
					5,
					5"/>
        <testData input="6,11" expectedOutput="6,
					6,
					6,
					6,
					6,
					6,
					6,
					6"/>
        <testData input="7,11" expectedOutput="7,
					7,
					7,
					7,
					7,
					7,
					7,
					7"/>
        <testData input="8,11" expectedOutput="8,
					8,
					8,
					8,
					8,
					8,
					8,
					8"/>
        <testData input="9,11" expectedOutput="9,
					9,
					9,
					9,
					9,
					9,
					9,
					9"/>
        <testData input="10,11" expectedOutput="10,
					10,
					10,
					10,
					10,
					10,
					10,
					10"/>
        <testData input="10,9" expectedOutput="10,
					9,
					10,
					10,
					10,
					9,
					10,
					10"/>
        <testData input="11,9" expectedOutput="11,
					10,
					11,
					11,
					11,
					10,
					11,
					11"/>
        <testData input="12,9" expectedOutput="12,
					11,
					12,
					12,
					12,
					11,
					12,
					12"/>
        <testData input="13,9" expectedOutput="13,
					12,
					13,
					13,
					13,
					12,
					13,
					13"/>
        <testData input="14,9" expectedOutput="14,
					14,
					14,
					14,
					14,
					14,
					14,
					14"/>
        <testData input="15,9" expectedOutput="15,
					15,
					15,
					15,
					15,
					15,
					15,
					15"/>
        <testData input="16,9" expectedOutput="16,
					16,
					16,
					16,
					16,
					16,
					16,
					16"/>
        <testData input="17,9" expectedOutput="17,
					17,
					17,
					17,
					17,
					17,
					17,
					17"/>
        <testData input="18,9" expectedOutput="18,
					18,
					18,
					18,
					18,
					18,
					18,
					18"/>
        <testData input="19,9" expectedOutput="19,
					18,
					19,
					19,
					19,
					18,
					19,
					19"/>
    </testcase>
    <testcase testName="testMFloorRound"
              fieldName="testMFloorRound"
              dataType="Double"
              formula="MFLOOR((customnumber1__c/customnumber2__c)*customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="1,9" expectedOutput="1,
					0,
					1,
					1,
					1,
					0,
					1,
					1"/>
        <testData input="2,9" expectedOutput="2,
					1,
					2,
					2,
					2,
					1,
					2,
					2"/>
        <testData input="3,9" expectedOutput="3,
					2,
					3,
					3,
					3,
					2,
					3,
					3"/>
        <testData input="4,9" expectedOutput="4,
					3,
					4,
					4,
					4,
					3,
					4,
					4"/>
        <testData input="5,9" expectedOutput="5,
					5,
					5,
					5,
					5,
					5,
					5,
					5"/>
        <testData input="6,9" expectedOutput="6,
					6,
					6,
					6,
					6,
					6,
					6,
					6"/>
        <testData input="7,9" expectedOutput="7,
					7,
					7,
					7,
					7,
					7,
					7,
					7"/>
        <testData input="8,9" expectedOutput="8,
					8,
					8,
					8,
					8,
					8,
					8,
					8"/>
        <testData input="1,11" expectedOutput="1,
					0,
					1,
					1,
					1,
					0,
					1,
					1"/>
        <testData input="2,11" expectedOutput="2,
					1,
					2,
					2,
					2,
					1,
					2,
					2"/>
        <testData input="3,11" expectedOutput="3,
					2,
					3,
					3,
					3,
					2,
					3,
					3"/>
        <testData input="4,11" expectedOutput="4,
					3,
					4,
					4,
					4,
					3,
					4,
					4"/>
        <testData input="5,11" expectedOutput="5,
					4,
					5,
					5,
					5,
					4,
					5,
					5"/>
        <testData input="6,11" expectedOutput="6,
					6,
					6,
					6,
					6,
					6,
					6,
					6"/>
        <testData input="7,11" expectedOutput="7,
					7,
					7,
					7,
					7,
					7,
					7,
					7"/>
        <testData input="8,11" expectedOutput="8,
					8,
					8,
					8,
					8,
					8,
					8,
					8"/>
        <testData input="9,11" expectedOutput="9,
					9,
					9,
					9,
					9,
					9,
					9,
					9"/>
        <testData input="10,11" expectedOutput="10,
					10,
					10,
					10,
					10,
					10,
					10,
					10"/>
        <testData input="10,9" expectedOutput="10,
					9,
					10,
					10,
					10,
					9,
					10,
					10"/>
        <testData input="11,9" expectedOutput="11,
					10,
					11,
					11,
					11,
					10,
					11,
					11"/>
        <testData input="12,9" expectedOutput="12,
					11,
					12,
					12,
					12,
					11,
					12,
					12"/>
        <testData input="13,9" expectedOutput="13,
					12,
					13,
					13,
					13,
					12,
					13,
					13"/>
        <testData input="14,9" expectedOutput="14,
					14,
					14,
					14,
					14,
					14,
					14,
					14"/>
        <testData input="15,9" expectedOutput="15,
					15,
					15,
					15,
					15,
					15,
					15,
					15"/>
        <testData input="16,9" expectedOutput="16,
					16,
					16,
					16,
					16,
					16,
					16,
					16"/>
        <testData input="17,9" expectedOutput="17,
					17,
					17,
					17,
					17,
					17,
					17,
					17"/>
        <testData input="18,9" expectedOutput="18,
					18,
					18,
					18,
					18,
					18,
					18,
					18"/>
        <testData input="19,9" expectedOutput="19,
					18,
					19,
					19,
					19,
					18,
					19,
					19"/>
    </testcase>
    <testcase testName="testFloorUsesAbs"
              fieldName="testFloorUsesAbs"
              dataType="Double"
              formula="FLOOR(ABS(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12345" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="-1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-123456789.123456789"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="123456789.123456789"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="46" expectedOutput="46,
					46,
					46,
					46,
					46,
					46,
					46,
					46"/>
        <testData input="-0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.00034" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-.244" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.244" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.245" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".24456" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.24456" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="16" expectedOutput="16,
					16,
					16,
					16,
					16,
					16,
					16,
					16"/>
        <testData input="256"
                  expectedOutput="256,
					256,
					256,
					256,
					256,
					256,
					256,
					256"/>
        <testData input="-256"
                  expectedOutput="256,
					256,
					256,
					256,
					256,
					256,
					256,
					256"/>
    </testcase>
    <testcase testName="testFloorUsesCeil"
              fieldName="testFloorUsesCeil"
              dataType="Double"
              formula="FLOOR(CEILING(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="20.842345"
                  expectedOutput="21,
					21,
					21,
					21,
					21,
					21,
					21,
					21"/>
        <testData input="123456789.54321"
                  expectedOutput="123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790"/>
        <testData input="123456789.123456789"
                  expectedOutput="123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790"/>
        <testData input="49.55" expectedOutput="50,
					50,
					50,
					50,
					50,
					50,
					50,
					50"/>
        <testData input="0.00034" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="0.244" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="25.7456" expectedOutput="26,
					26,
					26,
					26,
					26,
					26,
					26,
					26"/>
        <testData input="64.456" expectedOutput="65,
					65,
					65,
					65,
					65,
					65,
					65,
					65"/>
        <testData input="-.4" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-.7" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-1.4" expectedOutput="-2,
					-2,
					-2,
					-2,
					-2,
					-2,
					-2,
					-2"/>
        <testData input="-1.7" expectedOutput="-2,
					-2,
					-2,
					-2,
					-2,
					-2,
					-2,
					-2"/>
    </testcase>
    <testcase testName="testFloorUsesFloor"
              fieldName="testFloorUsesFloor"
              dataType="Double"
              formula="FLOOR(FLOOR(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="20.842345"
                  expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="123456789.54321"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="123456789.123456789"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="49.55" expectedOutput="49,
					49,
					49,
					49,
					49,
					49,
					49,
					49"/>
        <testData input="0.00034" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.244" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="25.7456" expectedOutput="25,
					25,
					25,
					25,
					25,
					25,
					25,
					25"/>
        <testData input="64.456" expectedOutput="64,
					64,
					64,
					64,
					64,
					64,
					64,
					64"/>
        <testData input="-.4" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-.7" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-1.4" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-1.7" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
    </testcase>
    <testcase testName="testFloorUsesLog"
              fieldName="testFloorUsesLog"
              dataType="Double"
              formula="FLOOR(LOG(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="3" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="4" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="5" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="6" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="10000" expectedOutput="4,
					4,
					4,
					4,
					4,
					4,
					4,
					4"/>
        <testData input="10" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="16" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="2.56" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123456789.123456789"
                  expectedOutput="8,
					8,
					8,
					8,
					8,
					8,
					8,
					8"/>
    </testcase>
    <testcase testName="testFloorUsesLn"
              fieldName="testFloorUsesLn"
              dataType="Double"
              formula="FLOOR(LN(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="3" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="4" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="5" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="6" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="10000" expectedOutput="9,
					9,
					9,
					9,
					9,
					9,
					9,
					9"/>
        <testData input="10" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="16" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="2.56" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123456789.123456789"
                  expectedOutput="18,
					18,
					18,
					18,
					18,
					18,
					18,
					18"/>
    </testcase>
    <testcase testName="testFloorUsesSqrt"
              fieldName="testFloorUsesSqrt"
              dataType="Double"
              formula="FLOOR(SQRT(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="3" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="4" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="7" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="12" expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
        <testData input="16" expectedOutput="4,
					4,
					4,
					4,
					4,
					4,
					4,
					4"/>
        <testData input="256" expectedOutput="16,
					16,
					16,
					16,
					16,
					16,
					16,
					16"/>
        <testData input="65536.00"
                  expectedOutput="256,
					256,
					256,
					256,
					256,
					256,
					256,
					256"/>
        <testData input="65536.16"
                  expectedOutput="256,
					256,
					256,
					256,
					256,
					256,
					256,
					256"/>
        <testData input="65536.64"
                  expectedOutput="256,
					256,
					256,
					256,
					256,
					256,
					256,
					256"/>
        <testData input="65536.4816"
                  expectedOutput="256,
					256,
					256,
					256,
					256,
					256,
					256,
					256"/>
    </testcase>
    <testcase testName="testFloorUsesRound"
              fieldName="testFloorUsesRound"
              dataType="Double"
              formula="FLOOR(ROUND(customnumber1__c,customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20,-1" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12345, 2"
                  expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.123444,4"
                  expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.123445,4"
                  expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12345,4"
                  expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12,4" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="-1,2" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-1,0" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="-123456789,
					-123456789,
					-123456789,
					-123456789,
					-123456789,
					-123456789,
					-123456789,
					-123456789"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="46,
					0" expectedOutput="46,
					46,
					46,
					46,
					46,
					46,
					46,
					46"/>
        <testData input="-0,2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.00034,3" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-.244,2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.244,2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.245,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".24456,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.24456,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",16" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",2" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="-256,"
                  expectedOutput="-256,
					-256,
					-256,
					-256,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testFloorUsesMOD"
              fieldName="testFloorUsesMOD"
              dataType="Double"
              formula="FLOOR(MOD(customnumber1__c,customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20,-1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20.12345,
					2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20.123444,13" expectedOutput="7,
					7,
					7,
					7,
					7,
					7,
					7,
					7"/>
        <testData input="20.123445,7" expectedOutput="6,
					6,
					6,
					6,
					6,
					6,
					6,
					6"/>
        <testData input="20.12345,23"
                  expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12,1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-1,2" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-1,2654" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="46,-456" expectedOutput="46,
					46,
					46,
					46,
					46,
					46,
					46,
					46"/>
        <testData input="-0,-1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.00034,3" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-.244,2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.244,2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.245,23223244" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".24456,123456789" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.24456,0.000045" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=",16" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",2" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="-256,16" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
    </testcase>
    <testcase testName="testFloorUsesIf"
              fieldName="testFloorUsesIf"
              dataType="Double"
              formula="FLOOR(IF(true,customnumber1__c,customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input=",24" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.0,0.0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.00,0.00" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.000,0.000" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-1.0,99.0"
                  expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="99,
					-1" expectedOutput="99,
					99,
					99,
					99,
					99,
					99,
					99,
					99"/>
        <testData input="-20,-40"
                  expectedOutput="-20,
					-20,
					-20,
					-20,
					-20,
					-20,
					-20,
					-20"/>
        <testData input="1.1111,1.1111" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="1.11114,0.00000" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="1.11115,0.00000" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="123456789,123456789"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="-123456789,
					-123456789,
					-123456789,
					-123456789,
					-123456789,
					-123456789,
					-123456789,
					-123456789"/>
        <testData input="600, 0.000600"
                  expectedOutput="600,
					600,
					600,
					600,
					600,
					600,
					600,
					600"/>
        <testData input="600, -600"
                  expectedOutput="600,
					600,
					600,
					600,
					600,
					600,
					600,
					600"/>
        <testData input="1.2345,
					1.2345" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="1.245,
					0" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1," expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input=",12.123456789"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1.00596,240" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="0,240" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
    </testcase>
    <testcase testName="testFloorUsesCase"
              fieldName="testFloorUsesCase"
              dataType="Double"
              formula="FLOOR(CASE(customdate1__c,customdate2__c,customnumber1__c,customdate3__c,customnumber2__c,customnumber3__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customdate3" dataType="DateOnly"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customnumber3" dataType="Double"/>
        <testData input="2004:12:04,2004:12:04,200,2004:12:04,300,400"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="2004:12:04,2004:12:03,200,2004:12:04,300,400"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="2004:12:04,2004:12:04,200,2004:12:03,300,400"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="2004:12:05,2004:12:04,200,2004:12:04,300,400"
                  expectedOutput="400,
					400,
					400,
					400,
					400,
					400,
					400,
					400"/>
        <testData input=",2004:12:04,200,2004:12:04,300,400"
                  expectedOutput="400,
					400,
					400,
					400,
					400,
					400,
					400,
					400"/>
        <testData input=",,200,2004:12:04,300,400"
                  expectedOutput="400,
					400,
					400,
					400,
					400,
					400,
					400,
					400"/>
        <testData input="2004:12:04,2004:12:04,200,,300,400"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="2004:12:04,,200,2004:12:04,300,400"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="2004:12:04,2004:12:04,,2004:12:04,300,400"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:04,2004:12:05,200,2004:12:04,,400"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:04,2004:12:05,200,2004:12:06,,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:06,2004:12:04,200,2004:12:04,300,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",,,,,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testFloorUsesLen"
              fieldName="testFloorUsesLen"
              dataType="Double"
              formula="FLOOR(LEN(customtext1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="This is too good to be true"
                  expectedOutput="27,
					27,
					27,
					27,
					27,
					27,
					27,
					27"/>
        <testData input="making a way"
                  expectedOutput="12,
					12,
					12,
					12,
					12,
					12,
					12,
					12"/>
        <testData input="" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="blunder" expectedOutput="7,
					7,
					7,
					7,
					7,
					7,
					7,
					7"/>
        <testData input="makesense" expectedOutput="9,
					9,
					9,
					9,
					9,
					9,
					9,
					9"/>
        <testData input="does not make sense"
                  expectedOutput="19,
					19,
					19,
					19,
					19,
					19,
					19,
					19"/>
        <testData input="working my way"
                  expectedOutput="14,
					14,
					14,
					14,
					14,
					14,
					14,
					14"/>
        <testData input="e" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag"
                  expectedOutput="172,
					172,
					172,
					172,
					172,
					172,
					172,
					172"/>
        <testData input="250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_"
                  expectedOutput="52,
					52,
					52,
					52,
					52,
					52,
					52,
					52"/>
        <testData input="blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r"
                  expectedOutput="57,
					57,
					57,
					57,
					57,
					57,
					57,
					57"/>
    </testcase>
    <testcase testName="testFloorUsesValue"
              fieldName="testFloorUsesValue"
              dataType="Double"
              formula="FLOOR(VALUE(customtext1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="2" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="-1" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-10"
                  expectedOutput="-10,
					-10,
					-10,
					-10,
					-10,
					-10,
					-10,
					-10"/>
        <testData input="-100"
                  expectedOutput="-100,
					-100,
					-100,
					-100,
					-100,
					-100,
					-100,
					-100"/>
        <testData input="56" expectedOutput="56,
					56,
					56,
					56,
					56,
					56,
					56,
					56"/>
        <testData input="110"
                  expectedOutput="110,
					110,
					110,
					110,
					110,
					110,
					110,
					110"/>
        <testData input="20" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
    </testcase>
    <testcase testName="testFloorUsesMultiply"
              fieldName="testFloorUsesMultiply"
              dataType="Double"
              formula="FLOOR(customformula0__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customformula0"
                        dataType="Double"
                        formula="(custompercent1__c*customcurrency1__c)">
            <referenceField fieldName="custompercent1" dataType="Percent"/>
            <referenceField fieldName="customcurrency1" dataType="Currency"/>
        </referenceField>
        <testData input=",24" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.0,0.0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.00,0.00" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.000,0.000" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-1.0,99.0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="99,
					-1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-20,-40" expectedOutput="8,
					8,
					8,
					8,
					8,
					8,
					8,
					8"/>
        <testData input="1.1111,1.1111" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="1.11114,0.00000" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="1.11115,0.00000" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123456789,123456789"
                  expectedOutput="152415787501905,
					152415787501905,
					152415787501905,
					152415787501905,
					152415787501905,
					152415787501905,
					152415787501905,
					152415787501905"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="152415787806736,
					152415787806736,
					152415787806736,
					152415787806736,
					152415787806736,
					152415787806736,
					152415787806736,
					152415787806736"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="-152415787806736,
					-152415787806736,
					-152415787806736,
					-152415787806736,
					-152415787806736,
					-152415787806736,
					-152415787806736,
					-152415787806736"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="152415787806736,
					152415787806736,
					152415787806736,
					152415787806736,
					152415787806736,
					152415787806736,
					152415787806736,
					152415787806736"/>
        <testData input="600,
					0.000600" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="600, -600"
                  expectedOutput="-3600,
					-3600,
					-3600,
					-3600,
					-3600,
					-3600,
					-3600,
					-3600"/>
        <testData input="1.2345,
					1.2345" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="1.245,
					0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",12.123456789"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1.00596,240" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="0,240" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
    </testcase>
    <testcase testName="testFloorUsesMinus"
              fieldName="testFloorUsesMinus"
              dataType="Double"
              formula="FLOOR((custompercent1__c-customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input=",24"
                  expectedOutput="-24,
					-24,
					-24,
					-24,
					null,
					null,
					null,
					null"/>
        <testData input="0.0,0.0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.00,0.00" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.000,0.000" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-1.0,99.0"
                  expectedOutput="-99,
					-99,
					-99,
					-99,
					-99,
					-99,
					-99,
					-99"/>
        <testData input="99,
					-1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-20,-40" expectedOutput="39,
					39,
					39,
					39,
					39,
					39,
					39,
					39"/>
        <testData input="1.1111,1.1111"
                  expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="1.11114,0.00000" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="1.11115,0.00000" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="123456789,123456789"
                  expectedOutput="-122222221,
					-122222221,
					-122222221,
					-122222221,
					-122222221,
					-122222221,
					-122222221,
					-122222221"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="-122222221,
					-122222221,
					-122222221,
					-122222221,
					-122222221,
					-122222221,
					-122222221,
					-122222221"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="124691357,
					124691357,
					124691357,
					124691357,
					124691357,
					124691357,
					124691357,
					124691357"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="122222221,
					122222221,
					122222221,
					122222221,
					122222221,
					122222221,
					122222221,
					122222221"/>
        <testData input="600,
					0.000600" expectedOutput="5,
					5,
					5,
					5,
					5,
					5,
					5,
					5"/>
        <testData input="600, -600"
                  expectedOutput="606,
					606,
					606,
					606,
					606,
					606,
					606,
					606"/>
        <testData input="1.2345, 1.2345"
                  expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="1.245,
					0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",12.123456789"
                  expectedOutput="-12,
					-12,
					-12,
					-12,
					null,
					null,
					null,
					null"/>
        <testData input="1.00596,240"
                  expectedOutput="-239,
					-239,
					-239,
					-239,
					-239,
					-239,
					-239,
					-239"/>
        <testData input="0,240"
                  expectedOutput="-240,
					-240,
					-240,
					-240,
					-240,
					-240,
					-240,
					-240"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="-999,
					-999,
					-999,
					-1000,
					-999,
					-999,
					-999,
					-1000"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="1000,
					1000,
					1000,
					1000,
					1000,
					1000,
					1000,
					1000"/>
    </testcase>
    <testcase testName="testCeilSimple"
              fieldName="testCeilSimple"
              dataType="Double"
              formula="CEILING(customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="20.842345"
                  expectedOutput="21,
					21,
					21,
					21,
					21,
					21,
					21,
					21"/>
        <testData input="123456789.54321"
                  expectedOutput="123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790"/>
        <testData input="123456789.123456789"
                  expectedOutput="123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790"/>
        <testData input="49.55" expectedOutput="50,
					50,
					50,
					50,
					50,
					50,
					50,
					50"/>
        <testData input="0.00034" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="0.244" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="25.7456" expectedOutput="26,
					26,
					26,
					26,
					26,
					26,
					26,
					26"/>
        <testData input="64.456" expectedOutput="65,
					65,
					65,
					65,
					65,
					65,
					65,
					65"/>
        <testData input="-.4" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-.7" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-1.4" expectedOutput="-2,
					-2,
					-2,
					-2,
					-2,
					-2,
					-2,
					-2"/>
        <testData input="-1.7" expectedOutput="-2,
					-2,
					-2,
					-2,
					-2,
					-2,
					-2,
					-2"/>
    </testcase>
    <testcase testName="testMCeilSimple"
              fieldName="testMCeilSimple"
              dataType="Double"
              formula="MCEILING(customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="20.842345"
                  expectedOutput="21,
					21,
					21,
					21,
					21,
					21,
					21,
					21"/>
        <testData input="123456789.54321"
                  expectedOutput="123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790"/>
        <testData input="123456789.123456789"
                  expectedOutput="123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790"/>
        <testData input="49.55" expectedOutput="50,
					50,
					50,
					50,
					50,
					50,
					50,
					50"/>
        <testData input="0.00034" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="0.244" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="25.7456" expectedOutput="26,
					26,
					26,
					26,
					26,
					26,
					26,
					26"/>
        <testData input="64.456" expectedOutput="65,
					65,
					65,
					65,
					65,
					65,
					65,
					65"/>
        <testData input="-.4" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-.7" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-1.4" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-1.7" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
    </testcase>
    <testcase testName="testCeilRound"
              fieldName="testCeilRound"
              dataType="Double"
              formula="CEILING((customnumber1__c/customnumber2__c)*customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="1,9" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="2,9" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="3,9" expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
        <testData input="4,9" expectedOutput="4,
					4,
					4,
					4,
					4,
					4,
					4,
					4"/>
        <testData input="5,9" expectedOutput="5,
					6,
					5,
					5,
					5,
					6,
					5,
					5"/>
        <testData input="6,9" expectedOutput="6,
					7,
					6,
					6,
					6,
					7,
					6,
					6"/>
        <testData input="7,9" expectedOutput="7,
					8,
					7,
					7,
					7,
					8,
					7,
					7"/>
        <testData input="8,9" expectedOutput="8,
					9,
					8,
					8,
					8,
					9,
					8,
					8"/>
        <testData input="1,11" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="2,11" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="3,11" expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
        <testData input="4,11" expectedOutput="4,
					4,
					4,
					4,
					4,
					4,
					4,
					4"/>
        <testData input="5,11" expectedOutput="5,
					5,
					5,
					5,
					5,
					5,
					5,
					5"/>
        <testData input="6,11" expectedOutput="6,
					7,
					6,
					6,
					6,
					7,
					6,
					6"/>
        <testData input="7,11" expectedOutput="7,
					8,
					7,
					7,
					7,
					8,
					7,
					7"/>
        <testData input="8,11" expectedOutput="8,
					9,
					8,
					8,
					8,
					9,
					8,
					8"/>
        <testData input="9,11" expectedOutput="9,
					10,
					9,
					9,
					9,
					10,
					9,
					9"/>
        <testData input="10,11" expectedOutput="10,
					11,
					10,
					10,
					10,
					11,
					10,
					10"/>
        <testData input="10,9" expectedOutput="10,
					10,
					10,
					10,
					10,
					10,
					10,
					10"/>
        <testData input="11,9" expectedOutput="11,
					11,
					11,
					11,
					11,
					11,
					11,
					11"/>
        <testData input="12,9" expectedOutput="12,
					12,
					12,
					12,
					12,
					12,
					12,
					12"/>
        <testData input="13,9" expectedOutput="13,
					13,
					13,
					13,
					13,
					13,
					13,
					13"/>
        <testData input="14,9" expectedOutput="14,
					15,
					14,
					14,
					14,
					15,
					14,
					14"/>
        <testData input="15,9" expectedOutput="15,
					16,
					15,
					15,
					15,
					16,
					15,
					15"/>
        <testData input="16,9" expectedOutput="16,
					17,
					16,
					16,
					16,
					17,
					16,
					16"/>
        <testData input="17,9" expectedOutput="17,
					18,
					17,
					17,
					17,
					18,
					17,
					17"/>
        <testData input="18,9" expectedOutput="18,
					18,
					18,
					18,
					18,
					18,
					18,
					18"/>
        <testData input="19,9" expectedOutput="19,
					19,
					19,
					19,
					19,
					19,
					19,
					19"/>
    </testcase>
    <testcase testName="testMCeilRound"
              fieldName="testMCeilRound"
              dataType="Double"
              formula="MCEILING((customnumber1__c/customnumber2__c)*customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="1,9" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="2,9" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="3,9" expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
        <testData input="4,9" expectedOutput="4,
					4,
					4,
					4,
					4,
					4,
					4,
					4"/>
        <testData input="5,9" expectedOutput="5,
					6,
					5,
					5,
					5,
					6,
					5,
					5"/>
        <testData input="6,9" expectedOutput="6,
					7,
					6,
					6,
					6,
					7,
					6,
					6"/>
        <testData input="7,9" expectedOutput="7,
					8,
					7,
					7,
					7,
					8,
					7,
					7"/>
        <testData input="8,9" expectedOutput="8,
					9,
					8,
					8,
					8,
					9,
					8,
					8"/>
        <testData input="1,11" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="2,11" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="3,11" expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
        <testData input="4,11" expectedOutput="4,
					4,
					4,
					4,
					4,
					4,
					4,
					4"/>
        <testData input="5,11" expectedOutput="5,
					5,
					5,
					5,
					5,
					5,
					5,
					5"/>
        <testData input="6,11" expectedOutput="6,
					7,
					6,
					6,
					6,
					7,
					6,
					6"/>
        <testData input="7,11" expectedOutput="7,
					8,
					7,
					7,
					7,
					8,
					7,
					7"/>
        <testData input="8,11" expectedOutput="8,
					9,
					8,
					8,
					8,
					9,
					8,
					8"/>
        <testData input="9,11" expectedOutput="9,
					10,
					9,
					9,
					9,
					10,
					9,
					9"/>
        <testData input="10,11" expectedOutput="10,
					11,
					10,
					10,
					10,
					11,
					10,
					10"/>
        <testData input="10,9" expectedOutput="10,
					10,
					10,
					10,
					10,
					10,
					10,
					10"/>
        <testData input="11,9" expectedOutput="11,
					11,
					11,
					11,
					11,
					11,
					11,
					11"/>
        <testData input="12,9" expectedOutput="12,
					12,
					12,
					12,
					12,
					12,
					12,
					12"/>
        <testData input="13,9" expectedOutput="13,
					13,
					13,
					13,
					13,
					13,
					13,
					13"/>
        <testData input="14,9" expectedOutput="14,
					15,
					14,
					14,
					14,
					15,
					14,
					14"/>
        <testData input="15,9" expectedOutput="15,
					16,
					15,
					15,
					15,
					16,
					15,
					15"/>
        <testData input="16,9" expectedOutput="16,
					17,
					16,
					16,
					16,
					17,
					16,
					16"/>
        <testData input="17,9" expectedOutput="17,
					18,
					17,
					17,
					17,
					18,
					17,
					17"/>
        <testData input="18,9" expectedOutput="18,
					18,
					18,
					18,
					18,
					18,
					18,
					18"/>
        <testData input="19,9" expectedOutput="19,
					19,
					19,
					19,
					19,
					19,
					19,
					19"/>
    </testcase>
    <testcase testName="testCeilUsesAbs"
              fieldName="testCeilUsesAbs"
              dataType="Double"
              formula="CEILING(ABS(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12345" expectedOutput="21,
					21,
					21,
					21,
					21,
					21,
					21,
					21"/>
        <testData input="-1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-123456789.123456789"
                  expectedOutput="123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790"/>
        <testData input="123456789.123456789"
                  expectedOutput="123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790"/>
        <testData input="46" expectedOutput="46,
					46,
					46,
					46,
					46,
					46,
					46,
					46"/>
        <testData input="-0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.00034" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-.244" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-0.244" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-0.245" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input=".24456" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="0.24456" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="16" expectedOutput="16,
					16,
					16,
					16,
					16,
					16,
					16,
					16"/>
        <testData input="256"
                  expectedOutput="256,
					256,
					256,
					256,
					256,
					256,
					256,
					256"/>
        <testData input="-256"
                  expectedOutput="256,
					256,
					256,
					256,
					256,
					256,
					256,
					256"/>
    </testcase>
    <testcase testName="testCeilUsesCeil"
              fieldName="testCeilUsesCeil"
              dataType="Double"
              formula="CEILING(CEILING(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="20.842345"
                  expectedOutput="21,
					21,
					21,
					21,
					21,
					21,
					21,
					21"/>
        <testData input="123456789.54321"
                  expectedOutput="123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790"/>
        <testData input="123456789.123456789"
                  expectedOutput="123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790"/>
        <testData input="49.55" expectedOutput="50,
					50,
					50,
					50,
					50,
					50,
					50,
					50"/>
        <testData input="0.00034" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="0.244" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="25.7456" expectedOutput="26,
					26,
					26,
					26,
					26,
					26,
					26,
					26"/>
        <testData input="64.456" expectedOutput="65,
					65,
					65,
					65,
					65,
					65,
					65,
					65"/>
        <testData input="-.4" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-.7" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-1.4" expectedOutput="-2,
					-2,
					-2,
					-2,
					-2,
					-2,
					-2,
					-2"/>
        <testData input="-1.7" expectedOutput="-2,
					-2,
					-2,
					-2,
					-2,
					-2,
					-2,
					-2"/>
    </testcase>
    <testcase testName="testCeilUsesFloor"
              fieldName="testCeilUsesFloor"
              dataType="Double"
              formula="CEILING(FLOOR(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="20.842345"
                  expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="123456789.54321"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="123456789.123456789"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="49.55" expectedOutput="49,
					49,
					49,
					49,
					49,
					49,
					49,
					49"/>
        <testData input="0.00034" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.244" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="25.7456" expectedOutput="25,
					25,
					25,
					25,
					25,
					25,
					25,
					25"/>
        <testData input="64.456" expectedOutput="64,
					64,
					64,
					64,
					64,
					64,
					64,
					64"/>
        <testData input="-.4" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-.7" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-1.4" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-1.7" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
    </testcase>
    <testcase testName="testMCeilUsesMFloor"
              fieldName="testMCeilUsesMFloor"
              dataType="Double"
              formula="MCEILING(MFLOOR(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="20.842345"
                  expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="123456789.54321"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="123456789.123456789"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="49.55" expectedOutput="49,
					49,
					49,
					49,
					49,
					49,
					49,
					49"/>
        <testData input="0.00034" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.244" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="25.7456" expectedOutput="25,
					25,
					25,
					25,
					25,
					25,
					25,
					25"/>
        <testData input="64.456" expectedOutput="64,
					64,
					64,
					64,
					64,
					64,
					64,
					64"/>
        <testData input="-.4" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-.7" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-1.4" expectedOutput="-2,
					-2,
					-2,
					-2,
					-2,
					-2,
					-2,
					-2"/>
        <testData input="-1.7" expectedOutput="-2,
					-2,
					-2,
					-2,
					-2,
					-2,
					-2,
					-2"/>
    </testcase>
    <testcase testName="testCeilUsesLog"
              fieldName="testCeilUsesLog"
              dataType="Double"
              formula="CEILING(LOG(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="3" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="4" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="5" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="6" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="10000" expectedOutput="4,
					4,
					4,
					4,
					4,
					4,
					4,
					4"/>
        <testData input="10" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="16" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="2.56" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="123456789.123456789"
                  expectedOutput="9,
					9,
					9,
					9,
					9,
					9,
					9,
					9"/>
    </testcase>
    <testcase testName="testCeilUsesLn"
              fieldName="testCeilUsesLn"
              dataType="Double"
              formula="CEILING(LN(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="3" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="4" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="5" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="6" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="10000" expectedOutput="10,
					10,
					10,
					10,
					10,
					10,
					10,
					10"/>
        <testData input="10" expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
        <testData input="16" expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
        <testData input="2.56" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="123456789.123456789"
                  expectedOutput="19,
					19,
					19,
					19,
					19,
					19,
					19,
					19"/>
    </testcase>
    <testcase testName="testCeilUsesSqrt"
              fieldName="testCeilUsesSqrt"
              dataType="Double"
              formula="CEILING(SQRT(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="3" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="4" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="7" expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
        <testData input="12" expectedOutput="4,
					4,
					4,
					4,
					4,
					4,
					4,
					4"/>
        <testData input="16" expectedOutput="4,
					4,
					4,
					4,
					4,
					4,
					4,
					4"/>
        <testData input="256" expectedOutput="16,
					16,
					16,
					16,
					16,
					16,
					16,
					16"/>
        <testData input="65536.00"
                  expectedOutput="256,
					256,
					256,
					256,
					256,
					256,
					256,
					256"/>
        <testData input="65536.16"
                  expectedOutput="257,
					257,
					257,
					257,
					257,
					257,
					257,
					257"/>
        <testData input="65536.64"
                  expectedOutput="257,
					257,
					257,
					257,
					257,
					257,
					257,
					257"/>
        <testData input="65536.4816"
                  expectedOutput="257,
					257,
					257,
					257,
					257,
					257,
					257,
					257"/>
    </testcase>
    <testcase testName="testCeilUsesRound"
              fieldName="testCeilUsesRound"
              dataType="Double"
              formula="CEILING(ROUND(customnumber1__c,customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20,-1" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12345, 2"
                  expectedOutput="21,
					21,
					21,
					21,
					21,
					21,
					21,
					21"/>
        <testData input="20.123444,4"
                  expectedOutput="21,
					21,
					21,
					21,
					21,
					21,
					21,
					21"/>
        <testData input="20.123445,4"
                  expectedOutput="21,
					21,
					21,
					21,
					21,
					21,
					21,
					21"/>
        <testData input="20.12345,4"
                  expectedOutput="21,
					21,
					21,
					21,
					21,
					21,
					21,
					21"/>
        <testData input="20.12,4" expectedOutput="21,
					21,
					21,
					21,
					21,
					21,
					21,
					21"/>
        <testData input="-1,2" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-1,0" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="-123456790,
					-123456790,
					-123456790,
					-123456790,
					-123456790,
					-123456790,
					-123456790,
					-123456790"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790"/>
        <testData input="46,
					0" expectedOutput="46,
					46,
					46,
					46,
					46,
					46,
					46,
					46"/>
        <testData input="-0,2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.00034,3" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-.244,2" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-0.244,2" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-0.245,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".24456,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.24456,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",16" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",2" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="-256,"
                  expectedOutput="-256,
					-256,
					-256,
					-256,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testMCeilUsesRound"
              fieldName="testMCeilUsesRound"
              dataType="Double"
              formula="MCEILING(ROUND(customnumber1__c,customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20,-1" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12345, 2"
                  expectedOutput="21,
					21,
					21,
					21,
					21,
					21,
					21,
					21"/>
        <testData input="20.123444,4"
                  expectedOutput="21,
					21,
					21,
					21,
					21,
					21,
					21,
					21"/>
        <testData input="20.123445,4"
                  expectedOutput="21,
					21,
					21,
					21,
					21,
					21,
					21,
					21"/>
        <testData input="20.12345,4"
                  expectedOutput="21,
					21,
					21,
					21,
					21,
					21,
					21,
					21"/>
        <testData input="20.12,4" expectedOutput="21,
					21,
					21,
					21,
					21,
					21,
					21,
					21"/>
        <testData input="-1,2" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-1,0" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="-123456789,
					-123456789,
					-123456789,
					-123456789,
					-123456789,
					-123456789,
					-123456789,
					-123456789"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790"/>
        <testData input="46,
					0" expectedOutput="46,
					46,
					46,
					46,
					46,
					46,
					46,
					46"/>
        <testData input="-0,2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.00034,3" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-.244,2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.244,2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.245,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".24456,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.24456,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",16" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",2" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="-256,"
                  expectedOutput="-256,
					-256,
					-256,
					-256,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testCeilUsesMOD"
              fieldName="testCeilUsesMOD"
              dataType="Double"
              formula="CEILING(MOD(customnumber1__c,customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20,-1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20.12345,
					2" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="20.123444,13" expectedOutput="8,
					8,
					8,
					8,
					8,
					8,
					8,
					8"/>
        <testData input="20.123445,7" expectedOutput="7,
					7,
					7,
					7,
					7,
					7,
					7,
					7"/>
        <testData input="20.12345,23"
                  expectedOutput="21,
					21,
					21,
					21,
					21,
					21,
					21,
					21"/>
        <testData input="20.12,1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-1,2" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-1,2654" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="-2,
					-2,
					-2,
					-2,
					-2,
					-2,
					-2,
					-2"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="46,-456" expectedOutput="46,
					46,
					46,
					46,
					46,
					46,
					46,
					46"/>
        <testData input="-0,-1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.00034,3"
                  expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-.244,2" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-0.244,2" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-0.245,23223244"
                  expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input=".24456,123456789" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="0.24456,0.000045" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input=",16" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",2" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="-256,16" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
    </testcase>
    <testcase testName="testCeilUsesIf"
              fieldName="testCeilUsesIf"
              dataType="Double"
              formula="CEILING(IF(true,customnumber1__c,customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input=",24" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.0,0.0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.00,0.00" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.000,0.000" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-1.0,99.0"
                  expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="99,
					-1" expectedOutput="99,
					99,
					99,
					99,
					99,
					99,
					99,
					99"/>
        <testData input="-20,-40"
                  expectedOutput="-20,
					-20,
					-20,
					-20,
					-20,
					-20,
					-20,
					-20"/>
        <testData input="1.1111,1.1111" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="1.11114,0.00000" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="1.11115,0.00000" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="123456789,123456789"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790,
					123456790"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="-123456790,
					-123456790,
					-123456790,
					-123456790,
					-123456790,
					-123456790,
					-123456790,
					-123456790"/>
        <testData input="600, 0.000600"
                  expectedOutput="600,
					600,
					600,
					600,
					600,
					600,
					600,
					600"/>
        <testData input="600, -600"
                  expectedOutput="600,
					600,
					600,
					600,
					600,
					600,
					600,
					600"/>
        <testData input="1.2345,
					1.2345" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="1.245,
					0" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1," expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input=",12.123456789"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1.00596,240" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="0,240" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
    </testcase>
    <testcase testName="testCeilUsesCase"
              fieldName="testCeilUsesCase"
              dataType="Double"
              formula="CEILING(CASE(customdate1__c,customdate2__c,customnumber1__c,customdate3__c,customnumber2__c,customnumber3__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customdate3" dataType="DateOnly"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customnumber3" dataType="Double"/>
        <testData input="2004:12:04,2004:12:04,200,2004:12:04,300,400"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="2004:12:04,2004:12:03,200,2004:12:04,300,400"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="2004:12:04,2004:12:04,200,2004:12:03,300,400"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="2004:12:05,2004:12:04,200,2004:12:04,300,400"
                  expectedOutput="400,
					400,
					400,
					400,
					400,
					400,
					400,
					400"/>
        <testData input=",2004:12:04,200,2004:12:04,300,400"
                  expectedOutput="400,
					400,
					400,
					400,
					400,
					400,
					400,
					400"/>
        <testData input=",,200,2004:12:04,300,400"
                  expectedOutput="400,
					400,
					400,
					400,
					400,
					400,
					400,
					400"/>
        <testData input="2004:12:04,2004:12:04,200,,300,400"
                  expectedOutput="200,
					200,
					200,
					200,
					200,
					200,
					200,
					200"/>
        <testData input="2004:12:04,,200,2004:12:04,300,400"
                  expectedOutput="300,
					300,
					300,
					300,
					300,
					300,
					300,
					300"/>
        <testData input="2004:12:04,2004:12:04,,2004:12:04,300,400"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:04,2004:12:05,200,2004:12:04,,400"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:04,2004:12:05,200,2004:12:06,,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:06,2004:12:04,200,2004:12:04,300,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",,,,,"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testCeilUsesLen"
              fieldName="testCeilUsesLen"
              dataType="Double"
              formula="CEILING(LEN(customtext1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="This is too good to be true"
                  expectedOutput="27,
					27,
					27,
					27,
					27,
					27,
					27,
					27"/>
        <testData input="making a way"
                  expectedOutput="12,
					12,
					12,
					12,
					12,
					12,
					12,
					12"/>
        <testData input="" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="blunder" expectedOutput="7,
					7,
					7,
					7,
					7,
					7,
					7,
					7"/>
        <testData input="makesense" expectedOutput="9,
					9,
					9,
					9,
					9,
					9,
					9,
					9"/>
        <testData input="does not make sense"
                  expectedOutput="19,
					19,
					19,
					19,
					19,
					19,
					19,
					19"/>
        <testData input="working my way"
                  expectedOutput="14,
					14,
					14,
					14,
					14,
					14,
					14,
					14"/>
        <testData input="e" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag"
                  expectedOutput="172,
					172,
					172,
					172,
					172,
					172,
					172,
					172"/>
        <testData input="250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_"
                  expectedOutput="52,
					52,
					52,
					52,
					52,
					52,
					52,
					52"/>
        <testData input="blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r"
                  expectedOutput="57,
					57,
					57,
					57,
					57,
					57,
					57,
					57"/>
    </testcase>
    <testcase testName="testCeilUsesValue"
              fieldName="testCeilUsesValue"
              dataType="Double"
              formula="CEILING(VALUE(customtext1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="2" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="-1" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-10"
                  expectedOutput="-10,
					-10,
					-10,
					-10,
					-10,
					-10,
					-10,
					-10"/>
        <testData input="-100"
                  expectedOutput="-100,
					-100,
					-100,
					-100,
					-100,
					-100,
					-100,
					-100"/>
        <testData input="56" expectedOutput="56,
					56,
					56,
					56,
					56,
					56,
					56,
					56"/>
        <testData input="110"
                  expectedOutput="110,
					110,
					110,
					110,
					110,
					110,
					110,
					110"/>
        <testData input="20" expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
    </testcase>
    <testcase testName="testCeilUsesMultiply"
              fieldName="testCeilUsesMultiply"
              dataType="Double"
              formula="CEILING((custompercent1__c*customcurrency1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <testData input=",24" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.0,0.0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.00,0.00" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.000,0.000" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-1.0,99.0"
                  expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="99,
					-1" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-20,-40" expectedOutput="8,
					8,
					8,
					8,
					8,
					8,
					8,
					8"/>
        <testData input="1.1111,1.1111" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="1.11114,0.00000" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="1.11115,0.00000" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="123456789,123456789"
                  expectedOutput="152415787501906,
					152415787501906,
					152415787501906,
					152415787501906,
					152415787501906,
					152415787501906,
					152415787501906,
					152415787501906"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="152415787806737,
					152415787806737,
					152415787806737,
					152415787806737,
					152415787806737,
					152415787806737,
					152415787806737,
					152415787806737"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="-152415787806737,
					-152415787806737,
					-152415787806737,
					-152415787806737,
					-152415787806737,
					-152415787806737,
					-152415787806737,
					-152415787806737"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="152415787806737,
					152415787806737,
					152415787806737,
					152415787806737,
					152415787806737,
					152415787806737,
					152415787806737,
					152415787806737"/>
        <testData input="600,
					0.000600" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="600, -600"
                  expectedOutput="-3600,
					-3600,
					-3600,
					-3600,
					-3600,
					-3600,
					-3600,
					-3600"/>
        <testData input="1.2345,
					1.2345" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="1.245,
					0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",12.123456789"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1.00596,240" expectedOutput="3,
					3,
					3,
					3,
					3,
					3,
					3,
					3"/>
        <testData input="0,240" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
    </testcase>
    <testcase testName="testCeilUsesPlus"
              fieldName="testCeilUsesPlus"
              dataType="Double"
              formula="CEILING((custompercent1__c+customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input=",24"
                  expectedOutput="24,
					24,
					24,
					24,
					null,
					null,
					null,
					null"/>
        <testData input="0.0,0.0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.00,0.00" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.000,0.000" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-1.0,99.0"
                  expectedOutput="99,
					99,
					99,
					99,
					99,
					99,
					99,
					99"/>
        <testData input="99,
					-1" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-20,-40"
                  expectedOutput="-41,
					-41,
					-41,
					-41,
					-41,
					-41,
					-41,
					-41"/>
        <testData input="1.1111,1.1111" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="1.11114,0.00000" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="1.11115,0.00000" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="123456789,123456789"
                  expectedOutput="124691357,
					124691357,
					124691357,
					124691357,
					124691357,
					124691357,
					124691357,
					124691357"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="124691358,
					124691358,
					124691358,
					124691358,
					124691358,
					124691358,
					124691358,
					124691358"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="-122222222,
					-122222222,
					-122222222,
					-122222222,
					-122222222,
					-122222222,
					-122222222,
					-122222222"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="-124691358,
					-124691358,
					-124691358,
					-124691358,
					-124691358,
					-124691358,
					-124691358,
					-124691358"/>
        <testData input="600,
					0.000600" expectedOutput="7,
					7,
					7,
					7,
					7,
					7,
					7,
					7"/>
        <testData input="600, -600"
                  expectedOutput="-594,
					-594,
					-594,
					-594,
					-594,
					-594,
					-594,
					-594"/>
        <testData input="1.2345,
					1.2345" expectedOutput="2,
					2,
					2,
					2,
					2,
					2,
					2,
					2"/>
        <testData input="1.245,
					0" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1," expectedOutput="1,
					1,
					1,
					1,
					null,
					null,
					null,
					null"/>
        <testData input=",12.123456789"
                  expectedOutput="13,
					13,
					13,
					13,
					null,
					null,
					null,
					null"/>
        <testData input="1.00596,240"
                  expectedOutput="241,
					241,
					241,
					241,
					241,
					241,
					241,
					241"/>
        <testData input="0,240"
                  expectedOutput="240,
					240,
					240,
					240,
					240,
					240,
					240,
					240"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="1001,
					1001,
					1001,
					1000,
					1001,
					1001,
					1001,
					1000"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="-1000,
					-1000,
					-1000,
					-1000,
					-1000,
					-1000,
					-1000,
					-1000"/>
    </testcase>
    <testcase testName="testModSwapTypes"
              fieldName="testModSwapTypes"
              dataType="Double"
              formula="MOD(customnumber1__c,customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20,-1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20.12345, 2"
                  expectedOutput="0.12345,
					0.12345,
					0.12345,
					0.12345,
					0.12345,
					0.12345,
					0.12345,
					0.12345"/>
        <testData input="20.123444,13"
                  expectedOutput="7.123444,
					7.123444,
					7.123444,
					7.123444,
					7.123444,
					7.123444,
					7.123444,
					7.123444"/>
        <testData input="20.123445,7"
                  expectedOutput="6.123445,
					6.123445,
					6.123445,
					6.123445,
					6.123445,
					6.123445,
					6.123445,
					6.123445"/>
        <testData input="20.12345,23"
                  expectedOutput="20.12345,
					20.12345,
					20.12345,
					20.12345,
					20.12345,
					20.12345,
					20.12345,
					20.12345"/>
        <testData input="20.12,1"
                  expectedOutput="0.12,
					0.12,
					0.12,
					0.12,
					0.12,
					0.12,
					0.12,
					0.12"/>
        <testData input="-1,2" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-1,2654" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="-1.123456789,
					-1.123456789,
					-1.12345679,
					-1.1234568,
					-1.123456789,
					-1.123456789,
					-1.12345679,
					-1.1234568"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="1.123456789,
					1.123456789,
					1.12345679,
					1.1234568,
					1.123456789,
					1.123456789,
					1.12345679,
					1.1234568"/>
        <testData input="46,-456" expectedOutput="46,
					46,
					46,
					46,
					46,
					46,
					46,
					46"/>
        <testData input="-0,-1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.00034,3"
                  expectedOutput="-0.00034,
					-0.00034,
					-0.00034,
					-0.00034,
					-0.00034,
					-0.00034,
					-0.00034,
					-0.00034"/>
        <testData input="-.244,2"
                  expectedOutput="-0.244,
					-0.244,
					-0.244,
					-0.244,
					-0.244,
					-0.244,
					-0.244,
					-0.244"/>
        <testData input="-0.244,2"
                  expectedOutput="-0.244,
					-0.244,
					-0.244,
					-0.244,
					-0.244,
					-0.244,
					-0.244,
					-0.244"/>
        <testData input="-0.245,23223244"
                  expectedOutput="-0.245,
					-0.245,
					-0.245,
					-0.245,
					-0.245,
					-0.245,
					-0.245,
					-0.245"/>
        <testData input=".24456,123456789"
                  expectedOutput="0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456,
					0.24456"/>
        <testData input="0.24456,0.000045"
                  expectedOutput="0.000030,
					0.00003,
					0.00003,
					0.00003,
					0.000030,
					0.00003,
					0.00003,
					0.00003"/>
        <testData input=",16" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",2" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="-256,16" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
    </testcase>
    <testcase testName="testModUsesExpCeil"
              fieldName="testModUsesExpCeil"
              dataType="Double"
              formula="MOD(EXP(customnumber1__c),CEILING(customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,0"
                  expectedOutput="Error: java.lang.ArithmeticException,
					Error: ERROR: division by zero,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.ArithmeticException,
					Error: ERROR: division by zero,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="0,1" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="1,2"
                  expectedOutput="0.718281828459045,
					0.71828182845904523536,
					0.7182818284590452,
					0.7182818,
					0.718281828459045,
					0.71828182845904523536,
					0.7182818284590452,
					0.7182818"/>
        <testData input="2,4"
                  expectedOutput="3.38905609893065,
					3.38905609893065022723,
					3.3890560989306504,
					3.3890561,
					3.38905609893065,
					3.38905609893065022723,
					3.3890560989306504,
					3.3890561"/>
        <testData input="-1,-12"
                  expectedOutput="0.36787944117144233,
					0.3678794411714423216,
					0.36787944117144233,
					0.3678794,
					0.36787944117144233,
					0.3678794411714423216,
					0.36787944117144233,
					0.3678794"/>
        <testData input="-10,2"
                  expectedOutput="0.000045399929762484854,
					0.00004539992976248485,
					0.000045399929762484854,
					0.0000454,
					0.000045399929762484854,
					0.00004539992976248485,
					0.000045399929762484854,
					0.0000454"/>
        <testData input="-100,-1"
                  expectedOutput="0.00000000000000000000000000000000,
					0,
					0E-32,
					0,
					0.00000000000000000000000000000000,
					0,
					0E-32,
					0"/>
        <testData input="30,5"
                  expectedOutput="4.463,
					4.4621469904686507414,
					4.462147,
					4.4628906,
					4.463,
					4.4621469904686507414,
					4.462147,
					4.4628906"/>
        <testData input="30,0"
                  expectedOutput="Error: java.lang.ArithmeticException,
					Error: ERROR: division by zero,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.ArithmeticException,
					Error: ERROR: division by zero,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="30,12"
                  expectedOutput="4.463,
					4.4621469904686507414,
					4.462147,
					4.4628906,
					4.463,
					4.4621469904686507414,
					4.462147,
					4.4628906"/>
        <testData input=","
                  expectedOutput="Error: java.lang.ArithmeticException,
					Error: ERROR: division by zero,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",2" expectedOutput="1.0,
					1,
					1,
					1,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testModUsesFloorAbs"
              fieldName="testModUsesFloorAbs"
              dataType="Double"
              formula="MOD(FLOOR(customnumber1__c),ABS(customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20,-1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20.12345,
					2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="20.123444,13" expectedOutput="7,
					7,
					7,
					7,
					7,
					7,
					7,
					7"/>
        <testData input="20.123445,7" expectedOutput="6,
					6,
					6,
					6,
					6,
					6,
					6,
					6"/>
        <testData input="20.12345,23"
                  expectedOutput="20,
					20,
					20,
					20,
					20,
					20,
					20,
					20"/>
        <testData input="20.12,1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-1,2" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-1,2654" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="46,-456" expectedOutput="46,
					46,
					46,
					46,
					46,
					46,
					46,
					46"/>
        <testData input="-0,-1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.00034,3" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-.244,2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.244,2" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="-0.245,23223244" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".24456,123456789" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="0.24456,0.000045" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=",16" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",2" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="-256,16" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
    </testcase>
    <testcase testName="testModUsesLog"
              fieldName="testModUsesLog"
              dataType="Double"
              formula="MOD(LOG(customnumber1__c),customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,1"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="20,-1"
                  expectedOutput="0.301029995663981,
					0.3010299956639812,
					0.3010299956639812,
					0.30103,
					0.301029995663981,
					0.3010299956639812,
					0.3010299956639812,
					0.30103"/>
        <testData input="20.12345, 2"
                  expectedOutput="1.3037024389842002,
					1.3037024389842005,
					1.3037024389842005,
					1.3037024,
					1.3037024389842002,
					1.3037024389842005,
					1.3037024389842005,
					1.3037024"/>
        <testData input="20.123444,13"
                  expectedOutput="1.3037023094951077,
					1.3037023094951079,
					1.303702309495108,
					1.3037023,
					1.3037023094951077,
					1.3037023094951079,
					1.303702309495108,
					1.3037023"/>
        <testData input="20.123445,7"
                  expectedOutput="1.3037023310766258,
					1.303702331076626,
					1.303702331076626,
					1.3037023,
					1.3037023310766258,
					1.303702331076626,
					1.303702331076626,
					1.3037023"/>
        <testData input="20.12345,23"
                  expectedOutput="1.3037024389842002,
					1.3037024389842005,
					1.3037024389842005,
					1.3037024,
					1.3037024389842002,
					1.3037024389842005,
					1.3037024389842005,
					1.3037024"/>
        <testData input="20.12,1"
                  expectedOutput="0.3036279763838898,
					0.3036279763838898,
					0.3036279763838898,
					0.303628,
					0.3036279763838898,
					0.3036279763838898,
					0.3036279763838898,
					0.303628"/>
        <testData input="-1,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1,2654"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="0.091514977603564,
					0.091514977603565,
					0.09151497760356493,
					0.091515,
					0.091514977603564,
					0.091514977603565,
					0.09151497760356493,
					0.091515"/>
        <testData input="46,-456"
                  expectedOutput="1.6627578316815739,
					1.6627578316815741,
					1.662757831681574,
					1.6627578,
					1.6627578316815739,
					1.6627578316815741,
					1.662757831681574,
					1.6627578"/>
        <testData input="-0,-1"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.00034,3"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-.244,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.244,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.245,23223244"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input=".24456,123456789"
                  expectedOutput="-0.6116145742819675,
					-0.6116145742819676,
					-0.6116145742819675,
					-0.6116146,
					-0.6116145742819675,
					-0.6116145742819676,
					-0.6116145742819675,
					-0.6116146"/>
        <testData input="0.24456,0.000045"
                  expectedOutput="-0.0000195742819675,
					-0.0000195742819676,
					-0.00001957428196758216,
					-0.0000196,
					-0.0000195742819675,
					-0.0000195742819676,
					-0.00001957428196758216,
					-0.0000196"/>
        <testData input=",16"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="-256,16"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
    </testcase>
    <testcase testName="testModUsesLn"
              fieldName="testModUsesLn"
              dataType="Double"
              formula="MOD(LN(customnumber1__c),customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,1"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="20,-1"
                  expectedOutput="0.995732273553991,
					0.995732273553991,
					0.995732273553991,
					0.9957323,
					0.995732273553991,
					0.995732273553991,
					0.995732273553991,
					0.9957323"/>
        <testData input="20.12345, 2"
                  expectedOutput="1.0018858017049994,
					1.0018858017049994,
					1.0018858017049994,
					1.0018858,
					1.0018858017049994,
					1.0018858017049994,
					1.0018858017049994,
					1.0018858"/>
        <testData input="20.123444,13"
                  expectedOutput="3.001885503545345,
					3.0018855035453452,
					3.001885503545345,
					3.0018855,
					3.001885503545345,
					3.0018855035453452,
					3.001885503545345,
					3.0018855"/>
        <testData input="20.123445,7"
                  expectedOutput="3.001885553238627,
					3.0018855532386271,
					3.001885553238627,
					3.0018856,
					3.001885553238627,
					3.0018855532386271,
					3.001885553238627,
					3.0018856"/>
        <testData input="20.12345,23"
                  expectedOutput="3.0018858017049994,
					3.0018858017049994,
					3.0018858017049994,
					3.0018858,
					3.0018858017049994,
					3.0018858017049994,
					3.0018858017049994,
					3.0018858"/>
        <testData input="20.12,1"
                  expectedOutput="0.0017143452315387,
					0.0017143452315385,
					0.0017143452315384572,
					0.0017143,
					0.0017143452315387,
					0.0017143452315385,
					0.0017143452315384572,
					0.0017143"/>
        <testData input="-1,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1,2654"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="0.63140176716802,
					0.631401767168018,
					0.631401767168018,
					0.6314018,
					0.63140176716802,
					0.631401767168018,
					0.631401767168018,
					0.6314018"/>
        <testData input="46,-456"
                  expectedOutput="3.828641396489095,
					3.828641396489095,
					3.828641396489095,
					3.8286414,
					3.828641396489095,
					3.828641396489095,
					3.828641396489095,
					3.8286414"/>
        <testData input="-0,-1"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.00034,3"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-.244,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.244,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.245,23223244"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input=".24456,123456789"
                  expectedOutput="-1.408294601399558,
					-1.408294601399558,
					-1.408294601399558,
					-1.4082946,
					-1.408294601399558,
					-1.408294601399558,
					-1.408294601399558,
					-1.4082946"/>
        <testData input="0.24456,0.000045"
                  expectedOutput="-0.000019601399558,
					-0.000019601399558,
					-0.000019601399557987,
					-0.0000196,
					-0.000019601399558,
					-0.000019601399558,
					-0.000019601399557987,
					-0.0000196"/>
        <testData input=",16"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="-256,16"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
    </testcase>
    <testcase testName="testModUsesSqrt"
              fieldName="testModUsesSqrt"
              dataType="Double"
              formula="MOD(SQRT(customnumber1__c),customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,1" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="20,-1"
                  expectedOutput="0.47213595499958,
					0.472135954999579,
					0.4721359549995794,
					0.472136,
					0.47213595499958,
					0.472135954999579,
					0.4721359549995794,
					0.472136"/>
        <testData input="20.12345, 2"
                  expectedOutput="0.485916851659201,
					0.485916851659201,
					0.48591685165920123,
					0.4859169,
					0.485916851659201,
					0.485916851659201,
					0.48591685165920123,
					0.4859169"/>
        <testData input="20.123444,13"
                  expectedOutput="4.485916182899542,
					4.485916182899542,
					4.485916182899542,
					4.4859162,
					4.485916182899542,
					4.485916182899542,
					4.485916182899542,
					4.4859162"/>
        <testData input="20.123445,7"
                  expectedOutput="4.485916294359493,
					4.485916294359492,
					4.485916294359493,
					4.4859163,
					4.485916294359493,
					4.485916294359492,
					4.485916294359493,
					4.4859163"/>
        <testData input="20.12345,23"
                  expectedOutput="4.485916851659201,
					4.485916851659201,
					4.485916851659201,
					4.4859169,
					4.485916851659201,
					4.485916851659201,
					4.485916851659201,
					4.4859169"/>
        <testData input="20.12,1"
                  expectedOutput="0.485532298401161,
					0.485532298401161,
					0.48553229840116074,
					0.4855323,
					0.485532298401161,
					0.485532298401161,
					0.48553229840116074,
					0.4855323"/>
        <testData input="-1,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1,2654"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="1.11106611111,
					1.11106611111,
					1.111066111111014,
					1.1110661,
					1.11106611111,
					1.11106611111,
					1.111066111111014,
					1.1110661"/>
        <testData input="46,-456"
                  expectedOutput="6.782329983125268,
					6.782329983125268,
					6.782329983125268,
					6.78233,
					6.782329983125268,
					6.782329983125268,
					6.782329983125268,
					6.78233"/>
        <testData input="-0,-1" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="-0.00034,3"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-.244,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.244,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.245,23223244"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input=".24456,123456789"
                  expectedOutput="0.4945300799749192,
					0.49453007997491922,
					0.4945300799749192,
					0.4945301,
					0.4945300799749192,
					0.49453007997491922,
					0.4945300799749192,
					0.4945301"/>
        <testData input="0.24456,0.000045"
                  expectedOutput="0.0000250799749192,
					0.00002507997491922,
					0.00002507997491922028,
					0.0000251,
					0.0000250799749192,
					0.00002507997491922,
					0.00002507997491922028,
					0.0000251"/>
        <testData input=",16"
                  expectedOutput="0.0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",2" expectedOutput="0.0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="-256,16"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
    </testcase>
    <testcase testName="testModUsesRoundPlus"
              fieldName="testModUsesRoundPlus"
              dataType="Double"
              formula="MOD(ROUND(custompercent1__c,customnumber1__c),(customcurrency1__c+customcurrency2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <referenceField fieldName="customcurrency2" dataType="Currency"/>
        <testData input="123456789,123456789,200,300"
                  expectedOutput="67.89,
					67.89,
					67.89,
					67.89,
					67.89,
					67.89,
					67.89,
					67.89"/>
        <testData input="12345678,123456789,200,300"
                  expectedOutput="456.78,
					456.78,
					456.78,
					456.78,
					456.78,
					456.78,
					456.78,
					456.78"/>
        <testData input="12345678,1234567,200,300"
                  expectedOutput="456.78,
					456.78,
					456.78,
					456.78,
					456.78,
					456.78,
					456.78,
					456.78"/>
        <testData input=",10.24,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="10.24,,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",,200,300"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="123.23456789,0,200,300"
                  expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="123.23456789,1,200,300"
                  expectedOutput="1.2,
					1.2,
					1.2,
					1.2,
					1.2,
					1.2,
					1.2,
					1.2"/>
        <testData input="123.23456789,2,200,300"
                  expectedOutput="1.23,
					1.23,
					1.23,
					1.23,
					1.23,
					1.23,
					1.23,
					1.23"/>
        <testData input="123.23456789,3,200,300"
                  expectedOutput="1.232,
					1.232,
					1.232,
					1.232,
					1.232,
					1.232,
					1.232,
					1.232"/>
        <testData input="123.23456789,4,200,300"
                  expectedOutput="1.2323,
					1.2323,
					1.2323,
					1.2323,
					1.2323,
					1.2323,
					1.2323,
					1.2323"/>
        <testData input="123.23456789,5,200,300"
                  expectedOutput="1.23235,
					1.23235,
					1.23235,
					1.23235,
					1.23235,
					1.23235,
					1.23235,
					1.23235"/>
        <testData input="123.23456789,6,200,300"
                  expectedOutput="1.232346,
					1.232346,
					1.232346,
					1.232346,
					1.232346,
					1.232346,
					1.232346,
					1.232346"/>
        <testData input="123.23456789,7,200,300"
                  expectedOutput="1.2323457,
					1.2323457,
					1.2323457,
					1.2323457,
					1.2323457,
					1.2323457,
					1.2323457,
					1.2323457"/>
        <testData input="123.23456789,8,200,300"
                  expectedOutput="1.23234568,
					1.23234568,
					1.23234568,
					1.2323457,
					1.23234568,
					1.23234568,
					1.23234568,
					1.2323457"/>
        <testData input="123.23456789,9,200,300"
                  expectedOutput="1.232345679,
					1.232345679,
					1.232345679,
					1.2323457,
					1.232345679,
					1.232345679,
					1.232345679,
					1.2323457"/>
        <testData input="123.23456780,123.123456789,200,300"
                  expectedOutput="1.232345678,
					1.232345678,
					1.232345678,
					1.2323457,
					1.232345678,
					1.232345678,
					1.232345678,
					1.2323457"/>
        <testData input="123.23456789,123.123456780,200,300"
                  expectedOutput="1.2323456789,
					1.2323456789,
					1.2323456789,
					1.2323457,
					1.2323456789,
					1.2323456789,
					1.2323456789,
					1.2323457"/>
        <testData input="-200.434,200.434, 200, 300"
                  expectedOutput="-2.00434,
					-2.00434,
					-2.00434,
					-2.00434,
					-2.00434,
					-2.00434,
					-2.00434,
					-2.00434"/>
        <testData input="200, -200.434, 200,300"
                  expectedOutput="0,
					0,
					0,
					null,
					0,
					0,
					0,
					null"/>
        <testData input=",,,"
                  expectedOutput="Error: java.lang.ArithmeticException,
					Error: ERROR: division by zero,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="200,,,"
                  expectedOutput="Error: java.lang.ArithmeticException,
					Error: ERROR: division by zero,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",1,,10"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testModUsesIf"
              fieldName="testModUsesIf"
              dataType="Double"
              formula="MOD(IF(customcheckbox1__c,customnumber1__c,customnumber2__c),customnumber3__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customcheckbox1" dataType="Boolean"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customnumber3" dataType="Double"/>
        <testData input="true,100,200,400"
                  expectedOutput="100,
					100,
					100,
					100,
					100,
					100,
					100,
					100"/>
        <testData input="false,123456789,123456789,123456789"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="true,45.4356,45,900"
                  expectedOutput="45.4356,
					45.4356,
					45.4356,
					45.4356,
					45.4356,
					45.4356,
					45.4356,
					45.4356"/>
        <testData input="true,0.00000984,0.9,0.4560001"
                  expectedOutput="0.00000984,
					0.00000984,
					0.00000984,
					0.0000098,
					0.00000984,
					0.00000984,
					0.00000984,
					0.0000098"/>
        <testData input="false,-200,-0.000000008,-0.0000012"
                  expectedOutput="-0.000000008,
					-0.000000008,
					-8E-9,
					0,
					-0.000000008,
					-0.000000008,
					-8E-9,
					0"/>
    </testcase>
    <testcase testName="testModUsesCase"
              fieldName="testModUsesCase"
              dataType="Double"
              formula="MOD(CASE(customdate1__c,customdate2__c,customnumber1__c,customdate3__c,customnumber2__c,customnumber3__c),customformula1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customdate3" dataType="DateOnly"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customnumber3" dataType="Double"/>
        <referenceField fieldName="customformula1"
                        dataType="Double"
                        formula="CASE(customdatetime1__c,customdatetime2__c,customnumber4__c,customdatetime3__c,customnumber5__c,customnumber6__c)">
            <referenceField fieldName="customdatetime1" dataType="DateTime"/>
            <referenceField fieldName="customdatetime2" dataType="DateTime"/>
            <referenceField fieldName="customnumber4" dataType="Double"/>
            <referenceField fieldName="customdatetime3" dataType="DateTime"/>
            <referenceField fieldName="customnumber5" dataType="Double"/>
            <referenceField fieldName="customnumber6" dataType="Double"/>
        </referenceField>
        <testData input="2004:12:04,2004:12:04,200,2004:12:04,300,400,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2004:12:04,2004:12:03,200,2004:12:04,300,400,1999:12:31:24:00:00,2000:01:01:00:00:00,0,1999:12:31:23:59:59,1,2"
                  expectedOutput="Error: java.lang.ArithmeticException,
					Error: ERROR: division by zero,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.ArithmeticException,
					Error: ERROR: division by zero,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2004:12:04,2004:12:04,200,2004:12:03,300,400,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2004:12:05,2004:12:04,200,2004:12:04,300,400,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=",2004:12:04,200,2004:12:04,300,400,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=",,200,2004:12:04,300,400,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2004:12:04,2004:12:04,200,,300,400,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2004:12:04,,200,2004:12:04,300,400,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="2004:12:04,2004:12:04,,2004:12:04,300,400,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:04,2004:12:05,200,2004:12:04,,400,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:04,2004:12:05,200,2004:12:06,,,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:06,2004:12:04,200,2004:12:04,300,,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",,,,,,2004:12:04:12:00:00,2004:12:04:00:00:00,0,2004:12:04:00:00:00,1,2"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testModRounding"
              fieldName="testModRounding"
              dataType="Double"
              formula="MOD(customnumber1__c * 10000, 2)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="56.925559"
                  expectedOutput="1.590000,
					1.59,
					1.59,
					1.59,
					1.590000,
					1.59,
					1.59,
					1.59"/>
        <testData input="1.111123"
                  expectedOutput="1.230000,
					1.23,
					1.23,
					1.23,
					1.230000,
					1.23,
					1.23,
					1.23"/>
        <testData input="1.111145"
                  expectedOutput="1.450000,
					1.45,
					1.45,
					1.45,
					1.450000,
					1.45,
					1.45,
					1.45"/>
        <testData input="1.111155"
                  expectedOutput="1.550000,
					1.55,
					1.55,
					1.55,
					1.550000,
					1.55,
					1.55,
					1.55"/>
        <testData input="1.111160"
                  expectedOutput="1.600000,
					1.6,
					1.6,
					1.6,
					1.600000,
					1.6,
					1.6,
					1.6"/>
    </testcase>
    <testcase testName="testModRoundingNoScale"
              fieldName="testModRounding"
              dataType="Double"
              formula="MOD(customnumber1__c * 10000, 2)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="56.925559"
                  expectedOutput="1.590000,
					1.59,
					1.59,
					1.59,
					1.590000,
					1.59,
					1.59,
					1.59"/>
        <testData input="1.111123"
                  expectedOutput="1.230000,
					1.23,
					1.23,
					1.23,
					1.230000,
					1.23,
					1.23,
					1.23"/>
        <testData input="1.111145"
                  expectedOutput="1.450000,
					1.45,
					1.45,
					1.45,
					1.450000,
					1.45,
					1.45,
					1.45"/>
        <testData input="1.111155"
                  expectedOutput="1.550000,
					1.55,
					1.55,
					1.55,
					1.550000,
					1.55,
					1.55,
					1.55"/>
        <testData input="1.111160"
                  expectedOutput="1.600000,
					1.6,
					1.6,
					1.6,
					1.600000,
					1.6,
					1.6,
					1.6"/>
    </testcase>
    <testcase testName="testLogSimple"
              fieldName="testLogSimple"
              dataType="Double"
              formula="Log(customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="2"
                  expectedOutput="0.30102999566398114,
					0.3010299956639812,
					0.3010299956639812,
					0.30103,
					0.30102999566398114,
					0.3010299956639812,
					0.3010299956639812,
					0.30103"/>
        <testData input="3"
                  expectedOutput="0.47712125471966244,
					0.4771212547196624,
					0.47712125471966244,
					0.4771213,
					0.47712125471966244,
					0.4771212547196624,
					0.47712125471966244,
					0.4771213"/>
        <testData input="4"
                  expectedOutput="0.6020599913279623,
					0.6020599913279624,
					0.6020599913279624,
					0.60206,
					0.6020599913279623,
					0.6020599913279624,
					0.6020599913279624,
					0.60206"/>
        <testData input="5"
                  expectedOutput="0.6989700043360187,
					0.6989700043360188,
					0.6989700043360189,
					0.69897,
					0.6989700043360187,
					0.6989700043360188,
					0.6989700043360189,
					0.69897"/>
        <testData input="6"
                  expectedOutput="0.7781512503836435,
					0.7781512503836436,
					0.7781512503836436,
					0.7781513,
					0.7781512503836435,
					0.7781512503836436,
					0.7781512503836436,
					0.7781513"/>
        <testData input="10000" expectedOutput="4.0,
					4,
					4,
					4,
					4.0,
					4,
					4,
					4"/>
        <testData input="10" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="16"
                  expectedOutput="1.2041199826559246,
					1.2041199826559248,
					1.2041199826559248,
					1.20412,
					1.2041199826559246,
					1.2041199826559248,
					1.2041199826559248,
					1.20412"/>
        <testData input="2.56"
                  expectedOutput="0.40823996531184953,
					0.4082399653118496,
					0.4082399653118496,
					0.40824,
					0.40823996531184953,
					0.4082399653118496,
					0.4082399653118496,
					0.40824"/>
        <testData input="123456789.123456789"
                  expectedOutput="8.091514977603564,
					8.091514977603565,
					8.091514977603564,
					8.091515,
					8.091514977603564,
					8.091514977603565,
					8.091514977603564,
					8.091515"/>
    </testcase>
    <testcase testName="testLogUsesAbs"
              fieldName="testLogUsesAbs"
              dataType="Double"
              formula="Log(ABS(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="20"
                  expectedOutput="1.301029995663981,
					1.3010299956639812,
					1.3010299956639813,
					1.30103,
					1.301029995663981,
					1.3010299956639812,
					1.3010299956639813,
					1.30103"/>
        <testData input="20.12345"
                  expectedOutput="1.3037024389842002,
					1.3037024389842005,
					1.3037024389842005,
					1.3037024,
					1.3037024389842002,
					1.3037024389842005,
					1.3037024389842005,
					1.3037024"/>
        <testData input="-1" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="-123456789.123456789"
                  expectedOutput="8.091514977603564,
					8.091514977603565,
					8.091514977603564,
					8.091515,
					8.091514977603564,
					8.091514977603565,
					8.091514977603564,
					8.091515"/>
        <testData input="123456789.123456789"
                  expectedOutput="8.091514977603564,
					8.091514977603565,
					8.091514977603564,
					8.091515,
					8.091514977603564,
					8.091514977603565,
					8.091514977603564,
					8.091515"/>
        <testData input="46"
                  expectedOutput="1.6627578316815739,
					1.6627578316815741,
					1.662757831681574,
					1.6627578,
					1.6627578316815739,
					1.6627578316815741,
					1.662757831681574,
					1.6627578"/>
        <testData input="-0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.00034"
                  expectedOutput="-3.4685210829577446,
					-3.4685210829577449,
					-3.468521082957745,
					-3.4685211,
					-3.4685210829577446,
					-3.4685210829577449,
					-3.468521082957745,
					-3.4685211"/>
        <testData input="-.244"
                  expectedOutput="-0.6126101736612705,
					-0.6126101736612706,
					-0.6126101736612706,
					-0.6126102,
					-0.6126101736612705,
					-0.6126101736612706,
					-0.6126101736612706,
					-0.6126102"/>
        <testData input="-0.244"
                  expectedOutput="-0.6126101736612705,
					-0.6126101736612706,
					-0.6126101736612706,
					-0.6126102,
					-0.6126101736612705,
					-0.6126101736612706,
					-0.6126101736612706,
					-0.6126102"/>
        <testData input="-0.245"
                  expectedOutput="-0.6108339156354675,
					-0.6108339156354675,
					-0.6108339156354675,
					-0.6108339,
					-0.6108339156354675,
					-0.6108339156354675,
					-0.6108339156354675,
					-0.6108339"/>
        <testData input=".24456"
                  expectedOutput="-0.6116145742819675,
					-0.6116145742819676,
					-0.6116145742819675,
					-0.6116146,
					-0.6116145742819675,
					-0.6116145742819676,
					-0.6116145742819675,
					-0.6116146"/>
        <testData input="0.24456"
                  expectedOutput="-0.6116145742819675,
					-0.6116145742819676,
					-0.6116145742819675,
					-0.6116146,
					-0.6116145742819675,
					-0.6116145742819676,
					-0.6116145742819675,
					-0.6116146"/>
        <testData input="16"
                  expectedOutput="1.2041199826559246,
					1.2041199826559248,
					1.2041199826559248,
					1.20412,
					1.2041199826559246,
					1.2041199826559248,
					1.2041199826559248,
					1.20412"/>
        <testData input="256"
                  expectedOutput="2.408239965311849,
					2.4082399653118496,
					2.4082399653118496,
					2.40824,
					2.408239965311849,
					2.4082399653118496,
					2.4082399653118496,
					2.40824"/>
        <testData input="-256"
                  expectedOutput="2.408239965311849,
					2.4082399653118496,
					2.4082399653118496,
					2.40824,
					2.408239965311849,
					2.4082399653118496,
					2.4082399653118496,
					2.40824"/>
    </testcase>
    <testcase testName="testLogUsesCeil"
              fieldName="testLogUsesCeil"
              dataType="Double"
              formula="Log(CEILING(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="20.842345"
                  expectedOutput="1.322219294733919,
					1.3222192947339193,
					1.3222192947339193,
					1.3222193,
					1.322219294733919,
					1.3222192947339193,
					1.3222192947339193,
					1.3222193"/>
        <testData input="123456789.54321"
                  expectedOutput="8.091514980687055,
					8.091514980687056,
					8.091514980687055,
					8.091515,
					8.091514980687055,
					8.091514980687056,
					8.091514980687055,
					8.091515"/>
        <testData input="123456789.123456789"
                  expectedOutput="8.091514980687055,
					8.091514980687056,
					8.091514980687055,
					8.091515,
					8.091514980687055,
					8.091514980687056,
					8.091514980687055,
					8.091515"/>
        <testData input="49.55"
                  expectedOutput="1.6989700043360185,
					1.6989700043360188,
					1.6989700043360187,
					1.69897,
					1.6989700043360185,
					1.6989700043360188,
					1.6989700043360187,
					1.69897"/>
        <testData input="0.00034" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="0.244" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="25.7456"
                  expectedOutput="1.414973347970818,
					1.414973347970818,
					1.414973347970818,
					1.4149733,
					1.414973347970818,
					1.414973347970818,
					1.414973347970818,
					1.4149733"/>
        <testData input="64.456"
                  expectedOutput="1.8129133566428552,
					1.8129133566428556,
					1.8129133566428555,
					1.8129134,
					1.8129133566428552,
					1.8129133566428556,
					1.8129133566428555,
					1.8129134"/>
        <testData input="-.4"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-.7"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1.4"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1.7"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
    </testcase>
    <testcase testName="testLogUsesMCeil"
              fieldName="testLogUsesMCeil"
              dataType="Double"
              formula="Log(MCEILING(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="20.842345"
                  expectedOutput="1.322219294733919,
					1.3222192947339193,
					1.3222192947339193,
					1.3222193,
					1.322219294733919,
					1.3222192947339193,
					1.3222192947339193,
					1.3222193"/>
        <testData input="123456789.54321"
                  expectedOutput="8.091514980687055,
					8.091514980687056,
					8.091514980687055,
					8.091515,
					8.091514980687055,
					8.091514980687056,
					8.091514980687055,
					8.091515"/>
        <testData input="123456789.123456789"
                  expectedOutput="8.091514980687055,
					8.091514980687056,
					8.091514980687055,
					8.091515,
					8.091514980687055,
					8.091514980687056,
					8.091514980687055,
					8.091515"/>
        <testData input="49.55"
                  expectedOutput="1.6989700043360185,
					1.6989700043360188,
					1.6989700043360187,
					1.69897,
					1.6989700043360185,
					1.6989700043360188,
					1.6989700043360187,
					1.69897"/>
        <testData input="0.00034" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="0.244" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="25.7456"
                  expectedOutput="1.414973347970818,
					1.414973347970818,
					1.414973347970818,
					1.4149733,
					1.414973347970818,
					1.414973347970818,
					1.414973347970818,
					1.4149733"/>
        <testData input="64.456"
                  expectedOutput="1.8129133566428552,
					1.8129133566428556,
					1.8129133566428555,
					1.8129134,
					1.8129133566428552,
					1.8129133566428556,
					1.8129133566428555,
					1.8129134"/>
        <testData input="-.4"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-.7"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1.4"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1.7"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
    </testcase>
    <testcase testName="testLogUsesFloor"
              fieldName="testLogUsesFloor"
              dataType="Double"
              formula="Log(FLOOR(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="20.842345"
                  expectedOutput="1.301029995663981,
					1.3010299956639812,
					1.3010299956639813,
					1.30103,
					1.301029995663981,
					1.3010299956639812,
					1.3010299956639813,
					1.30103"/>
        <testData input="123456789.54321"
                  expectedOutput="8.09151497716927,
					8.09151497716927,
					8.09151497716927,
					8.091515,
					8.09151497716927,
					8.09151497716927,
					8.09151497716927,
					8.091515"/>
        <testData input="123456789.123456789"
                  expectedOutput="8.09151497716927,
					8.09151497716927,
					8.09151497716927,
					8.091515,
					8.09151497716927,
					8.09151497716927,
					8.09151497716927,
					8.091515"/>
        <testData input="49.55"
                  expectedOutput="1.6901960800285134,
					1.6901960800285137,
					1.6901960800285136,
					1.6901961,
					1.6901960800285134,
					1.6901960800285137,
					1.6901960800285136,
					1.6901961"/>
        <testData input="0.00034"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="0.244"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="25.7456"
                  expectedOutput="1.3979400086720375,
					1.3979400086720376,
					1.3979400086720377,
					1.39794,
					1.3979400086720375,
					1.3979400086720376,
					1.3979400086720377,
					1.39794"/>
        <testData input="64.456"
                  expectedOutput="1.8061799739838869,
					1.8061799739838872,
					1.806179973983887,
					1.80618,
					1.8061799739838869,
					1.8061799739838872,
					1.806179973983887,
					1.80618"/>
        <testData input="-.4"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-.7"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1.4"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1.7"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
    </testcase>
    <testcase testName="testLogUsesLog"
              fieldName="testLogUsesLog"
              dataType="Double"
              formula="Log(LOG(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2"
                  expectedOutput="-0.5213902276543249,
					-0.5213902276543248,
					-0.5213902276543249,
					-0.5213902,
					-0.5213902276543249,
					-0.5213902276543248,
					-0.5213902276543249,
					-0.5213902"/>
        <testData input="3"
                  expectedOutput="-0.3213712361305425,
					-0.3213712361305426,
					-0.3213712361305426,
					-0.3213712,
					-0.3213712361305425,
					-0.3213712361305426,
					-0.3213712361305426,
					-0.3213712"/>
        <testData input="4"
                  expectedOutput="-0.22036023199034366,
					-0.2203602319903436,
					-0.2203602319903436,
					-0.2203602,
					-0.22036023199034366,
					-0.2203602319903436,
					-0.2203602319903436,
					-0.2203602"/>
        <testData input="5"
                  expectedOutput="-0.1555414612083443,
					-0.1555414612083443,
					-0.15554146120834428,
					-0.1555415,
					-0.1555414612083443,
					-0.1555414612083443,
					-0.15554146120834428,
					-0.1555415"/>
        <testData input="6"
                  expectedOutput="-0.10893598035898745,
					-0.1089359803589874,
					-0.10893598035898738,
					-0.108936,
					-0.10893598035898745,
					-0.1089359803589874,
					-0.10893598035898738,
					-0.108936"/>
        <testData input="10000"
                  expectedOutput="0.6020599913279623,
					0.6020599913279624,
					0.6020599913279624,
					0.60206,
					0.6020599913279623,
					0.6020599913279624,
					0.6020599913279624,
					0.60206"/>
        <testData input="10" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="16"
                  expectedOutput="0.0806697636736375,
					0.0806697636736376,
					0.08066976367363758,
					0.0806698,
					0.0806697636736375,
					0.0806697636736376,
					0.08066976367363758,
					0.0806698"/>
        <testData input="2.56"
                  expectedOutput="-0.38908448157782616,
					-0.3890844815778261,
					-0.38908448157782616,
					-0.3890845,
					-0.38908448157782616,
					-0.3890844815778261,
					-0.38908448157782616,
					-0.3890845"/>
        <testData input="123456789.123456789"
                  expectedOutput="0.9080298423558821,
					0.9080298423558823,
					0.9080298423558824,
					0.9080298,
					0.9080298423558821,
					0.9080298423558823,
					0.9080298423558824,
					0.9080298"/>
    </testcase>
    <testcase testName="testLogUsesLn"
              fieldName="testLogUsesLn"
              dataType="Double"
              formula="Log(LN(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2"
                  expectedOutput="-0.15917453895486158,
					-0.1591745389548616,
					-0.15917453895486158,
					-0.1591745,
					-0.15917453895486158,
					-0.1591745389548616,
					-0.15917453895486158,
					-0.1591745"/>
        <testData input="3"
                  expectedOutput="0.04084445256892067,
					0.040844452568920642,
					0.040844452568920636,
					0.0408445,
					0.04084445256892067,
					0.040844452568920642,
					0.040844452568920636,
					0.0408445"/>
        <testData input="4"
                  expectedOutput="0.14185545670911956,
					0.1418554567091196,
					0.14185545670911962,
					0.1418555,
					0.14185545670911956,
					0.1418554567091196,
					0.14185545670911962,
					0.1418555"/>
        <testData input="5"
                  expectedOutput="0.20667422749111886,
					0.2066742274911189,
					0.2066742274911189,
					0.2066742,
					0.20667422749111886,
					0.2066742274911189,
					0.2066742274911189,
					0.2066742"/>
        <testData input="6"
                  expectedOutput="0.25327970834047575,
					0.2532797083404758,
					0.2532797083404758,
					0.2532797,
					0.25327970834047575,
					0.2532797083404758,
					0.2532797083404758,
					0.2532797"/>
        <testData input="10000"
                  expectedOutput="0.9642756800274255,
					0.9642756800274256,
					0.9642756800274256,
					0.9642757,
					0.9642756800274255,
					0.9642756800274256,
					0.9642756800274256,
					0.9642757"/>
        <testData input="10"
                  expectedOutput="0.36221568869946325,
					0.3622156886994632,
					0.3622156886994632,
					0.3622157,
					0.36221568869946325,
					0.3622156886994632,
					0.3622156886994632,
					0.3622157"/>
        <testData input="16"
                  expectedOutput="0.44288545237310073,
					0.4428854523731008,
					0.4428854523731008,
					0.4428855,
					0.44288545237310073,
					0.4428854523731008,
					0.4428854523731008,
					0.4428855"/>
        <testData input="2.56"
                  expectedOutput="-0.02686879287836291,
					-0.026868792878362935,
					-0.02686879287836293,
					-0.0268688,
					-0.02686879287836291,
					-0.026868792878362935,
					-0.02686879287836293,
					-0.0268688"/>
        <testData input="123456789.123456789"
                  expectedOutput="1.2702455310553453,
					1.2702455310553455,
					1.2702455310553455,
					1.2702455,
					1.2702455310553453,
					1.2702455310553455,
					1.2702455310553455,
					1.2702455"/>
    </testcase>
    <testcase testName="testLogUsesSqrt"
              fieldName="testLogUsesSqrt"
              dataType="Double"
              formula="Log(SQRT(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2"
                  expectedOutput="0.1505149978319906,
					0.1505149978319906,
					0.1505149978319906,
					0.150515,
					0.1505149978319906,
					0.1505149978319906,
					0.1505149978319906,
					0.150515"/>
        <testData input="3"
                  expectedOutput="0.23856062735983116,
					0.2385606273598311,
					0.23856062735983122,
					0.2385606,
					0.23856062735983116,
					0.2385606273598311,
					0.23856062735983122,
					0.2385606"/>
        <testData input="4"
                  expectedOutput="0.30102999566398114,
					0.3010299956639812,
					0.3010299956639812,
					0.30103,
					0.30102999566398114,
					0.3010299956639812,
					0.3010299956639812,
					0.30103"/>
        <testData input="7"
                  expectedOutput="0.4225490200071284,
					0.4225490200071285,
					0.4225490200071284,
					0.422549,
					0.4225490200071284,
					0.4225490200071285,
					0.4225490200071284,
					0.422549"/>
        <testData input="12"
                  expectedOutput="0.5395906230238123,
					0.5395906230238125,
					0.5395906230238124,
					0.5395906,
					0.5395906230238123,
					0.5395906230238125,
					0.5395906230238124,
					0.5395906"/>
        <testData input="16"
                  expectedOutput="0.6020599913279623,
					0.6020599913279624,
					0.6020599913279624,
					0.60206,
					0.6020599913279623,
					0.6020599913279624,
					0.6020599913279624,
					0.60206"/>
        <testData input="256"
                  expectedOutput="1.2041199826559246,
					1.2041199826559248,
					1.2041199826559248,
					1.20412,
					1.2041199826559246,
					1.2041199826559248,
					1.2041199826559248,
					1.20412"/>
        <testData input="65536.00"
                  expectedOutput="2.408239965311849,
					2.4082399653118496,
					2.4082399653118496,
					2.40824,
					2.408239965311849,
					2.4082399653118496,
					2.4082399653118496,
					2.40824"/>
        <testData input="65536.16"
                  expectedOutput="2.4082404954558334,
					2.4082404954558337,
					2.408240495455834,
					2.4082405,
					2.4082404954558334,
					2.4082404954558337,
					2.408240495455834,
					2.4082405"/>
        <testData input="65536.64"
                  expectedOutput="2.40824208588002,
					2.4082420858800202,
					2.40824208588002,
					2.4082421,
					2.40824208588002,
					2.4082420858800202,
					2.40824208588002,
					2.4082421"/>
        <testData input="65536.4816"
                  expectedOutput="2.408241561041326,
					2.4082415610413263,
					2.408241561041326,
					2.4082416,
					2.408241561041326,
					2.4082415610413263,
					2.408241561041326,
					2.4082416"/>
    </testcase>
    <testcase testName="testLogUsesRound"
              fieldName="testLogUsesRound"
              dataType="Double"
              formula="Log(ROUND(customnumber1__c,customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="20,-1"
                  expectedOutput="1.301029995663981,
					1.3010299956639812,
					1.3010299956639813,
					1.30103,
					1.301029995663981,
					1.3010299956639812,
					1.3010299956639813,
					1.30103"/>
        <testData input="20.12345, 2"
                  expectedOutput="1.3036279763838898,
					1.3036279763838898,
					1.3036279763838898,
					1.303628,
					1.3036279763838898,
					1.3036279763838898,
					1.3036279763838898,
					1.303628"/>
        <testData input="20.123444,4"
                  expectedOutput="1.3037013599072491,
					1.3037013599072494,
					1.3037013599072493,
					1.3037014,
					1.3037013599072491,
					1.3037013599072494,
					1.3037013599072493,
					1.3037014"/>
        <testData input="20.123445,4"
                  expectedOutput="1.3037013599072491,
					1.3037013599072494,
					1.3037013599072493,
					1.3037014,
					1.3037013599072491,
					1.3037013599072494,
					1.3037013599072493,
					1.3037014"/>
        <testData input="20.12345,4"
                  expectedOutput="1.3037035180584702,
					1.3037035180584705,
					1.3037035180584704,
					1.3037014,
					1.3037035180584702,
					1.3037035180584705,
					1.3037035180584704,
					1.3037014"/>
        <testData input="20.12,4"
                  expectedOutput="1.3036279763838898,
					1.3036279763838898,
					1.3036279763838898,
					1.303628,
					1.3036279763838898,
					1.3036279763838898,
					1.3036279763838898,
					1.303628"/>
        <testData input="-1,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1,0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="8.091514977591405,
					8.091514977591405,
					8.091514977591405,
					8.091515,
					8.091514977591405,
					8.091514977591405,
					8.091514977591405,
					8.091515"/>
        <testData input="46, 0"
                  expectedOutput="1.6627578316815739,
					1.6627578316815741,
					1.662757831681574,
					1.6627578,
					1.6627578316815739,
					1.6627578316815741,
					1.662757831681574,
					1.6627578"/>
        <testData input="-0,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.00034,3"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-.244,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.244,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.245,0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input=".24456,"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="0.24456,"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",16"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="-256,"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testLogUsesMOD"
              fieldName="testLogUsesMOD"
              dataType="Double"
              formula="Log(MOD(customnumber1__c,customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,1"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="20,-1"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="20.12345, 2"
                  expectedOutput="-0.9085089057320488,
					-0.9085089057320489,
					-0.9085089057320489,
					-0.9085089,
					-0.9085089057320488,
					-0.9085089057320489,
					-0.9085089057320489,
					-0.9085089"/>
        <testData input="20.123444,13"
                  expectedOutput="0.8526900145032738,
					0.8526900145032738,
					0.8526900145032738,
					0.85269,
					0.8526900145032738,
					0.8526900145032738,
					0.8526900145032738,
					0.85269"/>
        <testData input="20.123445,7"
                  expectedOutput="0.7869958214187462,
					0.7869958214187463,
					0.7869958214187464,
					0.7869958,
					0.7869958214187462,
					0.7869958214187463,
					0.7869958214187464,
					0.7869958"/>
        <testData input="20.12345,23"
                  expectedOutput="1.3037024389842002,
					1.3037024389842005,
					1.3037024389842005,
					1.3037024,
					1.3037024389842002,
					1.3037024389842005,
					1.3037024389842005,
					1.3037024"/>
        <testData input="20.12,1"
                  expectedOutput="-0.9208187539523751,
					-0.9208187539523752,
					-0.9208187539523752,
					-0.9208188,
					-0.9208187539523751,
					-0.9208187539523752,
					-0.9208187539523752,
					-0.9208188"/>
        <testData input="-1,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1,2654"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="0.05055637300814937,
					0.0505563730081494,
					0.05055637339471918,
					0.0505564,
					0.05055637300814937,
					0.0505563730081494,
					0.05055637339471918,
					0.0505564"/>
        <testData input="46,-456"
                  expectedOutput="1.6627578316815739,
					1.6627578316815741,
					1.662757831681574,
					1.6627578,
					1.6627578316815739,
					1.6627578316815741,
					1.662757831681574,
					1.6627578"/>
        <testData input="-0,-1"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.00034,3"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-.244,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.244,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.245,23223244"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input=".24456,123456789"
                  expectedOutput="-0.6116145742819675,
					-0.6116145742819676,
					-0.6116145742819675,
					-0.6116146,
					-0.6116145742819675,
					-0.6116145742819676,
					-0.6116145742819675,
					-0.6116146"/>
        <testData input="0.24456,0.000045"
                  expectedOutput="-4.522878745280337,
					-4.522878745280338,
					-4.522878745280337,
					-4.5228787,
					-4.522878745280337,
					-4.522878745280338,
					-4.522878745280337,
					-4.5228787"/>
        <testData input=",16"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="-256,16"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
    </testcase>
    <testcase testName="testLogUsesIf"
              fieldName="testLogUsesIf"
              dataType="Double"
              formula="Log(IF(false,customnumber1__c,customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input=",24"
                  expectedOutput="1.380211241711606,
					1.380211241711606,
					1.380211241711606,
					1.3802112,
					1.380211241711606,
					1.380211241711606,
					1.380211241711606,
					1.3802112"/>
        <testData input="0.0,0.0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="0.00,0.00"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="0.000,0.000"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1.0,99.0"
                  expectedOutput="1.9956351945975497,
					1.9956351945975499,
					1.99563519459755,
					1.9956352,
					1.9956351945975497,
					1.9956351945975499,
					1.99563519459755,
					1.9956352"/>
        <testData input="99, -1"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-20,-40"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="1.1111,1.1111"
                  expectedOutput="0.04575314759414121,
					0.0457531475941412,
					0.04575314759414122,
					0.0457531,
					0.04575314759414121,
					0.0457531475941412,
					0.04575314759414122,
					0.0457531"/>
        <testData input="1.11114,0.00000"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="1.11115,0.00000"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="-4.366531544420413,
					-4.366531544420413,
					-4.366531544420414,
					-4.3665315,
					-4.366531544420413,
					-4.366531544420413,
					-4.366531544420414,
					-4.3665315"/>
        <testData input="123456789,123456789"
                  expectedOutput="8.09151497716927,
					8.09151497716927,
					8.09151497716927,
					8.091515,
					8.09151497716927,
					8.09151497716927,
					8.09151497716927,
					8.091515"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="8.091514977603564,
					8.091514977603565,
					8.091514977603564,
					8.091515,
					8.091514977603564,
					8.091514977603565,
					8.091514977603564,
					8.091515"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="600, 0.000600"
                  expectedOutput="-3.221848749616356,
					-3.2218487496163564,
					-3.2218487496163566,
					-3.2218487,
					-3.221848749616356,
					-3.2218487496163564,
					-3.2218487496163566,
					-3.2218487"/>
        <testData input="600, -600"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="1.2345, 1.2345"
                  expectedOutput="0.09149109426795106,
					0.0914910942679511,
					0.09149109426795109,
					0.0914911,
					0.09149109426795106,
					0.0914910942679511,
					0.09149109426795109,
					0.0914911"/>
        <testData input="1.245, 0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input=","
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="1,"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",12.123456789"
                  expectedOutput="1.0836264688680546,
					1.0836264688680547,
					1.0836264688680548,
					1.0836265,
					1.0836264688680546,
					1.0836264688680547,
					1.0836264688680548,
					1.0836265"/>
        <testData input="1.00596,240"
                  expectedOutput="2.380211241711606,
					2.380211241711606,
					2.380211241711606,
					2.3802112,
					2.380211241711606,
					2.380211241711606,
					2.380211241711606,
					2.3802112"/>
        <testData input="0,240"
                  expectedOutput="2.380211241711606,
					2.380211241711606,
					2.380211241711606,
					2.3802112,
					2.380211241711606,
					2.380211241711606,
					2.380211241711606,
					2.3802112"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="2.9999999999999996,
					3,
					3,
					3,
					2.9999999999999996,
					3,
					3,
					3"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
    </testcase>
    <testcase testName="testLogUsesCase"
              fieldName="testLogUsesCase"
              dataType="Double"
              formula="Log(CASE(customdate1__c,customdate2__c,customnumber1__c,customdate3__c,customnumber2__c,customnumber3__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customdate3" dataType="DateOnly"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customnumber3" dataType="Double"/>
        <testData input="2004:12:04,2004:12:04,200,2004:12:04,300,400"
                  expectedOutput="2.301029995663981,
					2.3010299956639812,
					2.3010299956639813,
					2.30103,
					2.301029995663981,
					2.3010299956639812,
					2.3010299956639813,
					2.30103"/>
        <testData input="2004:12:04,2004:12:03,200,2004:12:04,300,400"
                  expectedOutput="2.477121254719662,
					2.4771212547196624,
					2.4771212547196626,
					2.4771213,
					2.477121254719662,
					2.4771212547196624,
					2.4771212547196626,
					2.4771213"/>
        <testData input="2004:12:04,2004:12:04,200,2004:12:03,300,400"
                  expectedOutput="2.301029995663981,
					2.3010299956639812,
					2.3010299956639813,
					2.30103,
					2.301029995663981,
					2.3010299956639812,
					2.3010299956639813,
					2.30103"/>
        <testData input="2004:12:05,2004:12:04,200,2004:12:04,300,400"
                  expectedOutput="2.602059991327962,
					2.6020599913279624,
					2.6020599913279625,
					2.60206,
					2.602059991327962,
					2.6020599913279624,
					2.6020599913279625,
					2.60206"/>
        <testData input=",2004:12:04,200,2004:12:04,300,400"
                  expectedOutput="2.602059991327962,
					2.6020599913279624,
					2.6020599913279625,
					2.60206,
					2.602059991327962,
					2.6020599913279624,
					2.6020599913279625,
					2.60206"/>
        <testData input=",,200,2004:12:04,300,400"
                  expectedOutput="2.602059991327962,
					2.6020599913279624,
					2.6020599913279625,
					2.60206,
					2.602059991327962,
					2.6020599913279624,
					2.6020599913279625,
					2.60206"/>
        <testData input="2004:12:04,2004:12:04,200,,300,400"
                  expectedOutput="2.301029995663981,
					2.3010299956639812,
					2.3010299956639813,
					2.30103,
					2.301029995663981,
					2.3010299956639812,
					2.3010299956639813,
					2.30103"/>
        <testData input="2004:12:04,,200,2004:12:04,300,400"
                  expectedOutput="2.477121254719662,
					2.4771212547196624,
					2.4771212547196626,
					2.4771213,
					2.477121254719662,
					2.4771212547196624,
					2.4771212547196626,
					2.4771213"/>
        <testData input="2004:12:04,2004:12:04,,2004:12:04,300,400"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:04,2004:12:05,200,2004:12:04,,400"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:04,2004:12:05,200,2004:12:06,,"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:06,2004:12:04,200,2004:12:04,300,"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",,,,,"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testLogUsesLen"
              fieldName="testLogUsesLen"
              dataType="Double"
              formula="Log(LEN(customtext1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="This is too good to be true"
                  expectedOutput="1.4313637641589871,
					1.4313637641589873,
					1.4313637641589874,
					1.4313638,
					1.4313637641589871,
					1.4313637641589873,
					1.4313637641589874,
					1.4313638"/>
        <testData input="making a way"
                  expectedOutput="1.0791812460476247,
					1.0791812460476248,
					1.0791812460476249,
					1.0791812,
					1.0791812460476247,
					1.0791812460476248,
					1.0791812460476249,
					1.0791812"/>
        <testData input=""
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="blunder"
                  expectedOutput="0.8450980400142567,
					0.8450980400142568,
					0.8450980400142568,
					0.845098,
					0.8450980400142567,
					0.8450980400142568,
					0.8450980400142568,
					0.845098"/>
        <testData input="makesense"
                  expectedOutput="0.9542425094393249,
					0.9542425094393249,
					0.9542425094393249,
					0.9542425,
					0.9542425094393249,
					0.9542425094393249,
					0.9542425094393249,
					0.9542425"/>
        <testData input="does not make sense"
                  expectedOutput="1.2787536009528289,
					1.278753600952829,
					1.2787536009528289,
					1.2787536,
					1.2787536009528289,
					1.278753600952829,
					1.2787536009528289,
					1.2787536"/>
        <testData input="working my way"
                  expectedOutput="1.1461280356782377,
					1.146128035678238,
					1.146128035678238,
					1.146128,
					1.1461280356782377,
					1.146128035678238,
					1.146128035678238,
					1.146128"/>
        <testData input="e" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag"
                  expectedOutput="2.2355284469075487,
					2.2355284469075489,
					2.2355284469075487,
					2.2355284,
					2.2355284469075487,
					2.2355284469075489,
					2.2355284469075487,
					2.2355284"/>
        <testData input="250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_"
                  expectedOutput="1.716003343634799,
					1.7160033436347992,
					1.7160033436347992,
					1.7160033,
					1.716003343634799,
					1.7160033436347992,
					1.7160033436347992,
					1.7160033"/>
        <testData input="blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r"
                  expectedOutput="1.7558748556724912,
					1.7558748556724914,
					1.7558748556724915,
					1.7558749,
					1.7558748556724912,
					1.7558748556724914,
					1.7558748556724915,
					1.7558749"/>
    </testcase>
    <testcase testName="testLogUsesValue"
              fieldName="testLogUsesValue"
              dataType="Double"
              formula="Log(VALUE(customtext1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="1" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="2"
                  expectedOutput="0.30102999566398114,
					0.3010299956639812,
					0.3010299956639812,
					0.30103,
					0.30102999566398114,
					0.3010299956639812,
					0.3010299956639812,
					0.30103"/>
        <testData input="-1"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-10"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-100"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="56"
                  expectedOutput="1.7481880270062005,
					1.7481880270062004,
					1.7481880270062005,
					1.748188,
					1.7481880270062005,
					1.7481880270062004,
					1.7481880270062005,
					1.748188"/>
        <testData input="110"
                  expectedOutput="2.041392685158225,
					2.041392685158225,
					2.041392685158225,
					2.0413927,
					2.041392685158225,
					2.041392685158225,
					2.041392685158225,
					2.0413927"/>
        <testData input="20"
                  expectedOutput="1.301029995663981,
					1.3010299956639812,
					1.3010299956639813,
					1.30103,
					1.301029995663981,
					1.3010299956639812,
					1.3010299956639813,
					1.30103"/>
    </testcase>
    <testcase testName="testLogUsesMinus"
              fieldName="testLogUsesMinus"
              dataType="Double"
              formula="Log((custompercent1__c-customcurrency1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <testData input=",24"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="0.0,0.0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="0.00,0.00"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="0.000,0.000"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1.0,99.0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="99, -1"
                  expectedOutput="0.2988530764097066,
					0.2988530764097066501,
					0.29885307640970665,
					0.2988531,
					0.2988530764097066,
					0.2988530764097066501,
					0.29885307640970665,
					0.2988531"/>
        <testData input="-20,-40"
                  expectedOutput="1.5998830720736876,
					1.59988307207368784531,
					1.5998830720736879,
					1.5998831,
					1.5998830720736876,
					1.59988307207368784531,
					1.5998830720736879,
					1.5998831"/>
        <testData input="1.1111,1.1111"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="1.11114,0.00000"
                  expectedOutput="-1.9542312179295842,
					-1.95423121792958438059,
					-1.9542312179295844,
					-1.9542312,
					-1.9542312179295842,
					-1.95423121792958438059,
					-1.9542312179295844,
					-1.9542312"/>
        <testData input="1.11115,0.00000"
                  expectedOutput="-1.9542273093984572,
					-1.95422730939845742431,
					-1.9542273093984575,
					-1.9542273,
					-1.9542273093984572,
					-1.95422730939845742431,
					-1.9542273093984575,
					-1.9542273"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="-1.9559261409066446,
					-1.95592614090664476943,
					-1.9559261409066449,
					-1.9559261,
					-1.9559261409066446,
					-1.95592614090664476943,
					-1.9559261409066449,
					-1.9559261"/>
        <testData input="123456789,123456789"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="8.095836351386207,
					8.095836351386208,
					8.095836351386207,
					8.0958364,
					8.095836351386207,
					8.095836351386208,
					8.095836351386207,
					8.0958364"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="8.087150172201113,
					8.087150172201115,
					8.087150172201115,
					8.0871502,
					8.087150172201113,
					8.087150172201115,
					8.087150172201115,
					8.0871502"/>
        <testData input="600, 0.000600"
                  expectedOutput="0.778107818763836,
					0.7781078187638361,
					0.7781078187638362,
					0.7781078,
					0.778107818763836,
					0.7781078187638361,
					0.7781078187638362,
					0.7781078"/>
        <testData input="600, -600"
                  expectedOutput="2.782472624166286,
					2.7824726241662862,
					2.782472624166286,
					2.7824726,
					2.782472624166286,
					2.7824726241662862,
					2.782472624166286,
					2.7824726"/>
        <testData input="1.2345, 1.2345"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="1.245, 0"
                  expectedOutput="-1.904830648568245,
					-1.90483064856824485409,
					-1.904830648568245,
					-1.9048306,
					-1.904830648568245,
					-1.90483064856824485409,
					-1.904830648568245,
					-1.9048306"/>
        <testData input=","
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="1,"
                  expectedOutput="-1.9999999999999996,
					-2,
					-2,
					-2,
					null,
					null,
					null,
					null"/>
        <testData input=",12.123456789"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="1.00596,240"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="0,240"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="2.9999999999999996,
					3.00000000000000000043429448190325,
					3,
					3,
					2.9999999999999996,
					3.00000000000000000043429448190325,
					3,
					3"/>
    </testcase>
    <!--<testcase testName="testLogUsesMultiply"
              fieldName="testLogUsesMultiply"
              dataType="Double"
              formula="Log((custompercent1__c*customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input=",24"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="0.0,0.0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="0.00,0.00"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="0.000,0.000"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1.0,99.0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="99, -1"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-20,-40"
                  expectedOutput="0.9030899869919434,
					0.903089986991943585641,
					0.9030899869919435,
					0.90309,
					0.9030899869919434,
					0.903089986991943585641,
					0.9030899869919435,
					0.90309"/>
        <testData input="1.1111,1.1111"
                  expectedOutput="-1.9084937048117172,
					-1.908493704811717551938816,
					-1.9084937048117177,
					-1.9084937,
					-1.9084937048117172,
					-1.908493704811717551938816,
					-1.9084937048117177,
					-1.9084937"/>
        <testData input="1.11114,0.00000"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="1.11115,0.00000"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="-6.320773706424291,
					-6.32077370642429179974359503,
					-6.3207737064242915,
					-6.3207737,
					-6.320773706424291,
					-6.32077370642429179974359503,
					-6.3207737064242915,
					-6.3207737"/>
        <testData input="123456789,123456789"
                  expectedOutput="14.183029954338538,
					14.183029954338541,
					14.18302995433854,
					14.18303,
					14.183029954338538,
					14.183029954338541,
					14.18302995433854,
					14.18303"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="14.183029955207127,
					14.183029955207129858409,
					14.18302995520713,
					14.18303,
					14.183029955207127,
					14.183029955207129858409,
					14.18302995520713,
					14.18303"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="14.183029955207127,
					14.183029955207129858409,
					14.18302995520713,
					14.18303,
					14.183029955207127,
					14.183029955207129858409,
					14.18302995520713,
					14.18303"/>
        <testData input="600, 0.000600"
                  expectedOutput="-2.4436974992327127,
					-2.4436974992327127349825,
					-2.4436974992327127,
					-2.4436975,
					-2.4436974992327127,
					-2.4436974992327127349825,
					-2.4436974992327127,
					-2.4436975"/>
        <testData input="600, -600"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="1.2345, 1.2345"
                  expectedOutput="-1.8170178114640978,
					-1.817017811464097836302006,
					-1.8170178114640978,
					-1.8170178,
					-1.8170178114640978,
					-1.817017811464097836302006,
					-1.8170178114640978,
					-1.8170178"/>
        <testData input="1.245, 0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input=","
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="1,"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",12.123456789"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="1.00596,240"
                  expectedOutput="0.3827919539179473,
					0.382791953917947328767,
					0.38279195391794735,
					0.382792,
					0.3827919539179473,
					0.382791953917947328767,
					0.38279195391794735,
					0.382792"/>
        <testData input="0,240"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="-11.999999999999998,
					-12,
					-12,
					-12,
					-11.999999999999998,
					-12,
					-12,
					-12"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
    </testcase>-->
    <testcase testName="testLNSimple"
              fieldName="testLNSimple"
              dataType="Double"
              formula="LN(customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="2"
                  expectedOutput="0.6931471805599453,
					0.6931471805599453,
					0.6931471805599453,
					0.6931472,
					0.6931471805599453,
					0.6931471805599453,
					0.6931471805599453,
					0.6931472"/>
        <testData input="3"
                  expectedOutput="1.0986122886681098,
					1.0986122886681097,
					1.0986122886681098,
					1.0986123,
					1.0986122886681098,
					1.0986122886681097,
					1.0986122886681098,
					1.0986123"/>
        <testData input="4"
                  expectedOutput="1.3862943611198906,
					1.3862943611198906,
					1.3862943611198906,
					1.3862944,
					1.3862943611198906,
					1.3862943611198906,
					1.3862943611198906,
					1.3862944"/>
        <testData input="5"
                  expectedOutput="1.6094379124341003,
					1.6094379124341004,
					1.6094379124341003,
					1.6094379,
					1.6094379124341003,
					1.6094379124341004,
					1.6094379124341003,
					1.6094379"/>
        <testData input="6"
                  expectedOutput="1.791759469228055,
					1.791759469228055,
					1.791759469228055,
					1.7917595,
					1.791759469228055,
					1.791759469228055,
					1.791759469228055,
					1.7917595"/>
        <testData input="10000"
                  expectedOutput="9.210340371976184,
					9.2103403719761827,
					9.210340371976184,
					9.2103404,
					9.210340371976184,
					9.2103403719761827,
					9.210340371976184,
					9.2103404"/>
        <testData input="10"
                  expectedOutput="2.302585092994046,
					2.3025850929940457,
					2.302585092994046,
					2.3025851,
					2.302585092994046,
					2.3025850929940457,
					2.302585092994046,
					2.3025851"/>
        <testData input="16"
                  expectedOutput="2.772588722239781,
					2.7725887222397812,
					2.772588722239781,
					2.7725887,
					2.772588722239781,
					2.7725887222397812,
					2.772588722239781,
					2.7725887"/>
        <testData input="2.56"
                  expectedOutput="0.9400072584914712,
					0.9400072584914711,
					0.9400072584914712,
					0.9400073,
					0.9400072584914712,
					0.9400072584914711,
					0.9400072584914712,
					0.9400073"/>
        <testData input="123456789.123456789"
                  expectedOutput="18.63140176716802,
					18.631401767168018,
					18.63140176716802,
					18.6314018,
					18.63140176716802,
					18.631401767168018,
					18.63140176716802,
					18.6314018"/>
    </testcase>
    <testcase testName="testLNUsesAbs"
              fieldName="testLNUsesAbs"
              dataType="Double"
              formula="LN(ABS(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="20"
                  expectedOutput="2.995732273553991,
					2.995732273553991,
					2.995732273553991,
					2.9957323,
					2.995732273553991,
					2.995732273553991,
					2.995732273553991,
					2.9957323"/>
        <testData input="20.12345"
                  expectedOutput="3.0018858017049994,
					3.0018858017049994,
					3.0018858017049994,
					3.0018858,
					3.0018858017049994,
					3.0018858017049994,
					3.0018858017049994,
					3.0018858"/>
        <testData input="-1" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="-123456789.123456789"
                  expectedOutput="18.63140176716802,
					18.631401767168018,
					18.63140176716802,
					18.6314018,
					18.63140176716802,
					18.631401767168018,
					18.63140176716802,
					18.6314018"/>
        <testData input="123456789.123456789"
                  expectedOutput="18.63140176716802,
					18.631401767168018,
					18.63140176716802,
					18.6314018,
					18.63140176716802,
					18.631401767168018,
					18.63140176716802,
					18.6314018"/>
        <testData input="46"
                  expectedOutput="3.828641396489095,
					3.828641396489095,
					3.828641396489095,
					3.8286414,
					3.828641396489095,
					3.828641396489095,
					3.828641396489095,
					3.8286414"/>
        <testData input="-0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.00034"
                  expectedOutput="-7.986564940354067,
					-7.986564940354067,
					-7.986564940354067,
					-7.9865649,
					-7.986564940354067,
					-7.986564940354067,
					-7.986564940354067,
					-7.9865649"/>
        <testData input="-.244"
                  expectedOutput="-1.410587053688935,
					-1.4105870536889352,
					-1.410587053688935,
					-1.4105871,
					-1.410587053688935,
					-1.4105870536889352,
					-1.410587053688935,
					-1.4105871"/>
        <testData input="-0.244"
                  expectedOutput="-1.410587053688935,
					-1.4105870536889352,
					-1.410587053688935,
					-1.4105871,
					-1.410587053688935,
					-1.4105870536889352,
					-1.410587053688935,
					-1.4105871"/>
        <testData input="-0.245"
                  expectedOutput="-1.40649706843741,
					-1.4064970684374101,
					-1.40649706843741,
					-1.4064971,
					-1.40649706843741,
					-1.4064970684374101,
					-1.40649706843741,
					-1.4064971"/>
        <testData input=".24456"
                  expectedOutput="-1.408294601399558,
					-1.408294601399558,
					-1.408294601399558,
					-1.4082946,
					-1.408294601399558,
					-1.408294601399558,
					-1.408294601399558,
					-1.4082946"/>
        <testData input="0.24456"
                  expectedOutput="-1.408294601399558,
					-1.408294601399558,
					-1.408294601399558,
					-1.4082946,
					-1.408294601399558,
					-1.408294601399558,
					-1.408294601399558,
					-1.4082946"/>
        <testData input="16"
                  expectedOutput="2.772588722239781,
					2.7725887222397812,
					2.772588722239781,
					2.7725887,
					2.772588722239781,
					2.7725887222397812,
					2.772588722239781,
					2.7725887"/>
        <testData input="256"
                  expectedOutput="5.545177444479562,
					5.5451774444795625,
					5.545177444479562,
					5.5451774,
					5.545177444479562,
					5.5451774444795625,
					5.545177444479562,
					5.5451774"/>
        <testData input="-256"
                  expectedOutput="5.545177444479562,
					5.5451774444795625,
					5.545177444479562,
					5.5451774,
					5.545177444479562,
					5.5451774444795625,
					5.545177444479562,
					5.5451774"/>
    </testcase>
    <testcase testName="testLNUsesCeil"
              fieldName="testLNUsesCeil"
              dataType="Double"
              formula="LN(CEILING(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="20.842345"
                  expectedOutput="3.044522437723423,
					3.044522437723423,
					3.044522437723423,
					3.0445224,
					3.044522437723423,
					3.044522437723423,
					3.044522437723423,
					3.0445224"/>
        <testData input="123456789.54321"
                  expectedOutput="18.631401774268017,
					18.631401774268018,
					18.631401774268017,
					18.6314018,
					18.631401774268017,
					18.631401774268018,
					18.631401774268017,
					18.6314018"/>
        <testData input="123456789.123456789"
                  expectedOutput="18.631401774268017,
					18.631401774268018,
					18.631401774268017,
					18.6314018,
					18.631401774268017,
					18.631401774268018,
					18.631401774268017,
					18.6314018"/>
        <testData input="49.55"
                  expectedOutput="3.912023005428146,
					3.9120230054281461,
					3.912023005428146,
					3.912023,
					3.912023005428146,
					3.9120230054281461,
					3.912023005428146,
					3.912023"/>
        <testData input="0.00034" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="0.244" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="25.7456"
                  expectedOutput="3.258096538021482,
					3.258096538021482,
					3.258096538021482,
					3.2580965,
					3.258096538021482,
					3.258096538021482,
					3.258096538021482,
					3.2580965"/>
        <testData input="64.456"
                  expectedOutput="4.174387269895637,
					4.1743872698956371,
					4.174387269895637,
					4.1743873,
					4.174387269895637,
					4.1743872698956371,
					4.174387269895637,
					4.1743873"/>
        <testData input="-.4"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-.7"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1.4"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1.7"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
    </testcase>
    <testcase testName="testLNUsesFloor"
              fieldName="testLNUsesFloor"
              dataType="Double"
              formula="LN(FLOOR(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="20.842345"
                  expectedOutput="2.995732273553991,
					2.995732273553991,
					2.995732273553991,
					2.9957323,
					2.995732273553991,
					2.995732273553991,
					2.995732273553991,
					2.9957323"/>
        <testData input="123456789.54321"
                  expectedOutput="18.63140176616802,
					18.631401766168018,
					18.63140176616802,
					18.6314018,
					18.63140176616802,
					18.631401766168018,
					18.63140176616802,
					18.6314018"/>
        <testData input="123456789.123456789"
                  expectedOutput="18.63140176616802,
					18.631401766168018,
					18.63140176616802,
					18.6314018,
					18.63140176616802,
					18.631401766168018,
					18.63140176616802,
					18.6314018"/>
        <testData input="49.55"
                  expectedOutput="3.8918202981106265,
					3.8918202981106266,
					3.8918202981106265,
					3.8918203,
					3.8918202981106265,
					3.8918202981106266,
					3.8918202981106265,
					3.8918203"/>
        <testData input="0.00034"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="0.244"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="25.7456"
                  expectedOutput="3.2188758248682006,
					3.2188758248682007,
					3.2188758248682006,
					3.2188758,
					3.2188758248682006,
					3.2188758248682007,
					3.2188758248682006,
					3.2188758"/>
        <testData input="64.456"
                  expectedOutput="4.1588830833596715,
					4.1588830833596719,
					4.1588830833596715,
					4.1588831,
					4.1588830833596715,
					4.1588830833596719,
					4.1588830833596715,
					4.1588831"/>
        <testData input="-.4"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-.7"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1.4"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1.7"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
    </testcase>
    <testcase testName="testLNUsesLog"
              fieldName="testLNUsesLog"
              dataType="Double"
              formula="LN(LOG(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2"
                  expectedOutput="-1.2005453658296203,
					-1.2005453658296201,
					-1.2005453658296201,
					-1.2005454,
					-1.2005453658296203,
					-1.2005453658296201,
					-1.2005453658296201,
					-1.2005454"/>
        <testData input="3"
                  expectedOutput="-0.7399846176312568,
					-0.7399846176312569,
					-0.7399846176312568,
					-0.7399846,
					-0.7399846176312568,
					-0.7399846176312569,
					-0.7399846176312568,
					-0.7399846"/>
        <testData input="4"
                  expectedOutput="-0.507398185269675,
					-0.5073981852696748,
					-0.5073981852696748,
					-0.5073982,
					-0.507398185269675,
					-0.5073981852696748,
					-0.5073981852696748,
					-0.5073982"/>
        <testData input="5"
                  expectedOutput="-0.35814744992084524,
					-0.3581474499208452,
					-0.3581474499208452,
					-0.3581474,
					-0.35814744992084524,
					-0.3581474499208452,
					-0.3581474499208452,
					-0.3581474"/>
        <testData input="6"
                  expectedOutput="-0.25083436446529667,
					-0.2508343644652965,
					-0.2508343644652965,
					-0.2508344,
					-0.25083436446529667,
					-0.2508343644652965,
					-0.2508343644652965,
					-0.2508344"/>
        <testData input="10000"
                  expectedOutput="1.3862943611198906,
					1.3862943611198906,
					1.3862943611198906,
					1.3862944,
					1.3862943611198906,
					1.3862943611198906,
					1.3862943611198906,
					1.3862944"/>
        <testData input="10" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="16"
                  expectedOutput="0.1857489952902703,
					0.1857489952902705,
					0.1857489952902705,
					0.185749,
					0.1857489952902703,
					0.1857489952902705,
					0.1857489952902705,
					0.185749"/>
        <testData input="2.56"
                  expectedOutput="-0.895900127196419,
					-0.8959001271964188,
					-0.8959001271964189,
					-0.8959001,
					-0.895900127196419,
					-0.8959001271964188,
					-0.8959001271964189,
					-0.8959001"/>
        <testData input="123456789.123456789"
                  expectedOutput="2.0908159790023877,
					2.0908159790023879,
					2.090815979002388,
					2.090816,
					2.0908159790023877,
					2.0908159790023879,
					2.090815979002388,
					2.090816"/>
    </testcase>
    <testcase testName="testLNUsesLn"
              fieldName="testLNUsesLn"
              dataType="Double"
              formula="LN(LN(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2"
                  expectedOutput="-0.36651292058166435,
					-0.3665129205816643,
					-0.36651292058166435,
					-0.3665129,
					-0.36651292058166435,
					-0.3665129205816643,
					-0.36651292058166435,
					-0.3665129"/>
        <testData input="3"
                  expectedOutput="0.0940478276166991,
					0.094047827616699024,
					0.09404782761669901,
					0.0940478,
					0.0940478276166991,
					0.094047827616699024,
					0.09404782761669901,
					0.0940478"/>
        <testData input="4"
                  expectedOutput="0.32663425997828094,
					0.326634259978281,
					0.326634259978281,
					0.3266343,
					0.32663425997828094,
					0.326634259978281,
					0.326634259978281,
					0.3266343"/>
        <testData input="5"
                  expectedOutput="0.47588499532711054,
					0.4758849953271106,
					0.4758849953271106,
					0.475885,
					0.47588499532711054,
					0.4758849953271106,
					0.4758849953271106,
					0.475885"/>
        <testData input="6"
                  expectedOutput="0.5831980807826592,
					0.5831980807826593,
					0.5831980807826593,
					0.5831981,
					0.5831980807826592,
					0.5831980807826593,
					0.5831980807826593,
					0.5831981"/>
        <testData input="10000"
                  expectedOutput="2.2203268063678463,
					2.2203268063678464,
					2.2203268063678463,
					2.2203268,
					2.2203268063678463,
					2.2203268063678464,
					2.2203268063678463,
					2.2203268"/>
        <testData input="10"
                  expectedOutput="0.834032445247956,
					0.8340324452479558,
					0.8340324452479558,
					0.8340324,
					0.834032445247956,
					0.8340324452479558,
					0.8340324452479558,
					0.8340324"/>
        <testData input="16"
                  expectedOutput="1.0197814405382262,
					1.0197814405382263,
					1.0197814405382264,
					1.0197814,
					1.0197814405382262,
					1.0197814405382263,
					1.0197814405382264,
					1.0197814"/>
        <testData input="2.56"
                  expectedOutput="-0.06186768194846302,
					-0.061867681948463071,
					-0.061867681948463066,
					-0.0618677,
					-0.06186768194846302,
					-0.061867681948463071,
					-0.061867681948463066,
					-0.0618677"/>
        <testData input="123456789.123456789"
                  expectedOutput="2.9248484242503436,
					2.9248484242503437,
					2.9248484242503436,
					2.9248484,
					2.9248484242503436,
					2.9248484242503437,
					2.9248484242503436,
					2.9248484"/>
    </testcase>
    <testcase testName="testLNUsesSqrt"
              fieldName="testLNUsesSqrt"
              dataType="Double"
              formula="LN(SQRT(customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="1" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2"
                  expectedOutput="0.3465735902799727,
					0.3465735902799726,
					0.34657359027997264,
					0.3465736,
					0.3465735902799727,
					0.3465735902799726,
					0.34657359027997264,
					0.3465736"/>
        <testData input="3"
                  expectedOutput="0.5493061443340548,
					0.5493061443340547,
					0.5493061443340549,
					0.5493061,
					0.5493061443340548,
					0.5493061443340547,
					0.5493061443340549,
					0.5493061"/>
        <testData input="4"
                  expectedOutput="0.6931471805599453,
					0.6931471805599453,
					0.6931471805599453,
					0.6931472,
					0.6931471805599453,
					0.6931471805599453,
					0.6931471805599453,
					0.6931472"/>
        <testData input="7"
                  expectedOutput="0.9729550745276567,
					0.9729550745276568,
					0.9729550745276566,
					0.9729551,
					0.9729550745276567,
					0.9729550745276568,
					0.9729550745276566,
					0.9729551"/>
        <testData input="12"
                  expectedOutput="1.2424533248940002,
					1.2424533248940003,
					1.2424533248940002,
					1.2424533,
					1.2424533248940002,
					1.2424533248940003,
					1.2424533248940002,
					1.2424533"/>
        <testData input="16"
                  expectedOutput="1.3862943611198906,
					1.3862943611198906,
					1.3862943611198906,
					1.3862944,
					1.3862943611198906,
					1.3862943611198906,
					1.3862943611198906,
					1.3862944"/>
        <testData input="256"
                  expectedOutput="2.772588722239781,
					2.7725887222397812,
					2.772588722239781,
					2.7725887,
					2.772588722239781,
					2.7725887222397812,
					2.772588722239781,
					2.7725887"/>
        <testData input="65536.00"
                  expectedOutput="5.545177444479562,
					5.5451774444795625,
					5.545177444479562,
					5.5451774,
					5.545177444479562,
					5.5451774444795625,
					5.545177444479562,
					5.5451774"/>
        <testData input="65536.16"
                  expectedOutput="5.545178665181197,
					5.5451786651811975,
					5.545178665181197,
					5.5451787,
					5.545178665181197,
					5.5451786651811975,
					5.545178665181197,
					5.5451787"/>
        <testData input="65536.64"
                  expectedOutput="5.545182327268221,
					5.5451823272682209,
					5.545182327268221,
					5.5451823,
					5.545182327268221,
					5.5451823272682209,
					5.545182327268221,
					5.5451823"/>
        <testData input="65536.4816"
                  expectedOutput="5.545181118782468,
					5.5451811187824681,
					5.545181118782468,
					5.5451811,
					5.545181118782468,
					5.5451811187824681,
					5.545181118782468,
					5.5451811"/>
    </testcase>
    <testcase testName="testLNUsesRound"
              fieldName="testLNUsesRound"
              dataType="Double"
              formula="LN(ROUND(customnumber1__c,customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="20,-1"
                  expectedOutput="2.995732273553991,
					2.995732273553991,
					2.995732273553991,
					2.9957323,
					2.995732273553991,
					2.995732273553991,
					2.995732273553991,
					2.9957323"/>
        <testData input="20.12345, 2"
                  expectedOutput="3.0017143452315387,
					3.0017143452315385,
					3.0017143452315382,
					3.0017143,
					3.0017143452315387,
					3.0017143452315385,
					3.0017143452315382,
					3.0017143"/>
        <testData input="20.123444,4"
                  expectedOutput="3.0018833170384975,
					3.0018833170384976,
					3.0018833170384975,
					3.0018833,
					3.0018833170384975,
					3.0018833170384976,
					3.0018833170384975,
					3.0018833"/>
        <testData input="20.123445,4"
                  expectedOutput="3.0018833170384975,
					3.0018833170384976,
					3.0018833170384975,
					3.0018833,
					3.0018833170384975,
					3.0018833170384976,
					3.0018833170384975,
					3.0018833"/>
        <testData input="20.12345,4"
                  expectedOutput="3.0018882863653276,
					3.0018882863653277,
					3.0018882863653276,
					3.0018833,
					3.0018882863653276,
					3.0018882863653277,
					3.0018882863653276,
					3.0018833"/>
        <testData input="20.12,4"
                  expectedOutput="3.0017143452315387,
					3.0017143452315385,
					3.0017143452315382,
					3.0017143,
					3.0017143452315387,
					3.0017143452315385,
					3.0017143452315382,
					3.0017143"/>
        <testData input="-1,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1,0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="18.63140176714002,
					18.631401767140018,
					18.63140176714002,
					18.6314018,
					18.63140176714002,
					18.631401767140018,
					18.63140176714002,
					18.6314018"/>
        <testData input="46, 0"
                  expectedOutput="3.828641396489095,
					3.828641396489095,
					3.828641396489095,
					3.8286414,
					3.828641396489095,
					3.828641396489095,
					3.828641396489095,
					3.8286414"/>
        <testData input="-0,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.00034,3"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-.244,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.244,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.245,0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input=".24456,"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="0.24456,"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",16"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="-256,"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testLNUsesMOD"
              fieldName="testLNUsesMOD"
              dataType="Double"
              formula="LN(MOD(customnumber1__c,customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input="0,1"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="20,-1"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="20.12345, 2"
                  expectedOutput="-2.0919190631909483,
					-2.0919190631909485,
					-2.0919190631909483,
					-2.0919191,
					-2.0919190631909483,
					-2.0919190631909485,
					-2.0919190631909483,
					-2.0919191"/>
        <testData input="20.123444,13"
                  expectedOutput="1.9633913163401149,
					1.9633913163401148,
					1.9633913163401147,
					1.9633913,
					1.9633913163401149,
					1.9633913163401148,
					1.9633913163401147,
					1.9633913"/>
        <testData input="20.123445,7"
                  expectedOutput="1.8121248466474094,
					1.8121248466474093,
					1.8121248466474094,
					1.8121248,
					1.8121248466474094,
					1.8121248466474093,
					1.8121248466474094,
					1.8121248"/>
        <testData input="20.12345,23"
                  expectedOutput="3.0018858017049994,
					3.0018858017049994,
					3.0018858017049994,
					3.0018858,
					3.0018858017049994,
					3.0018858017049994,
					3.0018858017049994,
					3.0018858"/>
        <testData input="20.12,1"
                  expectedOutput="-2.120263536200091,
					-2.1202635362000911,
					-2.120263536200091,
					-2.1202635,
					-2.120263536200091,
					-2.1202635362000911,
					-2.120263536200091,
					-2.1202635"/>
        <testData input="-1,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1,2654"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-123456789.123456789, 2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="123456789.123456789,2"
                  expectedOutput="0.11641035084441129,
					0.1164103508444113,
					0.11641035173452116,
					0.1164104,
					0.11641035084441129,
					0.1164103508444113,
					0.11641035173452116,
					0.1164104"/>
        <testData input="46,-456"
                  expectedOutput="3.828641396489095,
					3.828641396489095,
					3.828641396489095,
					3.8286414,
					3.828641396489095,
					3.828641396489095,
					3.828641396489095,
					3.8286414"/>
        <testData input="-0,-1"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.00034,3"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-.244,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.244,2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-0.245,23223244"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input=".24456,123456789"
                  expectedOutput="-1.408294601399558,
					-1.408294601399558,
					-1.408294601399558,
					-1.4082946,
					-1.408294601399558,
					-1.408294601399558,
					-1.408294601399558,
					-1.4082946"/>
        <testData input="0.24456,0.000045"
                  expectedOutput="-10.41431317630212,
					-10.414313176302119,
					-10.41431317630212,
					-10.4143132,
					-10.41431317630212,
					-10.414313176302119,
					-10.41431317630212,
					-10.4143132"/>
        <testData input=",16"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",2"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="-256,16"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
    </testcase>
    <testcase testName="testLNUsesIf"
              fieldName="testLNUsesIf"
              dataType="Double"
              formula="LN(IF(false,customnumber1__c,customnumber2__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input=",24"
                  expectedOutput="3.1780538303479458,
					3.1780538303479456,
					3.1780538303479458,
					3.1780538,
					3.1780538303479458,
					3.1780538303479456,
					3.1780538303479458,
					3.1780538"/>
        <testData input="0.0,0.0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="0.00,0.00"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="0.000,0.000"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1.0,99.0"
                  expectedOutput="4.59511985013459,
					4.5951198501345899,
					4.59511985013459,
					4.5951199,
					4.59511985013459,
					4.5951198501345899,
					4.59511985013459,
					4.5951199"/>
        <testData input="99, -1"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-20,-40"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="1.1111,1.1111"
                  expectedOutput="0.10535051560782595,
					0.105350515607826,
					0.10535051560782596,
					0.1053505,
					0.10535051560782595,
					0.105350515607826,
					0.10535051560782596,
					0.1053505"/>
        <testData input="1.11114,0.00000"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="1.11115,0.00000"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="-10.054310442270712,
					-10.054310442270712,
					-10.054310442270712,
					-10.0543104,
					-10.054310442270712,
					-10.054310442270712,
					-10.054310442270712,
					-10.0543104"/>
        <testData input="123456789,123456789"
                  expectedOutput="18.63140176616802,
					18.631401766168018,
					18.63140176616802,
					18.6314018,
					18.63140176616802,
					18.631401766168018,
					18.63140176616802,
					18.6314018"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="18.63140176716802,
					18.631401767168018,
					18.63140176716802,
					18.6314018,
					18.63140176716802,
					18.631401767168018,
					18.63140176716802,
					18.6314018"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="600, 0.000600"
                  expectedOutput="-7.418580902748128,
					-7.4185809027481277,
					-7.418580902748127,
					-7.4185809,
					-7.418580902748128,
					-7.4185809027481277,
					-7.418580902748127,
					-7.4185809"/>
        <testData input="600, -600"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="1.2345, 1.2345"
                  expectedOutput="0.2106660298030971,
					0.2106660298030971,
					0.21066602980309715,
					0.210666,
					0.2106660298030971,
					0.2106660298030971,
					0.21066602980309715,
					0.210666"/>
        <testData input="1.245, 0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input=","
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="1,"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",12.123456789"
                  expectedOutput="2.495142153589359,
					2.4951421535893591,
					2.495142153589359,
					2.4951422,
					2.495142153589359,
					2.4951421535893591,
					2.495142153589359,
					2.4951422"/>
        <testData input="1.00596,240"
                  expectedOutput="5.480638923341991,
					5.4806389233419913,
					5.480638923341991,
					5.4806389,
					5.480638923341991,
					5.4806389233419913,
					5.480638923341991,
					5.4806389"/>
        <testData input="0,240"
                  expectedOutput="5.480638923341991,
					5.4806389233419913,
					5.480638923341991,
					5.4806389,
					5.480638923341991,
					5.4806389233419913,
					5.480638923341991,
					5.4806389"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="6.907755278982137,
					6.9077552789821371,
					6.907755278982137,
					6.9077553,
					6.907755278982137,
					6.9077552789821371,
					6.907755278982137,
					6.9077553"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
    </testcase>
    <testcase testName="testLNUsesCase"
              fieldName="testLNUsesCase"
              dataType="Double"
              formula="LN(CASE(customdate1__c,customdate2__c,customnumber1__c,customdate3__c,customnumber2__c,customnumber3__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customdate1" dataType="DateOnly"/>
        <referenceField fieldName="customdate2" dataType="DateOnly"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customdate3" dataType="DateOnly"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customnumber3" dataType="Double"/>
        <testData input="2004:12:04,2004:12:04,200,2004:12:04,300,400"
                  expectedOutput="5.298317366548036,
					5.2983173665480367,
					5.298317366548036,
					5.2983174,
					5.298317366548036,
					5.2983173665480367,
					5.298317366548036,
					5.2983174"/>
        <testData input="2004:12:04,2004:12:03,200,2004:12:04,300,400"
                  expectedOutput="5.703782474656201,
					5.7037824746562011,
					5.703782474656201,
					5.7037825,
					5.703782474656201,
					5.7037824746562011,
					5.703782474656201,
					5.7037825"/>
        <testData input="2004:12:04,2004:12:04,200,2004:12:03,300,400"
                  expectedOutput="5.298317366548036,
					5.2983173665480367,
					5.298317366548036,
					5.2983174,
					5.298317366548036,
					5.2983173665480367,
					5.298317366548036,
					5.2983174"/>
        <testData input="2004:12:05,2004:12:04,200,2004:12:04,300,400"
                  expectedOutput="5.991464547107982,
					5.991464547107982,
					5.991464547107982,
					5.9914645,
					5.991464547107982,
					5.991464547107982,
					5.991464547107982,
					5.9914645"/>
        <testData input=",2004:12:04,200,2004:12:04,300,400"
                  expectedOutput="5.991464547107982,
					5.991464547107982,
					5.991464547107982,
					5.9914645,
					5.991464547107982,
					5.991464547107982,
					5.991464547107982,
					5.9914645"/>
        <testData input=",,200,2004:12:04,300,400"
                  expectedOutput="5.991464547107982,
					5.991464547107982,
					5.991464547107982,
					5.9914645,
					5.991464547107982,
					5.991464547107982,
					5.991464547107982,
					5.9914645"/>
        <testData input="2004:12:04,2004:12:04,200,,300,400"
                  expectedOutput="5.298317366548036,
					5.2983173665480367,
					5.298317366548036,
					5.2983174,
					5.298317366548036,
					5.2983173665480367,
					5.298317366548036,
					5.2983174"/>
        <testData input="2004:12:04,,200,2004:12:04,300,400"
                  expectedOutput="5.703782474656201,
					5.7037824746562011,
					5.703782474656201,
					5.7037825,
					5.703782474656201,
					5.7037824746562011,
					5.703782474656201,
					5.7037825"/>
        <testData input="2004:12:04,2004:12:04,,2004:12:04,300,400"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:04,2004:12:05,200,2004:12:04,,400"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:04,2004:12:05,200,2004:12:06,,"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="2004:12:06,2004:12:04,200,2004:12:04,300,"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",,,,,"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
    </testcase>
    <testcase testName="testLNUsesLen"
              fieldName="testLNUsesLen"
              dataType="Double"
              formula="LN(LEN(customtext1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="This is too good to be true"
                  expectedOutput="3.295836866004329,
					3.2958368660043291,
					3.295836866004329,
					3.2958369,
					3.295836866004329,
					3.2958368660043291,
					3.295836866004329,
					3.2958369"/>
        <testData input="making a way"
                  expectedOutput="2.4849066497880004,
					2.4849066497880003,
					2.4849066497880004,
					2.4849066,
					2.4849066497880004,
					2.4849066497880003,
					2.4849066497880004,
					2.4849066"/>
        <testData input=""
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="blunder"
                  expectedOutput="1.9459101490553132,
					1.9459101490553133,
					1.9459101490553132,
					1.9459101,
					1.9459101490553132,
					1.9459101490553133,
					1.9459101490553132,
					1.9459101"/>
        <testData input="makesense"
                  expectedOutput="2.1972245773362196,
					2.1972245773362194,
					2.1972245773362196,
					2.1972246,
					2.1972245773362196,
					2.1972245773362194,
					2.1972245773362196,
					2.1972246"/>
        <testData input="does not make sense"
                  expectedOutput="2.9444389791664403,
					2.9444389791664405,
					2.9444389791664403,
					2.944439,
					2.9444389791664403,
					2.9444389791664405,
					2.9444389791664403,
					2.944439"/>
        <testData input="working my way"
                  expectedOutput="2.6390573296152584,
					2.6390573296152586,
					2.6390573296152584,
					2.6390573,
					2.6390573296152584,
					2.6390573296152586,
					2.6390573296152584,
					2.6390573"/>
        <testData input="e" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="hgsgthsghsngnskgstwtosgsgnsagjshgsatswouhwsogshglsalkgjslhgootwhtghwghshgjshthwtafkjhsigjhwtuwoifosjhgijsahtwtwuoshosangoiawtw9toahvojhsathwa9twofisajkghishtg9auwtwahgoshag"
                  expectedOutput="5.147494476813453,
					5.147494476813453,
					5.147494476813453,
					5.1474945,
					5.147494476813453,
					5.147494476813453,
					5.147494476813453,
					5.1474945"/>
        <testData input="250508140)#)@%)^)^)%)!_$^%)*^_!%%&amp;%)%!)_*%)&amp;^%)!%_(_"
                  expectedOutput="3.9512437185814275,
					3.9512437185814274,
					3.9512437185814275,
					3.9512437,
					3.9512437185814275,
					3.9512437185814274,
					3.9512437185814275,
					3.9512437"/>
        <testData input="blajh lsjdksj   dlsdlfgs   swcdglslgoiw slgslglsg\n\t\q\r"
                  expectedOutput="4.04305126783455,
					4.0430512678345502,
					4.04305126783455,
					4.0430513,
					4.04305126783455,
					4.0430512678345502,
					4.04305126783455,
					4.0430513"/>
    </testcase>
    <testcase testName="testLNUsesValue"
              fieldName="testLNUsesValue"
              dataType="Double"
              formula="LN(VALUE(customtext1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customtext1" dataType="Text"/>
        <testData input="0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="1" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="2"
                  expectedOutput="0.6931471805599453,
					0.6931471805599453,
					0.6931471805599453,
					0.6931472,
					0.6931471805599453,
					0.6931471805599453,
					0.6931471805599453,
					0.6931472"/>
        <testData input="-1"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-10"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-100"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="56"
                  expectedOutput="4.02535169073515,
					4.0253516907351492,
					4.02535169073515,
					4.0253517,
					4.02535169073515,
					4.0253516907351492,
					4.02535169073515,
					4.0253517"/>
        <testData input="110"
                  expectedOutput="4.700480365792417,
					4.7004803657924162,
					4.700480365792417,
					4.7004804,
					4.700480365792417,
					4.7004803657924162,
					4.700480365792417,
					4.7004804"/>
        <testData input="20"
                  expectedOutput="2.995732273553991,
					2.995732273553991,
					2.995732273553991,
					2.9957323,
					2.995732273553991,
					2.995732273553991,
					2.995732273553991,
					2.9957323"/>
    </testcase>
    <testcase testName="testLNUsesPlus"
              fieldName="testLNUsesPlus"
              dataType="Double"
              formula="LN((custompercent1__c+customcurrency1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <referenceField fieldName="customcurrency1" dataType="Currency"/>
        <testData input=",24"
                  expectedOutput="3.1780538303479458,
					3.1780538303479456,
					3.1780538303479458,
					3.1780538,
					null,
					null,
					null,
					null"/>
        <testData input="0.0,0.0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="0.00,0.00"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="0.000,0.000"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1.0,99.0"
                  expectedOutput="4.595018834931716,
					4.59501883493171601006,
					4.595018834931716,
					4.5950188,
					4.595018834931716,
					4.59501883493171601006,
					4.595018834931716,
					4.5950188"/>
        <testData input="99, -1"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-20,-40"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="1.1111,1.1111"
                  expectedOutput="0.11530084646099412,
					0.11530084646099405074,
					0.11530084646099405,
					0.1153008,
					0.11530084646099412,
					0.11530084646099405074,
					0.11530084646099405,
					0.1153008"/>
        <testData input="1.11114,0.00000"
                  expectedOutput="-4.4997836706682595,
					-4.49978367066825920826,
					-4.4997836706682595,
					-4.4997837,
					-4.4997836706682595,
					-4.49978367066825920826,
					-4.4997836706682595,
					-4.4997837"/>
        <testData input="1.11115,0.00000"
                  expectedOutput="-4.499774670942751,
					-4.49977467094275077552,
					-4.499774670942751,
					-4.4997747,
					-4.499774670942751,
					-4.49977467094275077552,
					-4.499774670942751,
					-4.4997747"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="-4.49594634260035,
					-4.4959463426003501013,
					-4.49594634260035,
					-4.4959463,
					-4.49594634260035,
					-4.4959463426003501013,
					-4.49594634260035,
					-4.4959463"/>
        <testData input="123456789,123456789"
                  expectedOutput="18.641352097021187,
					18.641352097021186,
					18.641352097021187,
					18.6413521,
					18.641352097021187,
					18.641352097021186,
					18.641352097021187,
					18.6413521"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="18.641352098021187,
					18.641352098021186,
					18.641352098021187,
					18.6413521,
					18.641352098021187,
					18.641352098021186,
					18.641352098021187,
					18.6413521"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="600, 0.000600"
                  expectedOutput="1.7918594642283883,
					1.7918594642283883,
					1.7918594642283883,
					1.7918595,
					1.7918594642283883,
					1.7918594642283883,
					1.7918594642283883,
					1.7918595"/>
        <testData input="600, -600"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="1.2345, 1.2345"
                  expectedOutput="0.22061636065626522,
					0.22061636065626522468,
					0.22061636065626522,
					0.2206164,
					0.22061636065626522,
					0.22061636065626522468,
					0.22061636065626522,
					0.2206164"/>
        <testData input="1.245, 0"
                  expectedOutput="-4.386034656071421,
					-4.38603465607142043062,
					-4.386034656071421,
					-4.3860347,
					-4.386034656071421,
					-4.38603465607142043062,
					-4.386034656071421,
					-4.3860347"/>
        <testData input=","
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="1,"
                  expectedOutput="-4.605170185988091,
					-4.60517018598809136804,
					-4.605170185988092,
					-4.6051702,
					null,
					null,
					null,
					null"/>
        <testData input=",12.123456789"
                  expectedOutput="2.495142153589359,
					2.4951421535893591,
					2.495142153589359,
					2.4951422,
					null,
					null,
					null,
					null"/>
        <testData input="1.00596,240"
                  expectedOutput="5.4806808374635825,
					5.48068083746358223676,
					5.4806808374635825,
					5.4806808,
					5.4806808374635825,
					5.48068083746358223676,
					5.4806808374635825,
					5.4806808"/>
        <testData input="0,240"
                  expectedOutput="5.480638923341991,
					5.48063892334199130366,
					5.480638923341991,
					5.4806389,
					5.480638923341991,
					5.48063892334199130366,
					5.480638923341991,
					5.4806389"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="6.907755278982137,
					6.90775527898213705305397436405309,
					6.907755278982137,
					6.9077553,
					6.907755278982137,
					6.90775527898213705305397436405309,
					6.907755278982137,
					6.9077553"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
    </testcase>
    <!--<testcase testName="testLNUsesMultiply"
              fieldName="testLNUsesMultiply"
              dataType="Double"
              formula="LN((custompercent1__c*customnumber1__c))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="custompercent1" dataType="Percent"/>
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input=",24"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="0.0,0.0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="0.00,0.00"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="0.000,0.000"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-1.0,99.0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="99, -1"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-20,-40"
                  expectedOutput="2.0794415416798357,
					2.079441541679835928252,
					2.0794415416798357,
					2.0794415,
					2.0794415416798357,
					2.079441541679835928252,
					2.0794415416798357,
					2.0794415"/>
        <testData input="1.1111,1.1111"
                  expectedOutput="-4.394469154772439,
					-4.394469154772439432252648,
					-4.394469154772439,
					-4.3944692,
					-4.394469154772439,
					-4.394469154772439432252648,
					-4.394469154772439,
					-4.3944692"/>
        <testData input="1.11114,0.00000"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="1.11115,0.00000"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="-14.554119312601296,
					-14.55411931260129674727292158,
					-14.554119312601296,
					-14.5541193,
					-14.554119312601296,
					-14.55411931260129674727292158,
					-14.554119312601296,
					-14.5541193"/>
        <testData input="123456789,123456789"
                  expectedOutput="32.65763334634794,
					32.657633346347945,
					32.65763334634794,
					32.6576333,
					32.65763334634794,
					32.657633346347945,
					32.65763334634794,
					32.6576333"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="32.65763334834794,
					32.657633348347944697352,
					32.65763334834794,
					32.6576333,
					32.65763334834794,
					32.657633348347944697352,
					32.65763334834794,
					32.6576333"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="32.65763334834794,
					32.657633348347944697352,
					32.65763334834794,
					32.6576333,
					32.65763334834794,
					32.657633348347944697352,
					32.65763334834794,
					32.6576333"/>
        <testData input="600, 0.000600"
                  expectedOutput="-5.626821433520073,
					-5.626821433520072734447,
					-5.626821433520073,
					-5.6268214,
					-5.626821433520073,
					-5.626821433520072734447,
					-5.626821433520073,
					-5.6268214"/>
        <testData input="600, -600"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="1.2345, 1.2345"
                  expectedOutput="-4.183838126381898,
					-4.183838126381897084368159,
					-4.183838126381897,
					-4.1838381,
					-4.183838126381898,
					-4.183838126381897084368159,
					-4.183838126381897,
					-4.1838381"/>
        <testData input="1.245, 0"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input=","
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="1,"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",12.123456789"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="1.00596,240"
                  expectedOutput="0.8814110468095292,
					0.881411046809529200128,
					0.8814110468095292,
					0.881411,
					0.8814110468095292,
					0.881411046809529200128,
					0.8814110468095292,
					0.881411"/>
        <testData input="0,240"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="-27.631021115928547,
					-27.63102111592854820821589745621237,
					-27.631021115928547,
					-27.6310211,
					-27.631021115928547,
					-27.63102111592854820821589745621237,
					-27.631021115928547,
					-27.6310211"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
    </testcase>-->
    <testcase testName="testBigDivide"
              fieldName="testBigDivide"
              dataType="Double"
              formula="((customnumber1__c/customnumber2__c)*customnumber3__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customnumber3" dataType="Double"/>
        <testData input="1,1000000000,1000000000"
                  expectedOutput="1.000000000,
					1,
					1,
					1,
					1.000000000,
					1,
					1,
					1"/>
        <testData input="1,123456789123456.24,123456789123456.24"
                  expectedOutput="1.00000000000000000000000000000000,
					1.00000000000000000061214949860207,
					1,
					1,
					1.00000000000000000000000000000000,
					1.00000000000000000061214949860207,
					1,
					1"/>
        <testData input="1,0,0"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.ArithmeticException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="0,1,1" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=",,1"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="0,,"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input=",,"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					null,
					null,
					null,
					null"/>
        <testData input="0,0,0"
                  expectedOutput="Error: java.lang.ArithmeticException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.ArithmeticException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
    </testcase>
    <testcase testName="testBigDivideWithFunc"
              fieldName="testBigDivideWithFunc"
              dataType="Double"
              formula="( ( (customnumber1__c * customnumber2__c )/(value(text(customnumber2__c )) ^ customnumber2__c ) )*(customnumber3__c ^ customnumber3__c ))"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <referenceField fieldName="customnumber3" dataType="Double"/>
        <testData input="1,1,1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="0,0,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="10,10,10"
                  expectedOutput="100.00000000,
					100,
					100,
					100,
					100.00000000,
					100,
					100,
					100"/>
        <testData input=",10,10"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="10,,10"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="10,10,"
                  expectedOutput="0.00000001,
					0.00000001,
					1E-8,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",,10" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="10,," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",10," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input=",," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1.1,1.1,1.1"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					1.21,
					1.21,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					1.21,
					1.21"/>
        <testData input="1,49,1.49"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					0E-32,
					0,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					0E-32,
					0"/>
        <testData input="1.5,1.5,1.5"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					2.25,
					2.25,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					2.25,
					2.25"/>
        <testData input="1,99,1.99"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					0E-32,
					0,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					0E-32,
					0"/>
        <testData input="0.01,0.01,0.01"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					0.0001,
					0.0001,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					0.0001,
					0.0001"/>
    </testcase>
    <testcase testName="testExponentiationOperator"
              fieldName="testExponentiationOperator"
              dataType="Double"
              formula="customNumber1__c ^ customNumber2__c"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customNumber1" dataType="Double"/>
        <referenceField fieldName="customNumber2" dataType="Double"/>
        <testData input=",24" expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0.0,0.0" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="0.00,0.00" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="0.000,0.000" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="-1.0,99.0"
                  expectedOutput="-1.00000000000000000,
					-1,
					-1,
					-1,
					-1.00000000000000000,
					-1,
					-1,
					-1"/>
        <testData input="99, -1"
                  expectedOutput="0.0101010101010101010,
					0.0101010101010101,
					0.010101010101010102,
					0.010101,
					0.0101010101010101010,
					0.0101010101010101,
					0.010101010101010102,
					0.010101"/>
        <testData input="-20,-40" expectedOutput="0,
					0,
					0E-32,
					0,
					0,
					0,
					0E-32,
					0"/>
        <testData input="1.1111,1.1111"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					1.1241812106222457,
					1.1241812,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					1.1241812106222457,
					1.1241812"/>
        <testData input="1.11114,0.00000" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="1.11115,0.00000" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					1.0000045305468361,
					1.0000045,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					1.0000045305468361,
					1.0000045"/>
        <testData input="123456789,123456789"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					0,
					0,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					0,
					0"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="600, 0.000600"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					1.0038455329534097,
					1.0038455,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					1.0038455329534097,
					1.0038455"/>
        <testData input="600,
					-600" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="1.2345, 1.2345"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					1.2970172611843882,
					1.2970173,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					1.2970172611843882,
					1.2970173"/>
        <testData input="1.245,
					0" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="," expectedOutput="1,
					1,
					1,
					1,
					null,
					null,
					null,
					null"/>
        <testData input="1," expectedOutput="1,
					1,
					1,
					1,
					null,
					null,
					null,
					null"/>
        <testData input=",12.123456789"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1.00596,240"
                  expectedOutput="4.16265990153128262,
					4.1626599015312826,
					4.162659901531303,
					4.1626599,
					4.16265990153128262,
					4.1626599015312826,
					4.162659901531303,
					4.1626599"/>
        <testData input="0,240" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="Error: com.force.formula.FormulaEvaluationException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: com.force.formula.FormulaEvaluationException,
					null,
					Error: Character I is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
    </testcase>
    <testcase testName="testConstDoubleNegation"
              fieldName="testConstDoubleNegation"
              dataType="Double"
              formula="customnumber__c -- 2 + customnumber__c - (2-4) + customnumber__c - (-2)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber" dataType="Double"/>
        <testData input="" expectedOutput="6,
					6,
					6,
					6,
					null,
					null,
					null,
					null"/>
        <testData input="0.0" expectedOutput="6.0,
					6,
					6,
					6,
					6.0,
					6,
					6,
					6"/>
        <testData input="24" expectedOutput="78,
					78,
					78,
					78,
					78,
					78,
					78,
					78"/>
        <testData input=".99"
                  expectedOutput="8.97,
					8.97,
					8.97,
					8.97,
					8.97,
					8.97,
					8.97,
					8.97"/>
        <testData input="-24"
                  expectedOutput="-66,
					-66,
					-66,
					-66,
					-66,
					-66,
					-66,
					-66"/>
    </testcase>
    <testcase testName="testMax"
              fieldName="testMax"
              dataType="Double"
              formula="MAX(customNumber1__c,customNumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customNumber1" dataType="Double"/>
        <referenceField fieldName="customNumber2" dataType="Double"/>
        <testData input=",24"
                  expectedOutput="24,
					24,
					24,
					24,
					null,
					24,
					null,
					null"/>
        <testData input="0.0,0.0" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="0.00,0.00" expectedOutput="0.00,
					0,
					0,
					0,
					0.00,
					0,
					0,
					0"/>
        <testData input="0.000,0.000"
                  expectedOutput="0.000,
					0,
					0,
					0,
					0.000,
					0,
					0,
					0"/>
        <testData input="-1.0,99.0"
                  expectedOutput="99.0,
					99,
					99,
					99,
					99.0,
					99,
					99,
					99"/>
        <testData input="99,
					-1" expectedOutput="99,
					99,
					99,
					99,
					99,
					99,
					99,
					99"/>
        <testData input="-20,-40"
                  expectedOutput="-20,
					-20,
					-20,
					-20,
					-20,
					-20,
					-20,
					-20"/>
        <testData input="1.1111,1.1111"
                  expectedOutput="1.1111,
					1.1111,
					1.1111,
					1.1111,
					1.1111,
					1.1111,
					1.1111,
					1.1111"/>
        <testData input="1.11114,0.00000"
                  expectedOutput="1.11114,
					1.11114,
					1.11114,
					1.11114,
					1.11114,
					1.11114,
					1.11114,
					1.11114"/>
        <testData input="1.11115,0.00000"
                  expectedOutput="1.11115,
					1.11115,
					1.11115,
					1.11115,
					1.11115,
					1.11115,
					1.11115,
					1.11115"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="1.111112,
					1.111112,
					1.111112,
					1.111112,
					1.111112,
					1.111112,
					1.111112,
					1.111112"/>
        <testData input="123456789,123456789"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568,
					123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568,
					123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="-123456789.123456789,
					-123456789.123456789,
					-123456789.12345679,
					-123456789.1234568,
					-123456789.123456789,
					-123456789.123456789,
					-123456789.12345679,
					-123456789.1234568"/>
        <testData input="600, 0.000600"
                  expectedOutput="600,
					600,
					600,
					600,
					600,
					600,
					600,
					600"/>
        <testData input="600, -600"
                  expectedOutput="600,
					600,
					600,
					600,
					600,
					600,
					600,
					600"/>
        <testData input="1.2345, 1.2345"
                  expectedOutput="1.2345,
					1.2345,
					1.2345,
					1.2345,
					1.2345,
					1.2345,
					1.2345,
					1.2345"/>
        <testData input="1.245, 0"
                  expectedOutput="1.245,
					1.245,
					1.245,
					1.245,
					1.245,
					1.245,
					1.245,
					1.245"/>
        <testData input="," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1," expectedOutput="1,
					1,
					1,
					1,
					null,
					1,
					null,
					null"/>
        <testData input=",12.123456789"
                  expectedOutput="12.123456789,
					12.123456789,
					12.123456789,
					12.1234568,
					null,
					12.123456789,
					null,
					null"/>
        <testData input="1.00596,240"
                  expectedOutput="240,
					240,
					240,
					240,
					240,
					240,
					240,
					240"/>
        <testData input="0,240"
                  expectedOutput="240,
					240,
					240,
					240,
					240,
					240,
					240,
					240"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="1000,
					1000,
					1000,
					1000,
					1000,
					1000,
					1000,
					1000"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="0.0000000000001,
					0.0000000000001,
					1E-13,
					0,
					0.0000000000001,
					0.0000000000001,
					1E-13,
					0"/>
    </testcase>
    <testcase testName="testMin"
              fieldName="testMin"
              dataType="Double"
              formula="MIN(customNumber1__c,customNumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customNumber1" dataType="Double"/>
        <referenceField fieldName="customNumber2" dataType="Double"/>
        <testData input=",24" expectedOutput="0,
					0,
					0,
					0,
					null,
					24,
					null,
					null"/>
        <testData input="0.0,0.0" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="0.00,0.00" expectedOutput="0.00,
					0,
					0,
					0,
					0.00,
					0,
					0,
					0"/>
        <testData input="0.000,0.000"
                  expectedOutput="0.000,
					0,
					0,
					0,
					0.000,
					0,
					0,
					0"/>
        <testData input="-1.0,99.0"
                  expectedOutput="-1.0,
					-1,
					-1,
					-1,
					-1.0,
					-1,
					-1,
					-1"/>
        <testData input="99,
					-1" expectedOutput="-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1"/>
        <testData input="-20,-40"
                  expectedOutput="-40,
					-40,
					-40,
					-40,
					-40,
					-40,
					-40,
					-40"/>
        <testData input="1.1111,1.1111"
                  expectedOutput="1.1111,
					1.1111,
					1.1111,
					1.1111,
					1.1111,
					1.1111,
					1.1111,
					1.1111"/>
        <testData input="1.11114,0.00000"
                  expectedOutput="0.00000,
					0,
					0,
					0,
					0.00000,
					0,
					0,
					0"/>
        <testData input="1.11115,0.00000"
                  expectedOutput="0.00000,
					0,
					0,
					0,
					0.00000,
					0,
					0,
					0"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="0.000043,
					0.000043,
					0.000043,
					0.000043,
					0.000043,
					0.000043,
					0.000043,
					0.000043"/>
        <testData input="123456789,123456789"
                  expectedOutput="123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789,
					123456789"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568,
					123456789.123456789,
					123456789.123456789,
					123456789.12345679,
					123456789.1234568"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="-123456789.123456789,
					-123456789.123456789,
					-123456789.12345679,
					-123456789.1234568,
					-123456789.123456789,
					-123456789.123456789,
					-123456789.12345679,
					-123456789.1234568"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="-123456789.123456789,
					-123456789.123456789,
					-123456789.12345679,
					-123456789.1234568,
					-123456789.123456789,
					-123456789.123456789,
					-123456789.12345679,
					-123456789.1234568"/>
        <testData input="600, 0.000600"
                  expectedOutput="0.000600,
					0.0006,
					0.0006,
					0.0006,
					0.000600,
					0.0006,
					0.0006,
					0.0006"/>
        <testData input="600, -600"
                  expectedOutput="-600,
					-600,
					-600,
					-600,
					-600,
					-600,
					-600,
					-600"/>
        <testData input="1.2345, 1.2345"
                  expectedOutput="1.2345,
					1.2345,
					1.2345,
					1.2345,
					1.2345,
					1.2345,
					1.2345,
					1.2345"/>
        <testData input="1.245,
					0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1," expectedOutput="0,
					0,
					0,
					0,
					null,
					1,
					null,
					null"/>
        <testData input=",12.123456789"
                  expectedOutput="0,
					0,
					0,
					0,
					null,
					12.123456789,
					null,
					null"/>
        <testData input="1.00596,240"
                  expectedOutput="1.00596,
					1.00596,
					1.00596,
					1.00596,
					1.00596,
					1.00596,
					1.00596,
					1.00596"/>
        <testData input="0,240" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="0.0000000000001,
					0.0000000000001,
					1E-13,
					0,
					0.0000000000001,
					0.0000000000001,
					1E-13,
					0"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="-1000,
					-1000,
					-1000,
					-1000,
					-1000,
					-1000,
					-1000,
					-1000"/>
    </testcase>
    <testcase testName="testMax3"
              fieldName="testMax"
              dataType="Double"
              formula="MAX(customNumber1__c,customNumber2__c,customNumber3__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customNumber1" dataType="Double"/>
        <referenceField fieldName="customNumber2" dataType="Double"/>
        <referenceField fieldName="customNumber3" dataType="Double"/>
        <testData input="1,1,1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="0,0,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="10,10,10" expectedOutput="10,
					10,
					10,
					10,
					10,
					10,
					10,
					10"/>
        <testData input=",10,10"
                  expectedOutput="10,
					10,
					10,
					10,
					null,
					10,
					null,
					null"/>
        <testData input="10,,10"
                  expectedOutput="10,
					10,
					10,
					10,
					null,
					10,
					null,
					null"/>
        <testData input="10,10,"
                  expectedOutput="10,
					10,
					10,
					10,
					null,
					10,
					null,
					null"/>
        <testData input=",,10"
                  expectedOutput="10,
					10,
					10,
					10,
					null,
					10,
					null,
					null"/>
        <testData input="10,,"
                  expectedOutput="10,
					10,
					10,
					10,
					null,
					10,
					null,
					null"/>
        <testData input=",10,"
                  expectedOutput="10,
					10,
					10,
					10,
					null,
					10,
					null,
					null"/>
        <testData input=",," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1.1,1.1,1.1"
                  expectedOutput="1.1,
					1.1,
					1.1,
					1.1,
					1.1,
					1.1,
					1.1,
					1.1"/>
        <testData input="1,49,1.49"
                  expectedOutput="49,
					49,
					49,
					49,
					49,
					49,
					49,
					49"/>
        <testData input="1.5,1.5,1.5"
                  expectedOutput="1.5,
					1.5,
					1.5,
					1.5,
					1.5,
					1.5,
					1.5,
					1.5"/>
        <testData input="1,99,1.99"
                  expectedOutput="99,
					99,
					99,
					99,
					99,
					99,
					99,
					99"/>
        <testData input="0.01,0.01,0.01"
                  expectedOutput="0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01"/>
    </testcase>
    <testcase testName="testMin3"
              fieldName="testMin"
              dataType="Double"
              formula="MIN(customNumber1__c,customNumber2__c,customNumber3__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customNumber1" dataType="Double"/>
        <referenceField fieldName="customNumber2" dataType="Double"/>
        <referenceField fieldName="customNumber3" dataType="Double"/>
        <testData input="1,1,1" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="0,0,0" expectedOutput="0,
					0,
					0,
					0,
					0,
					0,
					0,
					0"/>
        <testData input="10,10,10" expectedOutput="10,
					10,
					10,
					10,
					10,
					10,
					10,
					10"/>
        <testData input=",10,10" expectedOutput="0,
					0,
					0,
					0,
					null,
					10,
					null,
					null"/>
        <testData input="10,,10" expectedOutput="0,
					0,
					0,
					0,
					null,
					10,
					null,
					null"/>
        <testData input="10,10," expectedOutput="0,
					0,
					0,
					0,
					null,
					10,
					null,
					null"/>
        <testData input=",,10" expectedOutput="0,
					0,
					0,
					0,
					null,
					10,
					null,
					null"/>
        <testData input="10,," expectedOutput="0,
					0,
					0,
					0,
					null,
					10,
					null,
					null"/>
        <testData input=",10," expectedOutput="0,
					0,
					0,
					0,
					null,
					10,
					null,
					null"/>
        <testData input=",," expectedOutput="0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="1.1,1.1,1.1"
                  expectedOutput="1.1,
					1.1,
					1.1,
					1.1,
					1.1,
					1.1,
					1.1,
					1.1"/>
        <testData input="1,49,1.49" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="1.5,1.5,1.5"
                  expectedOutput="1.5,
					1.5,
					1.5,
					1.5,
					1.5,
					1.5,
					1.5,
					1.5"/>
        <testData input="1,99,1.99" expectedOutput="1,
					1,
					1,
					1,
					1,
					1,
					1,
					1"/>
        <testData input="0.01,0.01,0.01"
                  expectedOutput="0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01,
					0.01"/>
    </testcase>
    <testcase testName="testSine"
              fieldName="testSine"
              dataType="Double"
              formula="SIN(customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="" expectedOutput="0.0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="1"
                  expectedOutput="0.8414709848078965,
					0.841470984807897,
					0.8414709848078965,
					0.841471,
					0.8414709848078965,
					0.841470984807897,
					0.8414709848078965,
					0.841471"/>
        <testData input="-1"
                  expectedOutput="-0.8414709848078965,
					-0.841470984807897,
					-0.8414709848078965,
					-0.841471,
					-0.8414709848078965,
					-0.841470984807897,
					-0.8414709848078965,
					-0.841471"/>
        <testData input="3.141592653589793"
                  expectedOutput="0.00000000000000012246467991473532,
					0.00000000000000012246,
					2.384626433832795E-16,
					0,
					0.00000000000000012246467991473532,
					0.00000000000000012246,
					2.384626433832795E-16,
					0"/>
        <testData input="-3.141592653589793"
                  expectedOutput="-0.00000000000000012246467991473532,
					-0.00000000000000012246,
					-2.384626433832795E-16,
					0,
					-0.00000000000000012246467991473532,
					-0.00000000000000012246,
					-2.384626433832795E-16,
					0"/>
        <testData input="6.283185307179586"
                  expectedOutput="-0.00000000000000024492935982947064,
					-0.00000000000000024493,
					-4.76925286766559E-16,
					0,
					-0.00000000000000024492935982947064,
					-0.00000000000000024493,
					-4.76925286766559E-16,
					0"/>
        <testData input="-6.283185307179586"
                  expectedOutput="0.00000000000000024492935982947064,
					0.00000000000000024493,
					4.76925286766559E-16,
					0,
					0.00000000000000024492935982947064,
					0.00000000000000024493,
					4.76925286766559E-16,
					0"/>
        <testData input="2.718281828459045"
                  expectedOutput="0.41078129050290885,
					0.410781290502909,
					0.4107812905029089,
					0.4107813,
					0.41078129050290885,
					0.410781290502909,
					0.4107812905029089,
					0.4107813"/>
        <testData input="-2.718281828459045"
                  expectedOutput="-0.41078129050290885,
					-0.410781290502909,
					-0.4107812905029089,
					-0.4107813,
					-0.41078129050290885,
					-0.410781290502909,
					-0.4107812905029089,
					-0.4107813"/>
    </testcase>
    <testcase testName="testCosine"
              fieldName="testCosine"
              dataType="Double"
              formula="COS(customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="" expectedOutput="1.0,
					1,
					1,
					1,
					null,
					null,
					null,
					null"/>
        <testData input="0" expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="1"
                  expectedOutput="0.5403023058681398,
					0.54030230586814,
					0.5403023058681398,
					0.5403023,
					0.5403023058681398,
					0.54030230586814,
					0.5403023058681398,
					0.5403023"/>
        <testData input="-1"
                  expectedOutput="0.5403023058681398,
					0.54030230586814,
					0.5403023058681398,
					0.5403023,
					0.5403023058681398,
					0.54030230586814,
					0.5403023058681398,
					0.5403023"/>
        <testData input="3.141592653589793"
                  expectedOutput="-1.0,
					-1,
					-1,
					-1,
					-1.0,
					-1,
					-1,
					-1"/>
        <testData input="-3.141592653589793"
                  expectedOutput="-1.0,
					-1,
					-1,
					-1,
					-1.0,
					-1,
					-1,
					-1"/>
        <testData input="6.283185307179586"
                  expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="-6.283185307179586"
                  expectedOutput="1.0,
					1,
					1,
					1,
					1.0,
					1,
					1,
					1"/>
        <testData input="2.718281828459045"
                  expectedOutput="-0.9117339147869651,
					-0.911733914786965,
					-0.911733914786965,
					-0.9117339,
					-0.9117339147869651,
					-0.911733914786965,
					-0.911733914786965,
					-0.9117339"/>
        <testData input="-2.718281828459045"
                  expectedOutput="-0.9117339147869651,
					-0.911733914786965,
					-0.911733914786965,
					-0.9117339,
					-0.9117339147869651,
					-0.911733914786965,
					-0.911733914786965,
					-0.9117339"/>
    </testcase>
    <testcase testName="testTangent"
              fieldName="testTangent"
              dataType="Double"
              formula="TAN(customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="" expectedOutput="0.0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="1"
                  expectedOutput="1.5574077246549023,
					1.5574077246549,
					1.5574077246549023,
					1.5574077,
					1.5574077246549023,
					1.5574077246549,
					1.5574077246549023,
					1.5574077"/>
        <testData input="-1"
                  expectedOutput="-1.5574077246549023,
					-1.5574077246549,
					-1.5574077246549023,
					-1.5574077,
					-1.5574077246549023,
					-1.5574077246549,
					-1.5574077246549023,
					-1.5574077"/>
        <testData input="3.141592653589793"
                  expectedOutput="-0.00000000000000012246467991473532,
					-0.00000000000000012246,
					-2.384626433832795E-16,
					0,
					-0.00000000000000012246467991473532,
					-0.00000000000000012246,
					-2.384626433832795E-16,
					0"/>
        <testData input="-3.141592653589793"
                  expectedOutput="0.00000000000000012246467991473532,
					0.00000000000000012246,
					2.384626433832795E-16,
					0,
					0.00000000000000012246467991473532,
					0.00000000000000012246,
					2.384626433832795E-16,
					0"/>
        <testData input="6.283185307179586"
                  expectedOutput="-0.00000000000000024492935982947064,
					-0.00000000000000024493,
					-4.76925286766559E-16,
					0,
					-0.00000000000000024492935982947064,
					-0.00000000000000024493,
					-4.76925286766559E-16,
					0"/>
        <testData input="-6.283185307179586"
                  expectedOutput="0.00000000000000024492935982947064,
					0.00000000000000024493,
					4.76925286766559E-16,
					0,
					0.00000000000000024492935982947064,
					0.00000000000000024493,
					4.76925286766559E-16,
					0"/>
        <testData input="2.718281828459045"
                  expectedOutput="-0.4505495340698077,
					-0.450549534069808,
					-0.4505495340698078,
					-0.4505495,
					-0.4505495340698077,
					-0.450549534069808,
					-0.4505495340698078,
					-0.4505495"/>
        <testData input="-2.718281828459045"
                  expectedOutput="0.4505495340698077,
					0.450549534069808,
					0.4505495340698078,
					0.4505495,
					0.4505495340698077,
					0.450549534069808,
					0.4505495340698078,
					0.4505495"/>
    </testcase>
    <testcase testName="testArcSine"
              fieldName="testArcSine"
              dataType="Double"
              formula="ASIN(customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="" expectedOutput="0.0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="1"
                  expectedOutput="1.5707963267948966,
					1.5707963267949,
					1.5707963267948966,
					1.5707963,
					1.5707963267948966,
					1.5707963267949,
					1.5707963267948966,
					1.5707963"/>
        <testData input="-1"
                  expectedOutput="-1.5707963267948966,
					-1.5707963267949,
					-1.5707963267948966,
					-1.5707963,
					-1.5707963267948966,
					-1.5707963267949,
					-1.5707963267948966,
					-1.5707963"/>
        <testData input="3.141592653589793"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-3.141592653589793"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="6.283185307179586"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-6.283185307179586"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2.718281828459045"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-2.718281828459045"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
    </testcase>
    <testcase testName="testArcCosine"
              fieldName="testArcCosine"
              dataType="Double"
              formula="ACOS(customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input=""
                  expectedOutput="1.5707963267948966,
					1.5707963267949,
					1.5707963267948966,
					1.5707963,
					null,
					null,
					null,
					null"/>
        <testData input="0"
                  expectedOutput="1.5707963267948966,
					1.5707963267949,
					1.5707963267948966,
					1.5707963,
					1.5707963267948966,
					1.5707963267949,
					1.5707963267948966,
					1.5707963"/>
        <testData input="1" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="-1"
                  expectedOutput="3.141592653589793,
					3.14159265358979,
					3.141592653589793,
					3.1415927,
					3.141592653589793,
					3.14159265358979,
					3.141592653589793,
					3.1415927"/>
        <testData input="3.141592653589793"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-3.141592653589793"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="6.283185307179586"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-6.283185307179586"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="2.718281828459045"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
        <testData input="-2.718281828459045"
                  expectedOutput="Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null,
					Error: java.lang.NumberFormatException,
					null,
					Error: Character N is neither a decimal digit number\, decimal point\, nor &#34;e&#34; notation exponential mark.,
					null"/>
    </testcase>
    <testcase testName="testArcTangent"
              fieldName="testArcTangent"
              dataType="Double"
              formula="ATAN(customnumber1__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <testData input="" expectedOutput="0.0,
					0,
					0,
					0,
					null,
					null,
					null,
					null"/>
        <testData input="0" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="1"
                  expectedOutput="0.7853981633974483,
					0.785398163397448,
					0.7853981633974483,
					0.7853982,
					0.7853981633974483,
					0.785398163397448,
					0.7853981633974483,
					0.7853982"/>
        <testData input="-1"
                  expectedOutput="-0.7853981633974483,
					-0.785398163397448,
					-0.7853981633974483,
					-0.7853982,
					-0.7853981633974483,
					-0.785398163397448,
					-0.7853981633974483,
					-0.7853982"/>
        <testData input="3.141592653589793"
                  expectedOutput="1.2626272556789115,
					1.26262725567891,
					1.2626272556789118,
					1.2626273,
					1.2626272556789115,
					1.26262725567891,
					1.2626272556789118,
					1.2626273"/>
        <testData input="-3.141592653589793"
                  expectedOutput="-1.2626272556789115,
					-1.26262725567891,
					-1.2626272556789118,
					-1.2626273,
					-1.2626272556789115,
					-1.26262725567891,
					-1.2626272556789118,
					-1.2626273"/>
        <testData input="6.283185307179586"
                  expectedOutput="1.4129651365067377,
					1.41296513650674,
					1.4129651365067377,
					1.4129651,
					1.4129651365067377,
					1.41296513650674,
					1.4129651365067377,
					1.4129651"/>
        <testData input="-6.283185307179586"
                  expectedOutput="-1.4129651365067377,
					-1.41296513650674,
					-1.4129651365067377,
					-1.4129651,
					-1.4129651365067377,
					-1.41296513650674,
					-1.4129651365067377,
					-1.4129651"/>
        <testData input="2.718281828459045"
                  expectedOutput="1.2182829050172777,
					1.21828290501728,
					1.2182829050172777,
					1.2182829,
					1.2182829050172777,
					1.21828290501728,
					1.2182829050172777,
					1.2182829"/>
        <testData input="-2.718281828459045"
                  expectedOutput="-1.2182829050172777,
					-1.21828290501728,
					-1.2182829050172777,
					-1.2182829,
					-1.2182829050172777,
					-1.21828290501728,
					-1.2182829050172777,
					-1.2182829"/>
    </testcase>
    <testcase testName="testPi"
              fieldName="testPi"
              dataType="Double"
              formula="ROUND(PI(),12)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <testData expectedOutput="3.141592653590,
					3.14159265359,
					3.14159265359,
					3.1415927,
					3.141592653590,
					3.14159265359,
					3.14159265359,
					3.1415927"/>
    </testcase>
    <testcase testName="testArcTan2"
              fieldName="testArcTan2"
              dataType="Double"
              formula="ATAN2(customnumber1__c,customnumber2__c)"
              executionPaths="formula,sql,javascript,javascriptLp,formulaNullAsNull,sqlNullAsNull,javascriptNullAsNull,javascriptLpNullAsNull">
        <referenceField fieldName="customnumber1" dataType="Double"/>
        <referenceField fieldName="customnumber2" dataType="Double"/>
        <testData input=",24"
                  expectedOutput="0.0,
					0,
					0,
					0,
					Error: java.lang.NullPointerException,
					null,
					Error: Error: [DecimalError] Invalid argument: null,
					0"/>
        <testData input="0.0,0.0" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="0.00,0.00" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="0.000,0.000" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input="-1.0,99.0"
                  expectedOutput="-0.010100666585321907,
					-0.0101006665853219,
					-0.010100666585321907,
					-0.0101007,
					-0.010100666585321907,
					-0.0101006665853219,
					-0.010100666585321907,
					-0.0101007"/>
        <testData input="99, -1"
                  expectedOutput="1.5808969933802186,
					1.58089699338022,
					1.5808969933802186,
					1.580897,
					1.5808969933802186,
					1.58089699338022,
					1.5808969933802186,
					1.580897"/>
        <testData input="-20,-40"
                  expectedOutput="-2.677945044588987,
					-2.67794504458899,
					-2.677945044588987,
					-2.677945,
					-2.677945044588987,
					-2.67794504458899,
					-2.677945044588987,
					-2.677945"/>
        <testData input="1.1111,1.1111"
                  expectedOutput="0.7853981633974483,
					0.785398163397448,
					0.7853981633974483,
					0.7853982,
					0.7853981633974483,
					0.785398163397448,
					0.7853981633974483,
					0.7853982"/>
        <testData input="1.11114,0.00000"
                  expectedOutput="1.5707963267948966,
					1.5707963267949,
					1.5707963267948966,
					1.5707963,
					1.5707963267948966,
					1.5707963267949,
					1.5707963267948966,
					1.5707963"/>
        <testData input="1.11115,0.00000"
                  expectedOutput="1.5707963267948966,
					1.5707963267949,
					1.5707963267948966,
					1.5707963,
					1.5707963267948966,
					1.5707963267949,
					1.5707963267948966,
					1.5707963"/>
        <testData input="1.111112,0.000043"
                  expectedOutput="1.5707576268258758,
					1.57075762682588,
					1.5707576268258758,
					1.5707576,
					1.5707576268258758,
					1.57075762682588,
					1.5707576268258758,
					1.5707576"/>
        <testData input="123456789,123456789"
                  expectedOutput="0.7853981633974483,
					0.785398163397448,
					0.7853981633974483,
					0.7853982,
					0.7853981633974483,
					0.785398163397448,
					0.7853981633974483,
					0.7853982"/>
        <testData input="123456789.123456789,123456789.123456789"
                  expectedOutput="0.7853981633974483,
					0.785398163397448,
					0.7853981633974483,
					0.7853982,
					0.7853981633974483,
					0.785398163397448,
					0.7853981633974483,
					0.7853982"/>
        <testData input="123456789.123456789,-123456789.123456789"
                  expectedOutput="2.356194490192345,
					2.35619449019234,
					2.356194490192345,
					2.3561945,
					2.356194490192345,
					2.35619449019234,
					2.356194490192345,
					2.3561945"/>
        <testData input="-123456789.123456789,-123456789.123456789"
                  expectedOutput="-2.356194490192345,
					-2.35619449019234,
					-2.356194490192345,
					-2.3561945,
					-2.356194490192345,
					-2.35619449019234,
					-2.356194490192345,
					-2.3561945"/>
        <testData input="600, 0.000600"
                  expectedOutput="1.5707953267948966,
					1.5707953267949,
					1.5707953267948966,
					1.5707953,
					1.5707953267948966,
					1.5707953267949,
					1.5707953267948966,
					1.5707953"/>
        <testData input="600, -600"
                  expectedOutput="2.356194490192345,
					2.35619449019234,
					2.356194490192345,
					2.3561945,
					2.356194490192345,
					2.35619449019234,
					2.356194490192345,
					2.3561945"/>
        <testData input="1.2345, 1.2345"
                  expectedOutput="0.7853981633974483,
					0.785398163397448,
					0.7853981633974483,
					0.7853982,
					0.7853981633974483,
					0.785398163397448,
					0.7853981633974483,
					0.7853982"/>
        <testData input="1.245, 0"
                  expectedOutput="1.5707963267948966,
					1.5707963267949,
					1.5707963267948966,
					1.5707963,
					1.5707963267948966,
					1.5707963267949,
					1.5707963267948966,
					1.5707963"/>
        <testData input=","
                  expectedOutput="0.0,
					0,
					0,
					0,
					Error: java.lang.NullPointerException,
					null,
					Error: Error: [DecimalError] Invalid argument: null,
					0"/>
        <testData input="1,"
                  expectedOutput="1.5707963267948966,
					1.5707963267949,
					1.5707963267948966,
					1.5707963,
					Error: java.lang.NullPointerException,
					null,
					Error: Error: [DecimalError] Invalid argument: null,
					1.5707963"/>
        <testData input=",12.123456789"
                  expectedOutput="0.0,
					0,
					0,
					0,
					Error: java.lang.NullPointerException,
					null,
					Error: Error: [DecimalError] Invalid argument: null,
					0"/>
        <testData input="1.00596,240"
                  expectedOutput="0.004191475453895499,
					0.0041914754538955,
					0.004191475453895499,
					0.0041915,
					0.004191475453895499,
					0.0041914754538955,
					0.004191475453895499,
					0.0041915"/>
        <testData input="0,240" expectedOutput="0.0,
					0,
					0,
					0,
					0.0,
					0,
					0,
					0"/>
        <testData input=".0000000000001,1000"
                  expectedOutput="0.00000000000000010,
					0.0000000000000001,
					1E-16,
					0,
					0.00000000000000010,
					0.0000000000000001,
					1E-16,
					0"/>
        <testData input=".0000000000001,-1000"
                  expectedOutput="3.141592653589793,
					3.14159265358979,
					3.141592653589793,
					3.1415927,
					3.141592653589793,
					3.14159265358979,
					3.141592653589793,
					3.1415927"/>
    </testcase>
</formula-test>
