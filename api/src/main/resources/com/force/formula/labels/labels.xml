<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE iniFile SYSTEM "labels.dtd">
<iniFile>
    <section name="Formula_General">
        <param name="BlankFieldHandlingTitle">Blank Field Handling</param>
        <param name="BlankFields">Blank Fields</param>
        <param name="BlankFieldHandlingDescr">If your formula references any number, currency, or percent fields, specify what happens to the formula output when their values are blank.</param>
        <param name="TreatBlanksAsZeros">Treat blank fields as zeroes</param>
        <param name="TreatBlanksAsNull">Treat blank fields as blanks</param>
        <param name="DisabledFormula">This formula was disabled when the field was deleted. Edit and save it to re-enable it.</param>
        <param name="MoreHelpOnFunction">Help on this function</param>
        <param name="100ValidationRuleSamples">Useful Sample Validation Rules</param>
        <param name="UsingFunctions"><![CDATA[Operators & Functions]]></param>
        <param name="ResourcesOnCRMSuccess">Resources on successforce.com</param>
        <param name="ResourcesOnCRMCommunity">Resources on CRM Community</param>
        <param name="QuickReferenceGuide">Formula Fields Quick Reference Guide.</param>
        <param name="SimpleFormula">Simple Formula</param>
        <param name="AdvancedFormula">Advanced Formula</param>
        <param name="FormulaEditorTitle">Formula Editor</param>   <!-- aliased across labels; do not change -->
        <param name="AddToFormula">Insert Selected Function</param>
        <param name="Functions">Functions</param>
        <param name="Operators">Operators</param>
        <param name="ShowEditor">Show Formula Editor</param>
        <param name="HideEditor">Hide Formula Editor</param>
        <param name="StandardFields">{0} Std Fields</param>
        <param name="CustomFields">{0} Custom Fields</param>   <!-- aliased across labels; do not change -->
        <param name="StandardFields_NoContext">Standard Fields</param>   <!-- aliased across labels; do not change -->
        <param name="InvalidFields">Field {0} is inaccessible. Please review all fields referenced by the formula.</param>
        <param name="PolymorphicFieldLabel">{0} ({1})</param> <!-- {0} is the label for the field, {1} is the label for the domain it spans to -->
        <param name="SObjectRow">SObject Record</param> <!-- Added primarily for Flow Triggers -->
        <param name="SObjectRowField">* SObject Record ({0})</param> <!-- Added primarily for Flow Triggers, {0} is entity type -->
        <param name="JSDetected">JavaScript is a security vulnerability, so it's not allowed in this hyperlink. Ask your admin for help.</param>
    </section>
    <section name="FormulaFieldExceptionMessages">
        <param name="WrongArgumentTypeException">Incorrect parameter type for {0}. Expected {1}, received {2}</param>
        <param name="WrongNumberOfArgumentsException">Incorrect number of parameters for {0}. Expected {1}, received {2}</param>
        <param name="WrongExpressionTypeException">Formula result is data type ({1}), incompatible with expected data type ({0}).</param>
        <param name="IllegalArgumentTypeException">Incorrect argument type for {0}. </param>
        <param name="IllegalArgumentValueException_JavascriptNotAllowed">Incorrect argument value for {0}. Javascript is not allowed.</param> <!--  {0} is the name of a function/operator (like "function HYPERLINK()") -->
        <param name="InvalidFieldReferenceException">Field {0} does not exist. Check spelling.</param>
        <param name="InvalidDomainReferenceException">{1} is an invalid object type for the {0} field. Check spelling.</param>
        <param name="InvalidFunctionReferenceException">Unknown function {0}. Check spelling.</param>
        <param name="InvalidFunctionReferenceForFunctionException">The {0} function cannot reference the {1} field.</param>
        <param name="UnsupportedTypeException">You referenced an unsupported field type called &quot;{0}&quot; using the following field: {1}</param>
        <param name="UnsupportedTypeException_ENCRYPTED">You referenced an unsupported field type called &quot;{0} (Encrypted)&quot; using the following field: {1}</param>
        <param name="UnsupportedTypeException_ISPICKVAL">Field {0} is a picklist field. Picklist fields are only supported in certain functions. &lt;a href="{1}"&gt;Tell me more&lt;/a&gt;</param>
        <param name="UnsupportedTypeException_ISMULTIPICKVAL">Field {0} is a multi-select picklist field. Multi-select picklist fields are only supported in certain functions. &lt;a href="{1}"&gt;Tell me more&lt;/a&gt;</param>
        <param name="FormulaParseException">Syntax error</param>
        <param name="FormulaParseException_DETAILED">Syntax error.  Missing {2}</param>
        <param name="FormulaParseException_DETAILEDWITHTOKEN">Syntax error.  Found ''{2}''</param>
        <param name="FormulaParseException_DETAILEDWITHTEXT">Syntax error.  ''{2}''</param>
        <param name="FormulaParseException_DETAILEDWITHEXTRA">Syntax error. Extra {0}</param>
        <param name="FormulaParseException_UNHANDLED">Unexpected exception encountered {0}</param>
        <param name="NestedFormulaException">Error in referenced formula {0}, {1}</param>
        <param name="FormulaTooLongException">Formula is too long ({0} characters).  Maximum length is {1} characters</param>
        <param name="SQLTooBigException">Compiled formula is too big to execute ({0} characters). Maximum size is {1} characters</param>
        <param name="JSTooBigException">The length of the compiled JavaScript formula ({0} characters) exceeds the limit of {1} characters. To learn more, search for &quot;reducing formula size&quot; in Salesforce Help.</param>
        <param name="JSTooBigException_INCOMPLETE">The JavaScript formula can't be compiled because its size (more than {0} characters) exceeds the limit of {1} characters. To learn more, search for &quot;reducing formula size&quot; in Salesforce Help.</param>
        <param name="FunctionNotAllowedException">Function {0} may not be used in this type of formula</param>
        <param name="WrongMergeFieldTypeException">Incorrect parameter for {0}. Expected {1} field reference.</param>
        <param name="WrongArgumentException">Incorrect parameter value for {0}. Expected {1}, received {2}</param>
        <param name="WrongArgumentException_General">Incorrect parameter for {0}.</param>
        <param name="FunctionIncludesWrongArgumentException">Incorrect parameter for function INCLUDES(). Text Literal must be a valid value for this multi-select picklist field.</param>
        <param name="RegexTooComplicatedException">Regular expression runtime exceeded for: {0}</param>
        <param name="InvalidNumericValueException">The value ''{0}'' is not a valid number.</param>
        <param name="InvalidValueException_ForOperator"><![CDATA[The value ''{0}'' is not valid for operator ''{1}''.]]></param>
        <param name="SpanningRelationshipLimit_remove">You must remove at least {0} relationship(s) in order to save this {1}.</param>
        <param name="SpanningRelationshipLimit_thisFormula">Related objects referenced in this {0}:</param>
        <param name="EndOfFormula">end of formula</param>
        <param name="FieldReference">field name</param>
        <param name="Evaluation_Exception">#Error!</param>
        <param name="Overflow_Exception">#Too Big!</param>
        <param name="MaxEncodedSizeLimit">Encoded formula is too long ({0} characters). Value cannot exceed {1}.</param>
        <param name="StaticResourceNotFound">Static Resource named {0} does not exist. Check spelling.</param>
        <param name="FilterNotFound">Filter named {0} does not exist. Check spelling.</param>
        <param name="FilterFoundInaccessibleEntity">Filter named {0} does exist but {1} is not accessible.</param>
        <param name="RelatedObjectReference">Related Object Reference</param>
        <param name="InvalidSubscriptBase">Expression of type {0} cannot be subscripted.</param>
        <param name="FieldReferenceCycleDetectedException">Formula cannot use another formula field that directly or indirectly refers to itself. {1}</param>
        <param name="EncodedByteLengthTooLong">The size of your string is {0} bytes but may not exceed {1} bytes.</param>
        <param name="invalidLabelRef"><![CDATA[$Label references must be of the form $Label.<section>.<key>]]></param>
        <!--  these are used in exception messages to describe formula element -->
        <param name="function">function ''{0}()''</param>
        <param name="operator">operator ''{0}''</param>
        <param name="subscript">subscript</param>
        <param name="detailLookup">({0})</param>
        <param name="detailLookupAbbr">{0}+{1}</param>
        <param name="detailLookupMore">(...)</param>
    </section>
    <section name="FormulaFieldExceptionMessages_runtime">
        <param name="InvalidFieldReferenceException">Could not access the following field: {0}. Contact your administrator.</param>
        <param name="MissingFieldValueException">No value for the field: {0}</param>
    </section>
    <section name="FormulaFieldExceptionDataTypes">
        <param name="java.lang.String">Text</param>
        <param name="java.math.BigDecimal">Number</param>
        <param name="java.lang.Integer">Number</param>
        <param name="java.util.Date">Date</param>
        <param name="com.force.formula.FormulaDateTime">DateTime</param>
        <param name="java.lang.Boolean">Boolean</param>
        <param name="common.config.currency.CurrencyData">Currency</param>
        <param name="com.force.formula.commands.ConstantNull">Null</param>
        <param name="com.force.formula.commands.ConstantString">Text Literal</param>
        <param name="com.force.formula.commands.RuntimeType">Runtime Validated Type</param>
        <param name="java.util.Calendar">DateTime</param>
        <param name="shared.xml.soap.DateOnlyWrapper">Date</param>
        <param name="com.force.i18n.LabelReference">Label Reference</param>
        <param name="com.force.i18n.Renameable">Renameable Object</param>
    </section>
    <section name="FormulaFieldHelpMessage">
        <param name="ExampleString">Enclose text and picklist value API names in double quotes </param>
        <param name="ExampleStringValue">(&quot;the_text&quot;)</param>
        <param name="ExampleNumber">include numbers without quotes </param>
        <param name="ExampleNumberValue">(25)</param>
        <param name="ExamplePercent">show percentages as decimals</param>
        <param name="ExamplePercentValue">(0.10)</param>
        <param name="ExampleDate">and express date calculations in the standard format</param>
        <param name="ExampleDateValue">(Today() + 7)</param>
        <param name="Use">Use</param>   <!-- aliased across labels; do not change -->
        <param name="FormulaSyntax">formula syntax:</param>
        <param name="Eg">e.g.,</param>
        <param name="PicklistToolTip">Default Value overrides the default defined in Values. If the Default Value formula doesn't resolve to an active value in the picklist, the Values-level default is used.</param>
    </section>
    <section name="FormulaFieldFunctionCatagory">
        <param name="DateTime"><![CDATA[Date & Time]]></param>
        <param name="Logical">Logical</param>
        <param name="Math">Math</param>
        <param name="Text">Text</param>
        <param name="ReportSummaries">Summary</param>
        <param name="Advanced">Advanced</param>   <!-- aliased across labels; do not change -->
    </section>
    <section name="FormulaFieldOperators">
        <param name="PLUS">Add</param> <!-- This is used in the context of arithmetic. i.e. 1 + 1 = 2 -->
        <param name="MINUS">Subtract</param>
        <param name="STAR">Multiply</param>
        <param name="DIVIDE">Divide</param>   <!-- aliased across labels; do not change -->
        <param name="LPAREN">Open Parenthesis</param>
        <param name="RPAREN">Close Parenthesis</param>
        <param name="EQUAL">Equal</param>
        <param name="NE">Not Equal</param>
        <param name="LT">Less Than</param>
        <param name="GT">Greater Than</param>
        <param name="LE">Less Than or Equal</param>
        <param name="GE">Greater Than or Equal</param>
        <param name="CARET">Exponentiation</param>
        <param name="AMPERSAND">Concatenate</param>
        <param name="CONTAINS">Contains</param>
        <param name="AND">And</param>
        <param name="OR">Or</param>   <!-- aliased across labels; do not change -->
    </section>
    <section name="FormulaFieldFunctions">
        <param name="functions_title">Functions</param>
        <param name="BR">BR()</param>
        <param name="BR_DESCR">Inserts an HTML break tag in string formulas</param>
        <param name="DATE">DATE(year,month,day)</param>
        <param name="DATE_DESCR">Creates a date from a year, month and day</param>
        <param name="DATEVALUE">DATEVALUE(expression)</param>
        <param name="DATEVALUE_DESCR">Creates a date from its datetime or text representation</param>
        <param name="DATETIMEVALUE">DATETIMEVALUE(expression)</param>
        <param name="DATETIMEVALUE_DESCR">Returns a year, month, day and GMT time value</param>
        <param name="DAYS360">DAYS360(date1,date2)</param>
        <param name="DAYS360_DESCR">Returns the number of days between two dates based on a 360-day year</param>
        <param name="MONTH">MONTH(date)</param>
        <param name="MONTH_DESCR">Returns the month, a number between 1 (January) and 12 (December)</param>
        <param name="NOW">NOW()</param>
        <param name="NOW_DESCR">Returns a datetime representing the current moment</param>
        <param name="TIMENOW">TIMENOW()</param>
        <param name="TIMENOW_DESCR">Returns a time representing the current moment</param>
        <param name="TIMEVALUE">TIMEVALUE()</param>
        <param name="TIMEVALUE_DESCR">Returns a time </param>
        <param name="HOUR">HOUR()</param>
        <param name="HOUR_DESCR">Returns hour of day </param>
        <param name="MINUTE">MINUTE()</param>
        <param name="MINUTE_DESCR">Returns minute of day </param>
        <param name="SECOND">SECOND()</param>
        <param name="SECOND_DESCR">Returns second of day </param>
        <param name="MILLISECOND">MILLISECOND()</param>
        <param name="MILLISECOND_DESCR">Returns millisecond of day </param>
        <param name="TODAY">TODAY()</param>
        <param name="TODAY_DESCR">Returns the current date</param>
        <param name="WEEKDAY">WEEKDAY(date,return_type)</param>
        <param name="WEEKDAY_DESCR">Returns a number between 1 and 7 representing the day of week of a date</param>
        <param name="YEAR">YEAR(date)</param>
        <param name="YEAR_DESCR">Returns the year of a date, a number between 1900 and 9999</param>
        <param name="DAY">DAY(date)</param>
        <param name="DAY_DESCR">Returns the day of the month, a number between 1 and 31</param>
        <param name="ISNULL">ISNULL(expression)</param>
        <param name="ISNULL_DESCR">Checks whether an expression is null and returns TRUE or FALSE</param>
        <param name="ISBLANK">ISBLANK(expression)</param>
        <param name="ISBLANK_DESCR">Checks whether an expression is blank and returns TRUE or FALSE</param>
        <param name="AND">AND(logical1,logical2,...)</param>
        <param name="AND_DESCR">Checks whether all arguments are true and returns TRUE if all arguments are true</param>
        <param name="CASE">CASE(expression, value1, result1, value2, result2,...,else_result)</param>
        <param name="CASE_DESCR">Checks an expression against a series of values.  If the expression compares equal to any value, the corresponding result is returned. If it is not equal to any of the values, the else-result is returned</param>
        <param name="IF">IF(logical_test, value_if_true, value_if_false)</param>
        <param name="IF_DESCR">Checks whether a condition is true, and returns one value if TRUE and another value if FALSE.</param>
        <param name="NOT">NOT(logical)</param>
        <param name="NOT_DESCR">Changes FALSE to TRUE or TRUE to FALSE</param>
        <param name="OR">OR(logical1,logical2,...)</param>
        <param name="OR_DESCR">Checks whether any of the arguments are true and returns TRUE or FALSE.  Returns FALSE only if all arguments are false</param>
        <param name="ABS">ABS(number)</param>
        <param name="ABS_DESCR">Returns the absolute value of a number, a number without its sign</param>
        <param name="CEILING">CEILING(number)</param>
        <param name="CEILING_DESCR">Rounds a number up to the nearest integer, away from zero if negative</param>
        <param name="MCEILING">MCEILING(number)</param>
        <param name="MCEILING_DESCR">Rounds a number up to the nearest integer, towards zero if negative</param>
        <param name="EXP">EXP(number)</param>
        <param name="EXP_DESCR">Returns e raised to the power of a given number</param>
        <param name="FLOOR">FLOOR(number)</param>
        <param name="FLOOR_DESCR">Rounds a number down, towards zero to the nearest integer</param>
        <param name="MFLOOR">MFLOOR(number)</param>
        <param name="MFLOOR_DESCR">Rounds a number down to the nearest integer, away from zero if negative</param>
        <param name="INT">INT(number)</param>
        <param name="INT_DESCR">Rounds a number down to the nearest integer</param>
        <param name="LN">LN(number)</param>
        <param name="LN_DESCR">Returns the natural logarithm of a number</param>
        <param name="LOG">LOG(number)</param>
        <param name="LOG_DESCR">Returns the base 10 logarithm of n</param>
        <param name="MOD">MOD(number,divisor)</param>
        <param name="MOD_DESCR">Returns the remainder after a number is divided by a divisor</param>
        <param name="MAX">MAX(number,number,...)</param>
        <param name="MAX_DESCR">Returns the greatest of all the arguments</param>
        <param name="MIN">MIN(number,number,...)</param>
        <param name="MIN_DESCR">Returns the least of all the arguments</param>
        <param name="NULLVALUE">NULLVALUE(expression, substitute_expression)</param>
        <param name="NULLVALUE_DESCR">Checks whether expression is null and returns substitute_expression if it is null. If expression is not null, returns the original expression value.</param>
        <param name="BLANKVALUE">BLANKVALUE(expression, substitute_expression)</param>
        <param name="BLANKVALUE_DESCR">Checks whether expression is blank and returns substitute_expression if it is blank. If expression is not blank, returns the original expression value.</param>
        <param name="ROUND">ROUND(number,num_digits)</param>
        <param name="ROUND_DESCR">Rounds a number to a specified number of digits</param>
        <param name="TRUNC">TRUNC(number,num_digits)</param>
        <param name="TRUNC_DESCR">Truncates a number to a specified number of digits</param>
        <param name="SQRT">SQRT(number)</param>
        <param name="SQRT_DESCR">Returns the positive square root of a number</param>
        <param name="BEGINS">BEGINS(text, compare_text)</param>
        <param name="BEGINS_DESCR">Checks if text begins with specified characters and returns TRUE if it does. Otherwise returns FALSE</param>
        <param name="CONTAINS">CONTAINS(text, compare_text)</param>
        <param name="CONTAINS_DESCR">Checks if text contains specified characters, and returns TRUE if it does.  Otherwise, returns FALSE</param>
        <param name="LEFT">LEFT(text, num_chars)</param>
        <param name="LEFT_DESCR">Returns the specified number of characters from the start of a text string</param>
        <param name="LEN">LEN(text)</param>
        <param name="LEN_DESCR">Returns the number of characters in a text string</param>
        <param name="MID">MID(text, start_num, num_chars)</param>
        <param name="MID_DESCR">Returns character from the middle of a text string, given a starting position and length</param>
        <param name="FIND">FIND(search_text, text [, start_num])</param>
        <param name="FIND_DESCR">Returns the position of the search_text string in text</param>
        <param name="PLVALUE">PLVALUE(field, text)</param>
        <param name="PLVALUE_DESCR">Converts a text string to a picklist value</param>
        <param name="RIGHT">RIGHT(text, num_chars)</param>
        <param name="RIGHT_DESCR">Returns the specified number of characters from the end of a text string</param>
        <param name="TEXT">TEXT(value)</param>
        <param name="TEXT_DESCR">Converts a value to text using standard display format</param>
        <param name="TRIM">TRIM(text)</param>
        <param name="TRIM_DESCR">Removes all spaces from a text string except for single spaces between words</param>
        <param name="HYPERLINK">HYPERLINK(url, friendly_name [, target])</param>
        <param name="HYPERLINK_DESCR">Creates a hyperlink</param>
        <param name="IMAGE">IMAGE(image_url, alternate_text [, height, width])</param>
        <param name="IMAGE_DESCR">Inserts an image</param>
        <param name="VALUE">VALUE(text)</param>
        <param name="VALUE_DESCR">Converts a text string that represents a number to a number</param>
        <param name="ISPICKVAL">ISPICKVAL(picklist_field, text_literal)</param>
        <param name="ISPICKVAL_DESCR">Checks whether the value of a picklist field is equal to a string literal</param>
        <param name="INCLUDES">INCLUDES(multiselect_picklist_field, text_literal)</param>
        <param name="INCLUDES_DESCR">Determines if any value selected in a multi-select picklist field equals a text literal you specify.</param>
        <param name="GETSESSIONID">GETSESSIONID()</param>
        <param name="GETSESSIONID_DESCR">Returns the current session ID. This may be useful in hyperlinks to other applications that use salesforce.com credentials for authentication</param>
        <param name="PRIORVALUE">PRIORVALUE(field)</param>
        <param name="PRIORVALUE_DESCR">Returns the previous value for the field</param>
        <param name="ISCHANGED">ISCHANGED(field)</param>
        <param name="ISCHANGED_DESCR">Checks if the field's value is different from its prior value, and returns TRUE if the values differ.  Otherwise, returns FALSE</param>
        <param name="ISNEW">ISNEW()</param>
        <param name="ISNEW_DESCR">Checks if the record is new, and returns TRUE if it is new.  Otherwise, returns FALSE</param>
        <param name="ISCLONE">ISCLONE()</param>
        <param name="ISCLONE_DESCR">Checks if the record is a clone of another record, and returns TRUE if it is a clone.  Otherwise, returns FALSE</param>
        <param name="SUBSTITUTE">SUBSTITUTE(text, old_text, new_text) </param>
        <param name="SUBSTITUTE_DESCR">Substitutes new_text for old_text in a text string. Use SUBSTITUTE when you want to replace specific text in a text string</param>
        <param name="ISNUMBER">ISNUMBER(Text)</param>
        <param name="ISNUMBER_DESCR">Returns TRUE if the text value is a number. Otherwise, it returns FALSE.</param>
        <param name="IFERROR">IFERROR(expression, substitute_expression)</param>
        <param name="IFERROR_DESCR">Checks whether expression would produce an error returning substitute_expression if it would, the expression if it is valid.</param>
        <param name="REGEX">REGEX(Text, RegEx_Text)</param>
        <param name="REGEX_DESCR">Returns TRUE if Text matches the regular expression RegEx_Text. Otherwise, it returns FALSE.</param>
        <param name="DISTANCE">DISTANCE(location, location, unit)</param>
        <param name="DISTANCE_DESCR">Returns the distance between two locations using the provided unit.</param>
        <param name="GEOLOCATION">GEOLOCATION(latitude, longitude)</param>
        <param name="GEOLOCATION_DESCR">Returns a location based on the provided latitude and longitude.</param>

        <param name="LPAD">LPAD(text, padded_length [, pad_string])</param>
        <param name="LPAD_DESCR">Pad the left side of the value with spaces or the optional pad string so that the length is padded_length</param>
        <param name="RPAD">RPAD(text, padded_length [, pad_string])</param>
        <param name="RPAD_DESCR">Pad the right side of the value with spaces or the optional pad string so that the length is padded_length</param>
        <param name="LOWER">LOWER(text)</param>
        <param name="LOWER_DESCR">Converts all letters in the value to lowercase</param>
        <param name="UPPER">UPPER(text)</param>
        <param name="UPPER_DESCR">Converts all letters in the value to uppercase</param>

        <param name="URLENCODE">URLENCODE(text)</param>
        <param name="URLENCODE_DESCR">Encodes text and merge field values for use in URLs</param>
        <param name="HTMLENCODE">HTMLENCODE(text)</param>
        <param name="HTMLENCODE_DESCR">Encodes text and merge field values for use in HTML</param>
        <param name="JSENCODE">JSENCODE(text)</param>
        <param name="JSENCODE_DESCR">Encodes text and merge field values for use in JavaScript</param>
        <param name="JSINHTMLENCODE">JSINHTMLENCODE(text)</param>
        <param name="JSINHTMLENCODE_DESCR">Encodes text and merge field values for use in JavaScript within HTML tags</param>
        <param name="CASESAFEID">CASESAFEID(id)</param>
        <param name="CASESAFEID_DESCR">Converts a 15-character ID into a case insensitive 18-character ID</param>

        <param name="ADDMONTHS">ADDMONTHS(date,num)</param>
        <param name="ADDMONTHS_DESCR">Add the num months to the date, using the last date of the month if date is the last day of the month or adding num months has fewer days.</param>
        <param name="WEEKDAY">WEEKDAY(date)</param>
        <param name="WEEKDAY_DESCR">Return the day of the week for the given date, using 1 for Sunday, 2 for Monday, through 7 for Saturday.</param>

        <param name="UNIXTIMESTAMP">UNIXTIMESTAMP(date/time)</param>
        <param name="UNIXTIMESTAMP_DESCR">Return the number of seconds since 1 Jan 1970 for the given date, or number of seconds in the day for a time.</param>
        <param name="FROMUNIXTIME">FROMUNIXTIME(number)</param>
        <param name="FROMUNIXTIME_DESCR">Return the datetime that represents the given number as the seconds elapsed since 1 Jan 1970.</param>

        <param name="ISOWEEK">ISOWEEK(date)</param>
        <param name="ISOWEEK_DESCR">Return the ISO 8601 week number for the given date (from 1-53) so that the first week starts on monday.</param>
        <param name="ISOYEAR">ISOYEAR(date)</param>
        <param name="ISOYEAR_DESCR">Return the ISO 8601 week-numbering 4-digit year for the given date so that the first day is a monday.</param>
        <param name="DAYOFYEAR">DAYOFYEAR(date)</param>
        <param name="DAYOFYEAR_DESCR">Return the day of the calendar year (from 1-366).</param>

        <param name="INITCAP">INITCAP(text)</param>
        <param name="INITCAP_DESCR">Return the text as lowercase with first character of each word made uppercase.</param>

        <param name="CHR">CHR(number)</param>
        <param name="CHR_DESCR">Return a string with the first character's code point as the given number.</param>
        <param name="ASCII">CHR(text)</param>
        <param name="ASCII_DESCR">Return the first character's code point from the given string as a number.</param>

        <param name="FORMATCURRENCY">FORMATCURRENCY(currencyisocode, number)</param>
        <param name="FORMATCURRENCY_DESCR">Format the given number as a currency using the scale of the given currency code, with that code prepended.</param>

        <param name="FORMAT">FORMAT(value[, format] | messageFormat[, args...])</param>
        <param name="FORMAT_DESCR">Format the number, date or time with an optional format, or use the java-style message format with optional arguments.</param>

        <param name="FORMATDURATION">FORMATDURATION(numSeconds[, includeDays] | dateTime/time, dateTime/time)</param>
        <param name="FORMATDURATION_DESCR">Format the number of seconds with optional days, or the difference between times or dateTimes as HH:MI:SS.</param>
        <param name="LABEL">LABEL(section, key, [arg0,...])</param>
        <param name="LABEL_DESCR">Render the label in the language of the user for the given section and key.</param>

        <!-- Internal only.  Doesn't have to be translated-->
        <param name="FORMAT_ADDRESS">FORMAT_ADDRESS(street,city,state,zip,country[,lineSep])</param>
        <param name="FORMAT_ADDRESS_DESCR">Format the address in mailing format using the line separator provided if necessary.</param>
        <param name="FORMAT_ADDRESS2">FORMAT_ADDRESS2(street1,street2,city,state,zip,country[,lineSep])</param>
        <param name="FORMAT_ADDRESS2_DESCR">Format the address with two street lines in mailing format using the line separator provided if necessary.</param>
    </section>
</iniFile>
