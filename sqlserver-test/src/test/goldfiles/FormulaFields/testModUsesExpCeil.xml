<?xml version="1.0" encoding="UTF-8"?>
<testCase name="testModUsesExpCeil">
   <testInstance formula="MOD(EXP(customnumber1__c),CEILING(customnumber2__c))" returntype="Double" precision="12" scale="2">
    <SqlOutput nullAsNull="true">
       <Sql>(CAST(EXP(COALESCE($!s0s!$.customnumber1__c, 0)) AS DECIMAL(38,10)) % CASE WHEN COALESCE($!s0s!$.customnumber2__c, 0)&gt;=0 THEN CEILING(ROUND(COALESCE($!s0s!$.customnumber2__c, 0),33)) ELSE FLOOR(ROUND(COALESCE($!s0s!$.customnumber2__c, 0),33)) END)</Sql>
       <Guard>null</Guard>
    </SqlOutput>
    <SqlOutput nullAsNull="false">
       <Sql>(CAST(EXP($!s0s!$.customnumber1__c) AS DECIMAL(38,10)) % CASE WHEN $!s0s!$.customnumber2__c&gt;=0 THEN CEILING(ROUND($!s0s!$.customnumber2__c,33)) ELSE FLOOR(ROUND($!s0s!$.customnumber2__c,33)) END)</Sql>
       <Guard>null</Guard>
    </SqlOutput>
    <JsOutput highPrec="true" nullAsNull="false">$F.Decimal.exp($F.nvl(context.record.customnumber1__c,new $F.Decimal('0'))).mod(($F.nvl(context.record.customnumber2__c,new $F.Decimal('0')).isPos()?$F.nvl(context.record.customnumber2__c,new $F.Decimal('0')).toDP(18).ceil():$F.nvl(context.record.customnumber2__c,new $F.Decimal('0')).toDP(18).floor()))</JsOutput>
    <JsOutput highPrec="true" nullAsNull="true">(context.record.customnumber2__c!=null&amp;&amp;context.record.customnumber1__c!=null)?($F.Decimal.exp(context.record.customnumber1__c).mod((context.record.customnumber2__c.isPos()?context.record.customnumber2__c.toDP(18).ceil():context.record.customnumber2__c.toDP(18).floor()))):null</JsOutput>
    <JsOutput highPrec="false" nullAsNull="false">((Math.exp($F.nvl(context.record.customnumber1__c,0)))%((($F.nvl(context.record.customnumber2__c,0))&gt;=0?Math.ceil($F.nvl(context.record.customnumber2__c,0)):Math.floor($F.nvl(context.record.customnumber2__c,0)))))</JsOutput>
    <JsOutput highPrec="false" nullAsNull="true">(context.record.customnumber2__c!=null&amp;&amp;context.record.customnumber1__c!=null)?(((Math.exp(context.record.customnumber1__c))%(((context.record.customnumber2__c)&gt;=0?Math.ceil(context.record.customnumber2__c):Math.floor(context.record.customnumber2__c))))):null</JsOutput>
      <result>
      <inputvalues>[0, 0]</inputvalues>
         <formula>Error: java.lang.ArithmeticException</formula>
         <sql>Error: Divide by zero error encountered.</sql>
         <formulaNullAsNull>Error: java.lang.ArithmeticException</formulaNullAsNull>
         <sqlNullAsNull>Error: Divide by zero error encountered.</sqlNullAsNull>
      </result>
      <result>
      <inputvalues>[0, 1]</inputvalues>
         <formula>0.0</formula>
         <sql>0</sql>
         <formulaNullAsNull>0.0</formulaNullAsNull>
         <sqlNullAsNull>0</sqlNullAsNull>
      </result>
      <result>
      <inputvalues>[1, 2]</inputvalues>
         <formula>0.718281828459045</formula>
         <sql>0.7182818285</sql>
         <formulaNullAsNull>0.718281828459045</formulaNullAsNull>
         <sqlNullAsNull>0.7182818285</sqlNullAsNull>
      </result>
      <result>
      <inputvalues>[2, 4]</inputvalues>
         <formula>3.38905609893065</formula>
         <sql>3.3890560989</sql>
         <formulaNullAsNull>3.38905609893065</formulaNullAsNull>
         <sqlNullAsNull>3.3890560989</sqlNullAsNull>
      </result>
      <result>
      <inputvalues>[-1, -12]</inputvalues>
         <formula>0.36787944117144233</formula>
         <sql>0.3678794412</sql>
         <formulaNullAsNull>0.36787944117144233</formulaNullAsNull>
         <sqlNullAsNull>0.3678794412</sqlNullAsNull>
      </result>
      <result>
      <inputvalues>[-10, 2]</inputvalues>
         <formula>0.000045399929762484854</formula>
         <sql>0.0000453999</sql>
         <formulaNullAsNull>0.000045399929762484854</formulaNullAsNull>
         <sqlNullAsNull>0.0000453999</sqlNullAsNull>
      </result>
      <result>
      <inputvalues>[-100, -1]</inputvalues>
         <formula>0.00000000000000000000000000000000</formula>
         <sql>0</sql>
         <formulaNullAsNull>0.00000000000000000000000000000000</formulaNullAsNull>
         <sqlNullAsNull>0</sqlNullAsNull>
      </result>
      <result>
      <inputvalues>[30, 5]</inputvalues>
         <formula>4.463</formula>
         <sql>4.462890625</sql>
         <formulaNullAsNull>4.463</formulaNullAsNull>
         <sqlNullAsNull>4.462890625</sqlNullAsNull>
      </result>
      <result>
      <inputvalues>[30, 0]</inputvalues>
         <formula>Error: java.lang.ArithmeticException</formula>
         <sql>Error: Divide by zero error encountered.</sql>
         <formulaNullAsNull>Error: java.lang.ArithmeticException</formulaNullAsNull>
         <sqlNullAsNull>Error: Divide by zero error encountered.</sqlNullAsNull>
      </result>
      <result>
      <inputvalues>[30, 12]</inputvalues>
         <formula>4.463</formula>
         <sql>4.462890625</sql>
         <formulaNullAsNull>4.463</formulaNullAsNull>
         <sqlNullAsNull>4.462890625</sqlNullAsNull>
      </result>
      <result>
      <inputvalues>[, ]</inputvalues>
         <formula>Error: java.lang.ArithmeticException</formula>
         <sql>Error: Divide by zero error encountered.</sql>
         <formulaNullAsNull>null</formulaNullAsNull>
         <sqlNullAsNull>null</sqlNullAsNull>
      </result>
      <result>
      <inputvalues>[, 2]</inputvalues>
         <formula>1.0</formula>
         <sql>1</sql>
         <formulaNullAsNull>null</formulaNullAsNull>
         <sqlNullAsNull>null</sqlNullAsNull>
      </result>
   </testInstance>
</testCase>
